<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://clement-jean.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://clement-jean.github.io/" rel="alternate" type="text/html" /><updated>2023-02-17T18:00:47+08:00</updated><id>https://clement-jean.github.io/feed.xml</id><title type="html">Clément Jean</title><subtitle>Eternal learner and challenges lover</subtitle><author><name>Clément Jean</name></author><entry><title type="html">Protein: Lexer (Part 1)</title><link href="https://clement-jean.github.io/protein_lexer_part_1/" rel="alternate" type="text/html" title="Protein: Lexer (Part 1)" /><published>2023-02-17T00:00:00+08:00</published><updated>2023-02-17T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_1/"><![CDATA[<p>As promised in a <a href="https://www.linkedin.com/posts/clement-jean_protobuf-activity-7024951031868391424-I26b?utm_source=share&amp;utm_medium=member_desktop">LinkedIn Poll</a>, we are going to develop Parser for proto files which will create an AST that is serializable in Protobuf itself. Obviously, this is going to be a series of articles because we need to write quite a lot of parsing code. However, I believe that this is worth doing since we are going to see another use of Protobuf outside of gRPC.</p>
<p>In this article, we are going to present the project and start writing a Lexer. This is not the most amusing part. However, this will be the foundations for our part 2 in which we will start more complex tokenizing of the input.</p>
<h2 id="the-project">The Project</h2>
<p>The project is called <a href="https://github.com/Clement-Jean/protein">protein</a>. In itself, this is intended to be a project showing how to parse proto files to do tools for Protobuf. But the end goal is to provide an easy-to-use and efficient linter.</p>
<p>The project is mostly divided into three components:</p>
<ul>
<li>The Lexer: it tokenizes the input and provides metadata about these tokens.</li>
<li>The Parser: it verifies the validity of our tokens and builds an AST.</li>
<li>The Linter: it analyzes the AST and provide feedback to users.</li>
</ul>
<blockquote>
<p>Note: There might be more components later but these are the major ones.</p>
</blockquote>
<p>One thing worth mentioning is that the AST will be built with objects generated by Protobuf. This means that we will have an AST that we can serialize and maybe even cache for multiple runs of our Linter.</p>
<p>Finally, as mentioned, this project shows how to build tools for Protobuf. Thus I hope the readers will be inspired to create their own tools and/or contribute to this project. I'm going to document all the code and explain all the logic so that you can follow along and even participate in the development.</p>
<h2 id="the-lexer">The Lexer</h2>
<p>The <code>protein</code> Lexer has been inspired by one of the great pieces of code out there: The <a href="https://cs.opensource.google/go/go/+/master:src/text/template/parse/lex.go">template library lex.go</a> in the Go standard library. I was introduced to this code by an <a href="https://www.youtube.com/watch?v=HxaD_trXwRE">amazing talk</a> given by <a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>. So I want to thank all the contributors and Rob for the amazing talk. <strong>Thank you guys!</strong></p>
<p>The essence of the Lexer is a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">Finite-state Machine</a> (FSM). This basically means that we are going to go from state to state by applying functions to do the transition. For example, let's say that we have the following line:</p>
<div class="code_switcher_container_parent 0c356e04-26c7-4f0d-ad8c-fb449cc9b36f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>
</code></pre></div></div>
</div>
<p>We will go through the following states:</p>
<div class="code_switcher_container_parent 47b13464-1b91-4bb1-badd-ba10bcff4056"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>initial state -&gt; Identifier(&quot;syntax&quot;) -&gt; Equal -&gt; Str(&quot;proto3&quot;) -&gt; EOF
</code></pre></div>
<p>And each state will know how to parse their own value (e.g. &quot;proto3&quot; for the Str state).</p>
<p>Finally, the Lexer will be used by calling the <code>NextToken</code> function. This function, as its name suggests, will return the next token in the input. This is basically calling all the parsing functions from each state.</p>
<h2 id="lets-start-simple">Let's Start Simple</h2>
<p>Let's fullfil the first requirement. The user code, in our case the Parser, will interact with the Lexer by repeatedly calling the <code>NextToken</code> function. So let's define an interface because that will be handy later on in this series to test the Parser on a fake Lexer.</p>
<ul class="code-tab-container 4801b54f-8d6b-4254-9a0c-8d697b251e45"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4801b54f-8d6b-4254-9a0c-8d697b251e45', 0)">lexer/lexer.go</a></li></ul><ul class="code-tab-switcher 4801b54f-8d6b-4254-9a0c-8d697b251e45"><li class="code_switcher_container_parent active-tab code_switcher_go e1139fb9-c0e4-4231-b50f-bd9495e5b200"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// Lexer is protein's tokenizer</span>
<span class="k">type</span> <span class="n">Lexer</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// NextToken returns the following token in the input source.</span>
  <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>For now, &quot;input source&quot; is still a little vague but we are going to deal with that later in the implementation.</p>
<p>After that, we do not have the definition of a <code>Token</code>. In our application, a token is a collection of few information about some text in the input:</p>
<ul>
<li>A type: a simple way to identify tokens (e.g., Identifier, Str, ...)</li>
<li>A literal: the value of a token as a string</li>
<li>A position: the position of this text in the input</li>
</ul>
<p>Let's define all that. Let's start with position. We want to know the offset relative to the beginning of the file and we want to know the line and column at which the token shows up. These info are for making the error messages clearer to the user (at least we'll try our best!). Instead of having something like:</p>
<p><code>unterminated string</code></p>
<p>we want to have:</p>
<p><code>file.proto 1:10 unterminated string: &quot;this is unterminated</code></p>
<p>Where, in this example 1 is the line and 10 is the column.</p>
<p>So a position is pretty simple.</p>
<ul class="code-tab-container 75c0d8ef-d939-4cb6-994c-b194e6bbc756"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '75c0d8ef-d939-4cb6-994c-b194e6bbc756', 0)">lexer/position.go</a></li></ul><ul class="code-tab-switcher 75c0d8ef-d939-4cb6-994c-b194e6bbc756"><li class="code_switcher_container_parent active-tab code_switcher_go 95bffb28-af38-4a16-bf48-06885513501b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// Position is a position in the input</span>
<span class="k">type</span> <span class="n">Position</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="c">// Offset is the position relative to the beginning of the file (starts at 0)</span>
  <span class="n">Offset</span> <span class="kt">int</span>

  <span class="c">// Line is the file line (starts at 1)</span>
  <span class="n">Line</span> <span class="kt">int</span>

  <span class="c">// Column is the offset relative to the beginning of the line (starts at 0)</span>
  <span class="n">Column</span> <span class="kt">int</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And with that we can now define our Token.</p>
<ul class="code-tab-container 471c6ca7-b7de-467e-b085-0b03ba4d394d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '471c6ca7-b7de-467e-b085-0b03ba4d394d', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher 471c6ca7-b7de-467e-b085-0b03ba4d394d"><li class="code_switcher_container_parent active-tab code_switcher_go a9a47c6a-b41c-4ba8-95eb-efce1b7fe772"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// TokenType is an alias type which tells of which kind the token is</span>
<span class="k">type</span> <span class="n">TokenType</span> <span class="kt">int</span>

<span class="c">// Token is a piece of the input</span>
<span class="k">type</span> <span class="n">Token</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Type</span>    <span class="n">TokenType</span>
  <span class="n">Literal</span> <span class="kt">string</span>
  <span class="n">Position</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="token-types">Token Types</h2>
<p>Right now, we simply have the <code>TokenType</code> type alias but do not define any value. We are going to define an enum for all the possible values that the <code>Token.Type</code> property can have.</p>
<ul class="code-tab-container 8a40598f-35b4-4868-adc9-19ceba95ac6d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8a40598f-35b4-4868-adc9-19ceba95ac6d', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher 8a40598f-35b4-4868-adc9-19ceba95ac6d"><li class="code_switcher_container_parent active-tab code_switcher_go 86560b08-8ceb-468b-907a-38ffab81c714"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="c">// These are all the token types</span>
<span class="k">const</span> <span class="p">(</span>
  <span class="n">EOF</span>          <span class="n">TokenType</span> <span class="o">=</span> <span class="no">iota</span> <span class="o">-</span> <span class="m">1</span> <span class="c">// End Of File</span>
  <span class="n">TokenIllegal</span>                      <span class="c">// Illegal token</span>
  <span class="n">TokenError</span>                        <span class="c">// Error</span>
  <span class="n">TokenSpace</span>                        <span class="c">// Space (whitespace, '\n', '\r', '\t')</span>
  <span class="n">TokenComment</span>                      <span class="c">// Comment (single line or multiline)</span>

  <span class="n">TokenIdentifier</span> <span class="c">// Identifier</span>
  <span class="n">TokenInt</span>        <span class="c">// Integer</span>
  <span class="n">TokenFloat</span>      <span class="c">// Float</span>
  <span class="n">TokenStr</span>        <span class="c">// String ('...' or "...")</span>

  <span class="n">TokenUnderscore</span>  <span class="c">// _</span>
  <span class="n">TokenEqual</span>       <span class="c">// =</span>
  <span class="n">TokenColon</span>       <span class="c">// ,</span>
  <span class="n">TokenSemicolon</span>   <span class="c">// ;</span>
  <span class="n">TokenDot</span>         <span class="c">// .</span>
  <span class="n">TokenLeftBrace</span>   <span class="c">// {</span>
  <span class="n">TokenRightBrace</span>  <span class="c">// }</span>
  <span class="n">TokenLeftSquare</span>  <span class="c">// [</span>
  <span class="n">TokenRightSquare</span> <span class="c">// ]</span>
  <span class="n">TokenLeftParen</span>   <span class="c">// (</span>
  <span class="n">TokenRightParen</span>  <span class="c">// )</span>
  <span class="n">TokenLeftAngle</span>   <span class="c">// &lt;</span>
  <span class="n">TokenRightAngle</span>  <span class="c">// &gt;</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>There are few things to notice here. The first one is the use of <code>iota</code>. If you are not familiar with this, this is a keyword that lets us define multiple constant with consecutive values. Here, we use <code>iota - 1</code> because, by default, <code>iota</code> starts counting at zero but here we want to start at -1. The second thing to notice is that some of these tokens have constant values (e.g., <code>TokenEqual</code> == '=') and others don't have one (e.g., Identifier value will be evaluated at runtime).</p>
<p>For debugging and testing, we will need a way to display the <code>TokenType</code> as a string. In Go, we can simply do that by defining a function called <code>String()</code> on the <code>TokenType</code> type. And to define the value we are going to have a constant array defining values based on the type (remember <code>TokenType</code> is just an int).</p>
<ul class="code-tab-container de5fff39-abd8-4c42-bc5d-d4bfaf2583c3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'de5fff39-abd8-4c42-bc5d-d4bfaf2583c3', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher de5fff39-abd8-4c42-bc5d-d4bfaf2583c3"><li class="code_switcher_container_parent active-tab code_switcher_go e9c16ed4-dd27-42a0-a8cd-9f7db5434fe0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">var</span> <span class="n">tokenTypeStr</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
  <span class="s">"EOF"</span><span class="p">,</span>
  <span class="s">"Illegal"</span><span class="p">,</span>
  <span class="s">"Error"</span><span class="p">,</span>
  <span class="s">"Space"</span><span class="p">,</span>
  <span class="s">"Comment"</span><span class="p">,</span>
  <span class="s">"Identifier"</span><span class="p">,</span>
  <span class="s">"Integer"</span><span class="p">,</span>
  <span class="s">"Float"</span><span class="p">,</span>
  <span class="s">"String"</span><span class="p">,</span>
  <span class="s">"_"</span><span class="p">,</span>
  <span class="s">"="</span><span class="p">,</span>
  <span class="s">","</span><span class="p">,</span>
  <span class="s">";"</span><span class="p">,</span>
  <span class="s">"."</span><span class="p">,</span>
  <span class="s">"{"</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span>
  <span class="s">"["</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span>
  <span class="s">"("</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span>
  <span class="s">"&lt;"</span><span class="p">,</span> <span class="s">"&gt;"</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">tokenTypeStr</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="m">1</span><span class="p">]</span> <span class="c">// +1 because we start at iota - 1</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementing-a-basic-lexer">Implementing a Basic Lexer</h2>
<p>With all of the previous boilerplate, we can now start our implementation. Don't get too excited though, we are simply going to define an &quot;empty shell&quot; Lexer in order to be able to write a failing test (see <a href="https://stackoverflow.com/questions/276813/what-is-red-green-testing">Red/Green testing</a>).</p>
<p>As we know, we need to implement the <code>NextToken</code> function.</p>
<ul class="code-tab-container 5496daee-c86f-4925-a2a6-fe0ab30162cc"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '5496daee-c86f-4925-a2a6-fe0ab30162cc', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 5496daee-c86f-4925-a2a6-fe0ab30162cc"><li class="code_switcher_container_parent active-tab code_switcher_go e0ca7063-95ca-4670-a9d1-0edb22008a85"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">Token</span><span class="p">{</span>
    <span class="n">Type</span><span class="o">:</span> <span class="n">TokenIllegal</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Furthermore, we need a simple way to instantiate our Lexer. To do so, we are going to create a function called <code>New</code> with a return type being <code>Lexer</code> and will return an instance of <code>Impl</code>.</p>
<ul class="code-tab-container 968068e8-9c09-4ff1-a258-c4e1d3c0f949"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '968068e8-9c09-4ff1-a258-c4e1d3c0f949', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 968068e8-9c09-4ff1-a258-c4e1d3c0f949"><li class="code_switcher_container_parent active-tab code_switcher_go 88c58d77-bebc-43a9-a67a-75dd006db9c8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// New creates a new instance of the Lexer</span>
<span class="k">func</span> <span class="n">New</span><span class="p">()</span> <span class="n">Lexer</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="writing-a-failing-test">Writing a Failing Test</h2>
<p>Now let's start with a simple test. We are going to test all the symbols (Underscore, Equal, ...). At the end of this article, we aim to make that test pass.</p>
<p>We are going to use a technique called <a href="https://arslan.io/2022/12/04/functional-table-driven-tests-in-go/">table-driven tests</a>. To do so, we are going to define a type that represents an expected Token.</p>
<ul class="code-tab-container ded5989e-9dbd-4eaf-a32f-6f998e3ccdda"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ded5989e-9dbd-4eaf-a32f-6f998e3ccdda', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher ded5989e-9dbd-4eaf-a32f-6f998e3ccdda"><li class="code_switcher_container_parent active-tab code_switcher_go 5d0a71da-b14e-43a0-9409-46d72748490a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Check</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">expectedType</span>     <span class="n">TokenType</span>
  <span class="n">expectedLiteral</span>  <span class="kt">string</span>
  <span class="n">expectedPosition</span> <span class="n">Position</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>I'm calling it <code>Check</code> because it will be used as for a single check in a list of checks. We are going to iterate over that list of checks and do asserts on the three properties.</p>
<ul class="code-tab-container 13a4d884-bf3e-4094-9d39-3a0d515279cc"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '13a4d884-bf3e-4094-9d39-3a0d515279cc', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 13a4d884-bf3e-4094-9d39-3a0d515279cc"><li class="code_switcher_container_parent active-tab code_switcher_go 3626d1ed-f243-4b79-a815-0587cecc8fa4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="n">tok</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedType</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - tokentype wrong. expected=%q, got=%q"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedType</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Type</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Literal</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedLiteral</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - literal wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedLiteral</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// asserts on Position for later</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can now write a compiling and failing test.</p>
<ul class="code-tab-container b57fcb54-1da0-409c-8876-fc787c62e5dd"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b57fcb54-1da0-409c-8876-fc787c62e5dd', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher b57fcb54-1da0-409c-8876-fc787c62e5dd"><li class="code_switcher_container_parent active-tab code_switcher_go bf9f5299-28ff-4ffa-97ac-3a8d1a81eb3e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>
<span class="p">)</span>

<span class="c">//...</span>

<span class="k">func</span> <span class="n">TestNextTokenOnSymbols</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenColon</span><span class="p">,</span> <span class="s">","</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenDot</span><span class="p">,</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftBrace</span><span class="p">,</span> <span class="s">"{"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightBrace</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftSquare</span><span class="p">,</span> <span class="s">"["</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightSquare</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftParen</span><span class="p">,</span> <span class="s">"("</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightParen</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftAngle</span><span class="p">,</span> <span class="s">"&lt;"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightAngle</span><span class="p">,</span> <span class="s">"&gt;"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and if we test:</p>
<div class="code_switcher_container_parent 64655d46-92cf-4a5b-be12-b44f24f95f15"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"_"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>That was expected.</p>
<h2 id="improving-impl">Improving Impl</h2>
<p>If you didn't notice, our implementation for the Lexer is useless. It's not storing any state and it doesn't even process text. Let's change that.</p>
<p>Let's first look at the states our Lexer will store.</p>
<ul class="code-tab-container f30e7079-397b-4d7d-8028-310f7290d0b0"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f30e7079-397b-4d7d-8028-310f7290d0b0', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f30e7079-397b-4d7d-8028-310f7290d0b0"><li class="code_switcher_container_parent active-tab code_switcher_go c8d72a43-5c5d-4fde-b2c9-d40c6c971137"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Impl is the implementation for the Lexer interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">src</span>             <span class="kt">string</span> <span class="c">// the input text</span>
  <span class="n">start</span>           <span class="kt">int</span>    <span class="c">// the start of a token</span>
  <span class="n">startLine</span>       <span class="kt">int</span>    <span class="c">// the line at which a token start</span>
  <span class="n">startLineOffset</span> <span class="kt">int</span>    <span class="c">// the offset of the starting line relative to beginning of file</span>
  <span class="n">line</span>            <span class="kt">int</span>    <span class="c">// the current file line being process</span>
  <span class="n">pos</span>             <span class="kt">int</span>    <span class="c">// the reading position in the file</span>
  <span class="n">atEOF</span>           <span class="kt">bool</span>   <span class="c">// tells wether the Lexer is finished</span>
  <span class="n">token</span>           <span class="n">Token</span>  <span class="c">// the token to return</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That seems like a lot but don't worry, this is actually pretty intuitive once we start interacting with these properties.</p>
<p>Now, we can improve our <code>New</code> function a little bit.</p>
<ul class="code-tab-container b3f98255-f629-4e8c-b36f-d514de0691f6"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b3f98255-f629-4e8c-b36f-d514de0691f6', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher b3f98255-f629-4e8c-b36f-d514de0691f6"><li class="code_switcher_container_parent active-tab code_switcher_go a88d928d-7c29-4903-aa60-75f97d9a18e6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// New creates a new instance of the Lexer</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">input</span> <span class="kt">string</span><span class="p">)</span> <span class="n">Lexer</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span>
    <span class="n">src</span><span class="o">:</span>       <span class="n">input</span><span class="p">,</span>
    <span class="n">line</span><span class="o">:</span>      <span class="m">1</span><span class="p">,</span> <span class="c">// lines are 1-indexed</span>
    <span class="n">startLine</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We are finally storing text and some indices to keep track of where we are in it.</p>
<p>We can now start to think about emitting token in the <code>NextToken</code> function but before actually emitting tokens we are going to need thinking about the FSM.</p>
<p>As mentioned, we are going to create states and transitions between these states. These states will be represented as functions and the transitions will be made by returning another state after the processing needed for the current state.</p>
<p>We define a state as follows:</p>
<ul class="code-tab-container 0afbf672-ceb0-48bc-b370-c11629e3305d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '0afbf672-ceb0-48bc-b370-c11629e3305d', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 0afbf672-ceb0-48bc-b370-c11629e3305d"><li class="code_switcher_container_parent active-tab code_switcher_go 2b72fe77-4fa8-49ff-8a14-0961fbecab0d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">type</span> <span class="n">stateFn</span> <span class="k">func</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span>
</code></pre></div></div>
</li></ul>
<p>You can notice that this is a function, taking an <code>Impl</code> as parameter and returning a stateFn. Think about is as a list of states linked together.</p>
<p>With that, we are now able to define the <code>NextToken</code> logic.</p>
<ul class="code-tab-container b4fbb5ac-bd5d-449f-a663-cdc16fe2ee1d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b4fbb5ac-bd5d-449f-a663-cdc16fe2ee1d', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher b4fbb5ac-bd5d-449f-a663-cdc16fe2ee1d"><li class="code_switcher_container_parent active-tab code_switcher_go 05c789ed-611d-4008-bad8-f0b349c25f56"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// NextToken provides the following token in the input</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span> <span class="p">{</span>
  <span class="n">state</span> <span class="o">:=</span> <span class="n">lexProto</span>
  <span class="k">for</span> <span class="p">{</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">state</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">state</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">token</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Where <code>lexerProto</code> is the initial state and where we iterate until <code>state</code> it becomes <code>nil</code>.</p>
<h2 id="lexproto">lexProto</h2>
<p><code>lexProto</code> Is the initial state of our FSM. This is a <code>stateFn</code>. This means that it interacts with <code>Impl</code> and returns another <code>stateFn</code>.</p>
<p>For now, we can make this function really simple. It is a function that checks the next character and checking if this character is a symbol. If it is, we return a <code>Token</code> with the relevant <code>TokenType</code>, otherwise we return an Illegal <code>Token</code>.</p>
<ul class="code-tab-container d094a939-0d14-4f35-ae42-2b5f492f23a2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd094a939-0d14-4f35-ae42-2b5f492f23a2', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher d094a939-0d14-4f35-ae42-2b5f492f23a2"><li class="code_switcher_container_parent active-tab code_switcher_go 532afe63-28e0-4e18-9b23-1d395aad21a4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'_'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenUnderscore</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'='</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenEqual</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">','</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenColon</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">';'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenSemicolon</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'{'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftBrace</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'}'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightBrace</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftSquare</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightSquare</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftParen</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightParen</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'&lt;'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftAngle</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightAngle</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenIllegal</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="next">next()</h2>
<p><code>next</code> Is also pretty simple. It basically checks if the position is valid. If it isn't it returns <code>EOF</code>, otherwise it takes the next rune (utf8 character), updates the <code>pos</code>, updates the <code>line</code> if needed, and return the rune read.</p>
<ul class="code-tab-container 843d061d-a0a2-41a2-bc3b-19c273c17c08"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '843d061d-a0a2-41a2-bc3b-19c273c17c08', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 843d061d-a0a2-41a2-bc3b-19c273c17c08"><li class="code_switcher_container_parent active-tab code_switcher_go a5e18ee9-3763-4b99-b1d4-ddb2cdf47288"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">next</span><span class="p">()</span> <span class="kt">rune</span> <span class="p">{</span>
  <span class="k">if</span> <span class="kt">int</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">atEOF</span> <span class="o">=</span> <span class="no">true</span>
    <span class="k">return</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">r</span><span class="p">,</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="o">:</span><span class="p">])</span>
  <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">w</span>

  <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">line</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">r</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="emittokentype">emit(TokenType)</h2>
<p><code>emit</code> Is a function that checks our current location in the input text, creates a token, and return nil to stop the loop in <code>NextToken</code>.</p>
<ul class="code-tab-container f067f5aa-d9c0-4b44-bcb3-79084e71aa71"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f067f5aa-d9c0-4b44-bcb3-79084e71aa71', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f067f5aa-d9c0-4b44-bcb3-79084e71aa71"><li class="code_switcher_container_parent active-tab code_switcher_go 5f810406-0ba1-4714-ba31-3232439c1307"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">t</span> <span class="o">:=</span> <span class="n">Token</span><span class="p">{</span>
    <span class="n">Type</span><span class="o">:</span>    <span class="n">tt</span><span class="p">,</span>
    <span class="n">Literal</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="o">:</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">],</span>
    <span class="n">Position</span><span class="o">:</span> <span class="n">Position</span><span class="p">{</span>
      <span class="n">Offset</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="p">,</span>
      <span class="n">Line</span><span class="o">:</span>   <span class="n">l</span><span class="o">.</span><span class="n">startLine</span><span class="p">,</span>
      <span class="n">Column</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span><span class="p">,</span>
    <span class="p">}}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">pos</span>
  <span class="n">l</span><span class="o">.</span><span class="n">startLine</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">line</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">t</span>
  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<blockquote>
<p>Note: this is a lot of small operations. Take the time to go through the comments written in the <code>Impl</code> struct. This is not that hard.</p>
</blockquote>
<h2 id="handling-eof">Handling EOF</h2>
<p>If we run our test now, we will get the following:</p>
<div class="code_switcher_container_parent 668ed346-929a-4497-b33e-746ed9f11a2b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:20: tests[13] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"EOF"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>This is basically saying: &quot;we received an Illegal Token but we expected EOF&quot;.</p>
<p>This is pretty trivial to solve. Remember the <code>atEOF</code> property in the <code>Impl</code>? Well, we just add that in our switch statement.</p>
<ul class="code-tab-container 19ddf854-fc34-4f81-a01f-aefb26b7f843"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '19ddf854-fc34-4f81-a01f-aefb26b7f843', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 19ddf854-fc34-4f81-a01f-aefb26b7f843"><li class="code_switcher_container_parent active-tab code_switcher_go 69407d24-50a8-4337-82f2-e14ef350ae0d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">l</span><span class="o">.</span><span class="n">atEOF</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="c">//...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and now:</p>
<div class="code_switcher_container_parent c725a99f-c9e4-4521-ac7a-23498c4080da"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...

ok      test.com/lexer  0.809s
</code></pre></div></div>
</div>
<p>Boom !</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have a Lexer that is able to go through a text and identify the symbols that we defined as TokenType. Admittedly, this is not exceptional but we are now ready for the next part where we are going to skip whitespaces and comments, and lex Identifiers, Numbers (Int and Float), and Strings.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[As promised in a LinkedIn Poll, we are going to develop Parser for proto files which will create an AST that is serializable in Protobuf itself. Obviously, this is going to be a series of articles because we need to write quite a lot of parsing code. However, I believe that this is worth doing since we are going to see another use of Protobuf outside of gRPC.]]></summary></entry><entry><title type="html">Writing Protoc Plugins</title><link href="https://clement-jean.github.io/writing_protoc_plugins/" rel="alternate" type="text/html" title="Writing Protoc Plugins" /><published>2023-02-10T00:00:00+08:00</published><updated>2023-02-10T00:00:00+08:00</updated><id>https://clement-jean.github.io/writing_protoc_plugins</id><content type="html" xml:base="https://clement-jean.github.io/writing_protoc_plugins/"><![CDATA[<p>Recently, I answered a <a href="https://stackoverflow.com/questions/75343655/modeling-schema-metadata-without-serializing-into-the-protobuf-message/75362085#75362085">StackOverflow question</a> related to writing protoc plugins and Protobuf custom options. I thought this would be interesting to share how to write one because I believe this is quite an involved process and it fits the context of an article.</p>
<h2 id="c-or-go">C++ or Go</h2>
<p>When checking the protobuf documentation, I could only find a plugin API for C++ and Go. Furthermore, Go seems to be the only language where people have written blog posts about how to write such a custom plugin. In this article, I'm trying to cover as many languages as possible so for now I'll write in both languages and if you find that another language support writing custom plugin, leave a comment and I'll be happy to update.</p>
<h2 id="bazel">Bazel</h2>
<p>In order to build a multi-language project, I'm going to use Bazel. This might be frightening for some people but I'll try to explain as much as I can. Furthermore, if you are interested in learning Bazel, you can let me know in the comments.</p>
<h2 id="the-context">The Context</h2>
<p>While the StackOverflow states the problem, I want to explain it again so that I have control of whether the content exists. Here is a copy of the question:</p>
<blockquote>
<p>Does protobuf support embedding non functional metadata into the protobuf schema without affecting the message serialization/de-serialization? I am attempting to embed business information (ownership, contact info) into a large shared protobuf schema but do NOT want to impact functionality at all.</p>
<p>A structured comment or custom_option that does not get serialized would work. I would also like to parse the information from the .proto file for auditing purposes.</p>
<p>TIA</p>
<div class="code_switcher_container_parent 4f62ffb2-eacf-41b1-8d9a-664728e20a1f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
 <span class="k">optional</span> <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[(</span><span class="n">silent_options</span><span class="p">)</span><span class="o">.</span><span class="na">owner</span> <span class="o">=</span> <span class="s">"team1"</span><span class="p">,</span> <span class="p">(</span><span class="n">silent_options</span><span class="p">)</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="s">"team1@company.com"</span><span class="p">];</span>
 <span class="k">optional</span> <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div></blockquote>
<p>In other words, we want to create a custom FieldOption which lets us assign an owner and an email to a field. On top of that, we want that to be analyzed for auditing purpose. This basically means that we can do that at &quot;compile&quot; time. So we are going to build a custom plugin which will let us write something like:</p>
<div class="code_switcher_container_parent 431f41e4-bfee-4e82-82b4-ee668f80853d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--audit_out</span><span class="o">=</span><span class="nb">.</span> test.proto
</code></pre></div></div>
</div>
<p>Now, in this article, to keep everything simple, we are not going to generate any code or report stored in a file. We are going to print info on the terminal. However, generating files is pretty trivial to add in general. We simply write the information that we print in the terminal to a file (protoc library has some sort of printer to write to files).</p>
<h3 id="workspace--build-root">WORKSPACE + BUILD (root)</h3>
<p>Let us first create our Bazel Workspace for our project. We do that by creating a WORKSPACE.bazel file at the root and inside we are going to add the dependencies needed to build our project.</p>
<ul class="code-tab-container 61f33ab3-2831-40e4-9ee3-2e2318412ca3"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '61f33ab3-2831-40e4-9ee3-2e2318412ca3', 0)">WORKSPACE.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '61f33ab3-2831-40e4-9ee3-2e2318412ca3', 1)">WORKSPACE.bazel (C++)</a></li></ul><ul class="code-tab-switcher 61f33ab3-2831-40e4-9ee3-2e2318412ca3"><li class="code_switcher_container_parent active-tab code_switcher_python f1f3af53-49b9-44ed-86a0-259fb3295ced"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('f1f3af53-49b9-44ed-86a0-259fb3295ced')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="p">,</span> <span class="s">"http_archive"</span><span class="p">)</span>

<span class="n">RULES_GO_VERSION</span> <span class="o">=</span> <span class="s">"0.37.0"</span>
<span class="n">GO_VERSION</span> <span class="o">=</span> <span class="s">"1.19.5"</span>
<span class="n">GAZELLE_VERSION</span> <span class="o">=</span> <span class="s">"0.29.0"</span>
<span class="n">PROTOBUF_VERSION</span> <span class="o">=</span> <span class="s">"3.21.12"</span>

<span class="c1"># To create go libraries and binaries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"io_bazel_rules_go"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"56d8c5a5c91e1af73eca71a6fab2ced959b67c86d12ba37feedb0a2dfea441a6"</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v%s/rules_go-v%s.zip"</span> <span class="o">%</span> <span class="p">(</span><span class="n">RULES_GO_VERSION</span><span class="p">,</span> <span class="n">RULES_GO_VERSION</span><span class="p">),</span>
    <span class="s">"https://github.com/bazelbuild/rules_go/releases/download/v%s/rules_go-v%s.zip"</span> <span class="o">%</span> <span class="p">(</span><span class="n">RULES_GO_VERSION</span><span class="p">,</span> <span class="n">RULES_GO_VERSION</span><span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="c1"># To generate BUILD.bazel files and lists of dependencies (more on that later)
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"bazel_gazelle"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"ecba0f04f96b4960a5b250c8e8eeec42281035970aa8852dda73098274d14a1d"</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v%s/bazel-gazelle-v%s.tar.gz"</span> <span class="o">%</span> <span class="p">(</span><span class="n">GAZELLE_VERSION</span><span class="p">,</span> <span class="n">GAZELLE_VERSION</span><span class="p">),</span>
    <span class="s">"https://github.com/bazelbuild/bazel-gazelle/releases/download/v%s/bazel-gazelle-v%s.tar.gz"</span> <span class="o">%</span> <span class="p">(</span><span class="n">GAZELLE_VERSION</span><span class="p">,</span> <span class="n">GAZELLE_VERSION</span><span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="c1"># To get protobuf and protoc libraries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"com_google_protobuf"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"930c2c3b5ecc6c9c12615cf5ad93f1cd6e12d0aba862b572e076259970ac3a53"</span><span class="p">,</span>
  <span class="n">strip_prefix</span> <span class="o">=</span> <span class="s">"protobuf-%s"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
    <span class="s">"https://github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:deps.bzl"</span><span class="p">,</span> <span class="s">"go_register_toolchains"</span><span class="p">,</span> <span class="s">"go_rules_dependencies"</span><span class="p">)</span>

<span class="n">go_rules_dependencies</span><span class="p">()</span>

<span class="n">go_register_toolchains</span><span class="p">(</span><span class="n">version</span> <span class="o">=</span> <span class="n">GO_VERSION</span><span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@bazel_gazelle//:deps.bzl"</span><span class="p">,</span> <span class="s">"gazelle_dependencies"</span><span class="p">)</span>

<span class="n">gazelle_dependencies</span><span class="p">(</span><span class="n">go_repository_default_config</span> <span class="o">=</span> <span class="s">"//:WORKSPACE.bazel"</span><span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@com_google_protobuf//:protobuf_deps.bzl"</span><span class="p">,</span> <span class="s">"protobuf_deps"</span><span class="p">)</span>

<span class="n">protobuf_deps</span><span class="p">()</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python d919d0ca-7e41-4bd7-9ae3-cc773b8462f9"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d919d0ca-7e41-4bd7-9ae3-cc773b8462f9')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="p">,</span> <span class="s">"http_archive"</span><span class="p">)</span>

<span class="n">PROTOBUF_VERSION</span> <span class="o">=</span> <span class="s">"3.21.12"</span>

<span class="c1"># To get protobuf and protoc libraries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"com_google_protobuf"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"930c2c3b5ecc6c9c12615cf5ad93f1cd6e12d0aba862b572e076259970ac3a53"</span><span class="p">,</span>
  <span class="n">strip_prefix</span> <span class="o">=</span> <span class="s">"protobuf-%s"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
    <span class="s">"https://github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@com_google_protobuf//:protobuf_deps.bzl"</span><span class="p">,</span> <span class="s">"protobuf_deps"</span><span class="p">)</span>

<span class="n">protobuf_deps</span><span class="p">()</span>
</code></pre></div></div>
</li></ul>
<p>This gets all the dependencies needed to work with protobuf. Mainly we are going to use protobuf library which contains some generated code to deal with descriptors (a meta object that describe an object written in protobuf) and the protoc library which lets us define plugins.</p>
<h4 id="go">Go</h4>
<p>For go, we have some extra steps. The first thing we can do is creating our go module. To do that we can write the following command:</p>
<div class="code_switcher_container_parent 3f324865-773c-4a88-8117-c1ec8ad15e0e"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('3f324865-773c-4a88-8117-c1ec8ad15e0e')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go mod init test.com
</code></pre></div></div>
</div>
<p>Where you can replace <code>test.com</code> with the name of your module. <strong>If you changed the module name, be aware that you'll need to update all the following <code>test.com</code></strong>.</p>
<p>Now, because we also want our application to run with a simple <code>go run main.go</code> kind of command, we are going to add a dependency to the module, which is protobuf. To do that enter the following command:</p>
<div class="code_switcher_container_parent 666b7782-f93c-4b0a-8b27-0497e3d81274"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('666b7782-f93c-4b0a-8b27-0497e3d81274')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>Note that we added a protobuf dependency in the WORKSPACE.bazel and in our go.mod. These are not the same. One if for the building phase (linking with libraries) and the other is to be used in the Go program (as code).</p>
<p>Finally, we also need to set up Gazelle. We need to create a BUILD.bazel file at the root level.</p>
<ul class="code-tab-container 573ada41-cfa6-4e7a-aeb9-a589ad40b58e"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '573ada41-cfa6-4e7a-aeb9-a589ad40b58e', 0)">BUILD.bazel</a></li></ul><ul class="code-tab-switcher 573ada41-cfa6-4e7a-aeb9-a589ad40b58e"><li class="code_switcher_container_parent active-tab code_switcher_python 507468fa-ed95-4cac-b26c-383dc9c2488c"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('507468fa-ed95-4cac-b26c-383dc9c2488c')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_gazelle//:def.bzl"</span><span class="p">,</span> <span class="s">"gazelle"</span><span class="p">)</span>

<span class="c1"># gazelle:prefix test.com
</span><span class="n">gazelle</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"gazelle"</span><span class="p">)</span>

<span class="n">gazelle</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"gazelle-update-repos"</span><span class="p">,</span>
  <span class="n">args</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"-from_file=go.mod"</span><span class="p">,</span>
    <span class="s">"-to_macro=deps.bzl%go_dependencies"</span><span class="p">,</span>
    <span class="s">"-prune"</span><span class="p">,</span>
  <span class="p">],</span>
  <span class="n">command</span> <span class="o">=</span> <span class="s">"update-repos"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>This creates two commands (<code>gazelle</code> and <code>gazelle-update-repos</code>) that we can run to generate our BUILD.bazel and other dependency files automatically.</p>
<p>We can now run <code>bazel run //:gazelle-update-repos</code> in the terminal and we will see that it creates a file called <code>deps.bzl</code> and that the WORKSPACE.bazel was modified with these lines:</p>
<ul class="code-tab-container 5c8cb835-2424-4012-be17-639746232f03"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '5c8cb835-2424-4012-be17-639746232f03', 0)">WORKSPACE.bazel</a></li></ul><ul class="code-tab-switcher 5c8cb835-2424-4012-be17-639746232f03"><li class="code_switcher_container_parent active-tab code_switcher_python 5d232aa1-a73e-4fc0-8b9f-1f3963ee4971"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"//:deps.bzl"</span><span class="p">,</span> <span class="s">"go_dependencies"</span><span class="p">)</span>

<span class="c1"># gazelle:repository_macro deps.bzl%go_dependencies
</span><span class="n">go_dependencies</span><span class="p">()</span>
</code></pre></div></div>
</li></ul>
<p>If you open the <code>deps.bzl</code>, you will see a list of all the dependencies fetched to be able to build your go application.</p>
<h3 id="protobuf">Protobuf</h3>
<p>We are now at the stage where we can define our custom option. It is worth noting that in our case we need an option on fields but we can create options for a lot of different context. We could for example create an option at the top-level context (<code>go_package</code>, <code>optimize_for</code>, ...), at a message level, etc. You can find all the options in the file called descriptor.proto in the GitHub repo under <code>src/google/protobuf</code>.</p>
<p>To create a custom option, we need to extend the relevant message. In our case we need to extend <code>google.protobuf.FieldOptions</code>. To do that we can simply use the <code>extend</code> concept, which lets us define more fields inside an already existing message.</p>
<ul class="code-tab-container 9a4598cd-b55f-4f90-a515-95a5b658901e"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '9a4598cd-b55f-4f90-a515-95a5b658901e', 0)">proto/silent_option.proto (Go)</a></li><li class=" code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '9a4598cd-b55f-4f90-a515-95a5b658901e', 1)">proto/silent_option.proto (C++)</a></li></ul><ul class="code-tab-switcher 9a4598cd-b55f-4f90-a515-95a5b658901e"><li class="code_switcher_container_parent active-tab code_switcher_proto f60ffa15-d4a7-4cb2-9beb-7eec8111fd13"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('f60ffa15-d4a7-4cb2-9beb-7eec8111fd13')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">SilentOption</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">owner</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.FieldOptions</span> <span class="p">{</span>
  <span class="n">SilentOption</span> <span class="na">silent_option</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// see note below for why 1000</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_proto bc619abe-4228-4316-b1b9-7685d51b2995"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('bc619abe-4228-4316-b1b9-7685d51b2995')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">SilentOption</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">owner</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.FieldOptions</span> <span class="p">{</span>
  <span class="n">SilentOption</span> <span class="na">silent_option</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// see note below for why 1000</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<blockquote>
<p>NOTE: if you check the FieldOptions message in the descriptor.proto file, you will see the following line: <code>extensions 1000 to max;</code>. This means that when we are extending this message, our fields will need to contain tags that are between 1000 and max (maximum tag). Furthermore, some of the option tags are &quot;already taken&quot;. This means that other custom options are using them and if you were to use your option with another one having the same tag, you would have a conflict. Check the list of the <a href="https://github.com/protocolbuffers/protobuf/blob/main/docs/options.md">Protobuf Global Extension Registry</a> before selecting the tag for your custom option and maybe register it.</p>
</blockquote>
<p>Now that we have our proto file, we can think about compiling it. To do that we are going to create a BUILD.bazel file in the proto directory. This will define a library for our proto file and another for the related programming language.</p>
<ul class="code-tab-container dcb02d51-66d0-4bf5-a7f2-91ba07c04bda"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'dcb02d51-66d0-4bf5-a7f2-91ba07c04bda', 0)">BUILD.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'dcb02d51-66d0-4bf5-a7f2-91ba07c04bda', 1)">BUILD.bazel (C++)</a></li></ul><ul class="code-tab-switcher dcb02d51-66d0-4bf5-a7f2-91ba07c04bda"><li class="code_switcher_container_parent active-tab code_switcher_shell 20e81e38-e62e-4e82-9619-bf1fbff823a2"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('20e81e38-e62e-4e82-9619-bf1fbff823a2')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //:gazelle
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 99c20a85-782d-4094-b532-409ccb38065d"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('99c20a85-782d-4094-b532-409ccb38065d')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@rules_cc//cc:defs.bzl"</span><span class="p">,</span> <span class="s">"cc_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_proto"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"silent_option.proto"</span><span class="p">],</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">"@com_google_protobuf//:descriptor_proto"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">cc_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_cc_proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">":silent_option_proto"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h4 id="go-1">Go</h4>
<p>You might have noticed that we simply ran a command to generate our BUILD.bazel in the proto directory. This is what gazelle is doing. It checks your file and determine how to create BUILD files. However, I think there are problems with this solution. The main one is the naming of our libraries. By now, you should have something like this:</p>
<ul class="code-tab-container f29084af-a2eb-4ade-814b-41cdd46a3c99"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'f29084af-a2eb-4ade-814b-41cdd46a3c99', 0)">proto/BUILD.bazel</a></li></ul><ul class="code-tab-switcher f29084af-a2eb-4ade-814b-41cdd46a3c99"><li class="code_switcher_container_parent active-tab code_switcher_python fd9e63c9-e049-4544-8f30-4cd17868eb06"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:def.bzl"</span><span class="p">,</span> <span class="s">"go_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//proto:def.bzl"</span><span class="p">,</span> <span class="s">"go_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto_proto"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"silent_option.proto"</span><span class="p">],</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">"@com_google_protobuf//:descriptor_proto"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">go_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto_go_proto"</span><span class="p">,</span>
  <span class="n">importpath</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">,</span>
  <span class="n">proto</span> <span class="o">=</span> <span class="s">":proto_proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">go_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto"</span><span class="p">,</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":proto_go_proto"</span><span class="p">],</span>
  <span class="n">importpath</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>and these are using generic names based on the folder there are stored in (proto). Let's rename all that.</p>
<ul class="code-tab-container e1bbdd17-e3db-45f4-a373-b689a2f8cec0"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'e1bbdd17-e3db-45f4-a373-b689a2f8cec0', 0)">proto/BUILD.bazel</a></li></ul><ul class="code-tab-switcher e1bbdd17-e3db-45f4-a373-b689a2f8cec0"><li class="code_switcher_container_parent active-tab code_switcher_python c568b9e1-5e62-4197-b60b-0a873b7db5bf"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('c568b9e1-5e62-4197-b60b-0a873b7db5bf')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:def.bzl"</span><span class="p">,</span> <span class="s">"go_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//proto:def.bzl"</span><span class="p">,</span> <span class="s">"go_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_proto"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_go_proto"</span><span class="p">,</span>
  <span class="n">proto</span> <span class="o">=</span> <span class="s">":silent_option_proto"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_library</span><span class="p">(</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":silent_option_go_proto"</span><span class="p">],</span>
  <span class="c1">#...
</span><span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h3 id="plugin">Plugin</h3>
<p>Finally, we arrive at the moment where we need to write the plugin. The goal of this plugin is reading a protobuf file and if it sees a field with silent_option, it will print the file name, the field and its related info, and the option content.</p>
<blockquote>
<p>Note: Since this is a very different process for different implementations of Protobuf, I will rely on code comment to explain what the code is doing.</p>
</blockquote>
<ul class="code-tab-container 8160f05c-a96c-45c2-a750-9c716457d3eb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8160f05c-a96c-45c2-a750-9c716457d3eb', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '8160f05c-a96c-45c2-a750-9c716457d3eb', 1)">main.cc</a></li></ul><ul class="code-tab-switcher 8160f05c-a96c-45c2-a750-9c716457d3eb"><li class="code_switcher_container_parent active-tab code_switcher_go 34bd7fbc-5046-4b71-98b6-5b7c774675eb"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('34bd7fbc-5046-4b71-98b6-5b7c774675eb')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"flag"</span>
  <span class="s">"log"</span>

  <span class="s">"google.golang.org/protobuf/compiler/protogen"</span>
  <span class="s">"google.golang.org/protobuf/proto"</span>
  <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

  <span class="n">pb</span> <span class="s">"test.com/proto"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">flags</span> <span class="n">flag</span><span class="o">.</span><span class="n">FlagSet</span>
  <span class="c">// defines the options that we can pass to our plugin</span>
  <span class="n">team</span> <span class="o">:=</span> <span class="n">flags</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"team"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"Filtering team"</span><span class="p">)</span>

  <span class="n">protogen</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
    <span class="n">ParamFunc</span><span class="o">:</span> <span class="n">flags</span><span class="o">.</span><span class="n">Set</span><span class="p">,</span> <span class="c">// the protobuf library will set the option into the flags variable</span>
  <span class="p">}</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">gen</span> <span class="o">*</span><span class="n">protogen</span><span class="o">.</span><span class="n">Plugin</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">gen</span><span class="o">.</span><span class="n">Files</span> <span class="p">{</span> <span class="c">// iterates over all the proto files given as source</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">file</span><span class="o">.</span><span class="n">Generate</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>

      <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">file</span><span class="o">.</span><span class="n">Messages</span> <span class="p">{</span> <span class="c">// iterates over the messages in the current file</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">field</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">message</span><span class="o">.</span><span class="n">Fields</span> <span class="p">{</span> <span class="c">// iterates over the fields in the current message</span>
          <span class="n">option</span> <span class="o">:=</span> <span class="n">field</span><span class="o">.</span><span class="n">Desc</span><span class="o">.</span><span class="n">Options</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">FieldOptions</span><span class="p">)</span> <span class="c">// try to get an option</span>

          <span class="k">if</span> <span class="n">option</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span> <span class="c">// if no option we skip</span>
            <span class="k">continue</span>
          <span class="p">}</span>

          <span class="n">extension</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">option</span><span class="p">,</span> <span class="n">pb</span><span class="o">.</span><span class="n">E_SilentOption</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">SilentOption</span><span class="p">)</span> <span class="c">// try to cast this option in SilentOption</span>

          <span class="k">if</span> <span class="n">extension</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="n">extension</span><span class="o">.</span><span class="n">Owner</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">team</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">extension</span><span class="o">.</span><span class="n">Owner</span> <span class="o">==</span> <span class="o">*</span><span class="n">team</span> <span class="p">{</span>
            <span class="c">// in here we have a SilentOption which as the owner equal to the team option pass in command line.</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">Desc</span><span class="o">.</span><span class="n">Name</span><span class="p">(),</span> <span class="n">field</span><span class="p">,</span> <span class="n">extension</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp c97a3caf-eb94-4ed8-a972-ec7018a775c1"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('c97a3caf-eb94-4ed8-a972-ec7018a775c1')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/plugin.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/code_generator.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/descriptor.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/io/printer.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/command_line_interface.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"proto/silent_option.pb.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">compiler</span><span class="p">;</span>

<span class="c1">// implementation of Generator interface</span>
<span class="k">class</span> <span class="nc">AuditGenerator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CodeGenerator</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="c1">// iterates over the files and call the Generate function</span>
  <span class="c1">// we are skipping error handling</span>
  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">GenerateAll</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">FileDescriptor</span><span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">files</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">parameter</span><span class="p">,</span>
    <span class="n">GeneratorContext</span> <span class="o">*</span><span class="n">generator_context</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">error</span>
  <span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">file</span> <span class="o">:</span> <span class="n">files</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Generate</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">generator_context</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// analyzes a file</span>
  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">Generate</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">FileDescriptor</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">parameter</span><span class="p">,</span>
    <span class="n">GeneratorContext</span> <span class="o">*</span><span class="n">generator_context</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">error</span>
  <span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="c1">// iterates over the messages in the current file</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">message_type_count</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">message</span> <span class="o">=</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">message_type</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

      <span class="c1">// iterates over the fields in the current message</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">field_count</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">field</span> <span class="o">=</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">field</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">options</span> <span class="o">=</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">options</span><span class="p">.</span><span class="n">HasExtension</span><span class="p">(</span><span class="n">silent_option</span><span class="p">))</span> <span class="p">{</span><span class="k">continue</span><span class="p">;}</span> <span class="c1">// if no SilentOption we skip</span>

        <span class="k">auto</span> <span class="n">extension</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">silent_option</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">extension</span><span class="p">.</span><span class="n">IsInitialized</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">parameter</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">extension</span><span class="p">.</span><span class="n">owner</span><span class="p">()</span> <span class="o">==</span> <span class="n">parameter</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// in here we have a SilentOption which as the owner equal to the team option pass in command line.</span>
          <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">": "</span> <span class="o">&lt;&lt;</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">DebugString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="n">AuditGenerator</span> <span class="n">generator</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">PluginMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">generator</span><span class="p">);</span> <span class="c1">// registers the generator</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>To compile this code, we need to create a BUILD.bazel file which will generate a binary for our application.</p>
<ul class="code-tab-container 18c9336c-f7bc-4936-900c-f356393a7b20"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '18c9336c-f7bc-4936-900c-f356393a7b20', 0)">BUILD.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '18c9336c-f7bc-4936-900c-f356393a7b20', 1)">BUILD.bazel (C++)</a></li></ul><ul class="code-tab-switcher 18c9336c-f7bc-4936-900c-f356393a7b20"><li class="code_switcher_container_parent active-tab code_switcher_shell 82bc7177-79ac-4b3c-8cc4-53af87cc1aaa"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('82bc7177-79ac-4b3c-8cc4-53af87cc1aaa')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //:gazelle
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 61daccea-6ef7-4b6c-9327-5bd64113d181"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('61daccea-6ef7-4b6c-9327-5bd64113d181')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_cc//cc:defs.bzl"</span><span class="p">,</span> <span class="s">"cc_binary"</span><span class="p">)</span>

<span class="n">cc_binary</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"main.cc"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"//proto:silent_option_cc_proto"</span><span class="p">,</span>
    <span class="s">"@com_google_protobuf//:protobuf"</span><span class="p">,</span>
    <span class="s">"@com_google_protobuf//:protoc_lib"</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h4 id="go-2">Go</h4>
<p>Same naming problem as the Protobuf section. Let us rename that.</p>
<ul class="code-tab-container 15a54a29-b0cf-49cf-959b-6de789881f01"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '15a54a29-b0cf-49cf-959b-6de789881f01', 0)">BUILD.bazel</a></li></ul><ul class="code-tab-switcher 15a54a29-b0cf-49cf-959b-6de789881f01"><li class="code_switcher_container_parent active-tab code_switcher_python feac6753-5699-4d77-aef1-85ec2d0ae230"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># gazelle related code ...
</span>
<span class="n">go_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit_lib"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_binary</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit"</span><span class="p">,</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":protoc-gen-audit_lib"</span><span class="p">],</span>
  <span class="c1">#...
</span><span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h3 id="running">Running</h3>
<p>We can now build our binaries by running:</p>
<div class="code_switcher_container_parent 2fca01c5-b853-409a-b259-8ef5b7e81be0"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2fca01c5-b853-409a-b259-8ef5b7e81be0')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel build //:protoc-gen-audit
</code></pre></div></div>
</div>
<p>We also need to have a proto file to test our plugin.</p>
<ul class="code-tab-container 41055c3d-a445-45c5-95eb-87f821f12964"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '41055c3d-a445-45c5-95eb-87f821f12964', 0)">test.proto (Go)</a></li><li class=" code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '41055c3d-a445-45c5-95eb-87f821f12964', 1)">test.proto (C++)</a></li></ul><ul class="code-tab-switcher 41055c3d-a445-45c5-95eb-87f821f12964"><li class="code_switcher_container_parent active-tab code_switcher_proto 9cdc59b1-4c4a-4451-9353-5ea44031afc7"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('9cdc59b1-4c4a-4451-9353-5ea44031afc7')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"proto/silent_option.proto"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"another_test.com"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team1"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team1@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
  <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team2"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team2@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_proto fb191db5-6c0c-4d25-897e-82573cf660a9"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('fb191db5-6c0c-4d25-897e-82573cf660a9')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"proto/silent_option.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team1"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team1@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
  <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team2"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team2@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now that we have our binaries in the <code>bazel-bin</code> directory, we can use them with protoc as plugins. To do so we use the <code>--plugin</code> option which takes the path of our binary and the option related to our plugin. For example, our plugin is called <code>protoc-gen-audit</code>, so now we can use the <code>--audit_out</code> option.</p>
<blockquote>
<p>Note: we also added a team flag in Go. This lets us use <code>--audit_opt=team=THE_TEAM_NAME</code>.</p>
</blockquote>
<ul class="code-tab-container c877dd81-f78b-451a-a321-c5bb2a0e11a8"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'c877dd81-f78b-451a-a321-c5bb2a0e11a8', 0)">Go</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'c877dd81-f78b-451a-a321-c5bb2a0e11a8', 1)">C++</a></li></ul><ul class="code-tab-switcher c877dd81-f78b-451a-a321-c5bb2a0e11a8"><li class="code_switcher_container_parent active-tab code_switcher_shell 84fb35ff-f538-414b-be15-e4516ce6c821"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('84fb35ff-f538-414b-be15-e4516ce6c821')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--plugin</span><span class="o">=</span>protoc-gen-audit<span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span>/bazel-bin/protoc-gen-audit_/protoc-gen-audit <span class="nt">--audit_out</span><span class="o">=</span><span class="nb">.</span> <span class="nt">--audit_opt</span><span class="o">=</span><span class="nv">team</span><span class="o">=</span>team1 test.proto
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 4b225805-639d-417a-b340-171bf110e6dd"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('4b225805-639d-417a-b340-171bf110e6dd')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--plugin</span><span class="o">=</span>protoc-gen-audit<span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span>/bazel-bin/protoc-gen-audit <span class="nt">--audit_out</span><span class="o">=</span>team1:. test.proto
</code></pre></div></div>
</li></ul>
<p>You can now play with your plugin and test with other team names.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Obviously, we can improve the solution in this post but the most important is that we saw that we can create custom options and protoc plugins. This can be interesting for compile time analysis or generating code. Finally, we saw that in this auditing use case, but we could use this in more advanced use cases (e.g.: <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a>).</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="C++" /><category term="Go" /><summary type="html"><![CDATA[Recently, I answered a StackOverflow question related to writing protoc plugins and Protobuf custom options. I thought this would be interesting to share how to write one because I believe this is quite an involved process and it fits the context of an article.]]></summary></entry><entry><title type="html">One Character to Save 200 Bytes</title><link href="https://clement-jean.github.io/one_character_to_save_200_bytes/" rel="alternate" type="text/html" title="One Character to Save 200 Bytes" /><published>2023-01-14T00:00:00+08:00</published><updated>2023-01-14T00:00:00+08:00</updated><id>https://clement-jean.github.io/one_character_to_save_200_bytes</id><content type="html" xml:base="https://clement-jean.github.io/one_character_to_save_200_bytes/"><![CDATA[<p>Recently, I've been working with <a href="https://techhub.social/@coderbyheart@chaos.social">Markus Tacker</a> on improving his <a href="https://github.com/coderbyheart/json-protobuf-comparison-wifi-site-survey">comparison of JSON vs. Protobuf for a Wifi Site Survey</a>. This has been a lot of fun and I thought I could do a simple post about what went well and what my mistakes were.</p>
<h2 id="looking-at-the-proto-file">Looking at the proto file</h2>
<p>Here is the proto file at the moment I was looking at it:</p>
<div class="code_switcher_container_parent f69a3c97-e921-434a-8624-8ff3b612b5c7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">WiFiSiteSurvey</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="n">AP</span> <span class="na">accesspoints</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">AP</span> <span class="p">{</span>
  <span class="kt">int64</span> <span class="na">mac</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">ssid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">rssi</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">channel</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The first thing that made me think about improving this schema is the use of repeated on a complex object. If you don't know why, I go into more details about why it is less efficient to use complex objects in a repeated field, in the article called <a href="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/">Packed vs. Unpacked Repeated Fields</a>.</p>
<p>Other than that, I didn't have any other idea at that point. I needed to analyze the data.</p>
<h2 id="analyzing-the-data">Analyzing the Data</h2>
<p>The first thing to do when you are dealing with data is to understand it and get a sense of the possible values you can have. One thing that came out directly after running the comparison script and analyzing the <a href="https://github.com/coderbyheart/json-protobuf-comparison-wifi-site-survey/blob/saga/sitesurvey.json">sitesurvey.json</a> is that all <code>rssi</code> properties are negative.</p>
<p>Now, I'm not an expert in wifi protocol but after searching online what <code>rssi</code> meant, I found that it's an acronym for Received Signal Strength Indicator and that it will always be a negative value ranging from -30 to -90 (see <a href="https://corecabling.com/understanding-received-signal-strength-rssi-in-your-wifi-network/">here</a>).</p>
<p>This is interesting because by knowing this range we know that we are dealing with a range that fits in the 32 bytes integers and we know that the numbers are all negative so we will prefer to use a sint instead of an int (TODO: article about sint vs int). And, if you look at the proto file shown above the <code>rssi</code> field has the type <code>int32</code>, which means that we are encoding all the values into 10 bytes (because negative values are encoded as big positive numbers).</p>
<p>OK, so, before applying the change, Markus got the following result:</p>
<div class="code_switcher_container_parent 941d6a58-579b-4244-9844-185aaa352362"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 30
JSON payload length: 1949 bytes
Protobuf payload length: 966 bytes
</code></pre></div></div>
</div>
<p>This is already very nice because we save 50% of bytes in our payload. But, after changing <code>int32 rssi = 3;</code> to <code>sint32 rssi = 3;</code>, we got the following result:</p>
<div class="code_switcher_container_parent c0dc51ba-35a6-4768-82f1-54e2f54e7338"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 30
JSON payload length: 1949 bytes
Protobuf payload length: 713 bytes
</code></pre></div></div>
</div>
<p>Two hundred+ bytes gone, with one character added. Pretty cool!</p>
<h2 id="back-to-the-original-idea">Back to the Original Idea</h2>
<p>Even though we saved 200 bytes, that wasn't my original idea on how to improve this proto file. As I mentioned I wanted to see if making the repeated field act on simple data could help.</p>
<p>Now, this is important to note that everything that comes after this wasn't added to the repository since we didn't entirely understand the requirements for the data. So I will show the assumption that we were making at that time and we will see how it was dismissed later. Here are the assumption:</p>
<ul>
<li>None of the fields are optional if an info is missing treat the data as erroneous.</li>
</ul>
<p>This is important because with that assumption we could make multiple repeated fields instead of having the <code>AP</code> message and we would save encoding a complex object. This would be lowering the payload size and then later on because all the lists have the same length we could do a zip between these lists to get the objects back (first object get first element of all the lists). So the proto file changed like so:</p>
<div class="code_switcher_container_parent 36da029f-0dff-4ef1-9363-f4eeeb78d46e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">WiFiSiteSurvey</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int64</span> <span class="na">macs</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">ssids</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">rssis</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">channels</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<blockquote>
<p>Note: <code>string</code> is a complex object so we are still using unpacked repeated field on <code>ssids</code>.</p>
</blockquote>
<p>We first filtered all the erroneous data in the dataset and rerun the comparison. Here is the result:</p>
<div class="code_switcher_container_parent ab9432ec-437f-4832-ab8e-f01ad9194296"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 24
JSON payload length: 1949 bytes
Protobuf payload length: 510 bytes
</code></pre></div></div>
</div>
<p>Another 200 bytes gone.</p>
<h2 id="why-the-repeated-trick-didnt-work">Why the repeated 'trick' didn't work</h2>
<p>This mostly didn't work because some of the fields in <code>AP</code> are actually optional. This means that either we would have to add empty wrappers into the lists to get the lists have the same length (not worth, the payload size would be bigger than 713 bytes) or we go back to our <code>AP</code> message after the <code>sint32</code> improvement.</p>
<p>The second thing that is not making this approach work is that, if you noticed, we are lowering the payload but we are doing more computation in our code. We need to do a zip afterwards. This might be fine if this is internal to your company and well documented. However, if this is a client facing proto file, this might just make their life harder.</p>
<p><strong>Lesson: Know your data requirements!</strong></p>
<h2 id="other-improvements">Other Improvements</h2>
<p>Here is a list of further improvements, added or not yet added, that are not impacting payload size:</p>
<ul>
<li>Change <code>uint32 timestamp = 1;</code> to <code>uint64 timestamp = 1;</code> for accepting a bigger range of numbers.</li>
<li>Change <code>int32 channel = 4;</code> to <code>uint32 channel = 4;</code> for invalidating negative numbers on the client side.</li>
<li>Change <code>int64 mac = 1;</code> to <code>uint64 mac = 1;</code> for invalidating negative numbers on the client side (I'm not sure yet, but this seems possible).</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>We saw that by knowing your data and knowing the encoding algorithm behind Protobuf, we can get really big payload size improvements. However, we still need to care about the usage of our proto files and be more accurate on the different data requirements; otherwise we will implement obscure 'fixes' and in the end they will not be needed.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[Recently, I've been working with Markus Tacker on improving his comparison of JSON vs. Protobuf for a Wifi Site Survey. This has been a lot of fun and I thought I could do a simple post about what went well and what my mistakes were.]]></summary></entry><entry><title type="html">Packed vs Unpacked Repeated Fields</title><link href="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/" rel="alternate" type="text/html" title="Packed vs Unpacked Repeated Fields" /><published>2023-01-05T00:00:00+08:00</published><updated>2023-01-05T00:00:00+08:00</updated><id>https://clement-jean.github.io/packed_vs_unpacked_repeated_fields</id><content type="html" xml:base="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/"><![CDATA[<p>As this is a common and not well documented mistake that developers are doing, I decided to do a post explaining the problem that you might face when using repeated fields in your Protobuf messages.</p>
<p>Be sure to open any refresher section if you feel like you are not sure about a topic. We are going to use them during this post.</p>
<p>
<details><summary><b>Refresher #1: Repeated Fields</b></summary>
<p>A repeated field is a field that can contain 0 or more values. In other words, this is a list. We can create such a field by simply adding a `repeated` modifier in front of the field. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span></code></pre></figure>
</p>
</details>
</p>
<p>
<details><summary><b>Refresher #2: Field Options</b></summary>
<p>A field option is some additional information that will be affecting the compilation and thus the code generation. These options can be defined as key value pairs between square brackets between the field tag and the semicolon. In this post we are going to use the <code>packed</code> option, which takes a boolean as value and can only be used on repeated field. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">packed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span></code></pre></figure>
</p>
</details>
</p>
<p>
<details><summary><b>Refresher #3: Protobuf Text Format</b></summary>
<p>Protobuf does not exclusively encode to binary. It is possible to encode to JSON or to a format that is close to JSON. This text format is generally used for improving readability/writeability (nobody wants to read/write binary) and enhance your debugging or analysis of your messages. I will not go into too much detail about this here, but to write a repeated field, you can simply repeated the field name as many times as you want to add value to the field, followed by a colon and the value. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">ids</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s">3</span></code></pre></figure>
</p>
</details>
</p>
</p>
<h2 id="packed">Packed</h2>
<p>Let's start with packed repeated fields. In order to see how they are encoded we are going to use <code>protoc --encode</code> and pass it the content of some file defining the values in Protobuf Text Format. In this text file, let's define 3 values:</p>
<ul class="code-tab-container 48fef8cf-1a57-4a13-a3fc-787b1d18d04d"><li class="active-tab code_switcher_yaml"><a onclick="selectTab('code_switcher_yaml', '48fef8cf-1a57-4a13-a3fc-787b1d18d04d', 0)">repeated.txt</a></li></ul><ul class="code-tab-switcher 48fef8cf-1a57-4a13-a3fc-787b1d18d04d"><li class="code_switcher_container_parent active-tab code_switcher_yaml 02567ba7-187c-4868-bc53-3d0d3d884d5b"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('02567ba7-187c-4868-bc53-3d0d3d884d5b')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ids</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">3</span>
</code></pre></div></div>
</li></ul>
<p>Then, for our proto file, we are going to store these values in a message called <code>PackedRepeated</code> that has a field of type <code>repeated int32</code>.</p>
<ul class="code-tab-container f9c0fa18-37dc-4754-836a-14798f78652e"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'f9c0fa18-37dc-4754-836a-14798f78652e', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher f9c0fa18-37dc-4754-836a-14798f78652e"><li class="code_switcher_container_parent active-tab code_switcher_proto 7049bca9-8d03-41f5-bcca-cce4fad403da"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('7049bca9-8d03-41f5-bcca-cce4fad403da')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">PackedRepeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And finally, we need to use the <code>--encode</code> flag from protoc, which let us take some binary content on the standard input and write some protobuf encoded message on the standard output. To take advantage of this we are going to display the content of a file on the standard output, pipe that to the standard input of protoc and finally, pipe the standard output of protoc to a command that displays a hexadecimal dump.</p>
<ul class="code-tab-container a3d4513f-f9ae-452e-a905-c7e01bcac723"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'a3d4513f-f9ae-452e-a905-c7e01bcac723', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'a3d4513f-f9ae-452e-a905-c7e01bcac723', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher a3d4513f-f9ae-452e-a905-c7e01bcac723"><li class="code_switcher_container_parent active-tab code_switcher_shell 4f569c7b-051f-4b6e-8503-a1bf7017e007"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 03 01 02 03                                    |.....|
00000005
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell a26aaaae-cc3d-4822-af3b-40000cd448dd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: /Users/clement/Git/experiment/out.bin

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 03 01 02 03                                  �����
</span></code></pre></div></div>
</li></ul>
<p>So here we can see that the end result of encoding <code>repeated.txt</code> content as <code>PackedRepeated</code> is <code>0A 03 01 02 03</code>. What does that mean? Let's decrypt that.</p>
<p>To do that, we can simply take each hexadecimal number and transform it into binary. While this is pretty simple numbers, let's use the command line to make sure we don't slip up and have wrong binary.</p>
<ul class="code-tab-container 8ef0c75d-c9f0-4c4f-8ccf-d027ed3b836e"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '8ef0c75d-c9f0-4c4f-8ccf-d027ed3b836e', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '8ef0c75d-c9f0-4c4f-8ccf-d027ed3b836e', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 8ef0c75d-c9f0-4c4f-8ccf-d027ed3b836e"><li class="code_switcher_container_parent active-tab code_switcher_shell e3429ac1-ad01-402e-8ed9-c51d492d4094"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 0A"</span> | bc
1010

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 03"</span> | bc
11

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 01"</span> | bc
1

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 02"</span> | bc
10
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell d4f187a3-9fe7-4bc6-ae25-4c8985b9c51f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x0A, 2<span class="o">)</span>
1010

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x03, 2<span class="o">)</span>
11

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x01, 2<span class="o">)</span>
1

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x02, 2<span class="o">)</span>
10
</code></pre></div></div>
</li></ul>
<blockquote>
<p>Note: When you are using integers that are not fixed, you are dealing with varints. This means that the bigger the value, the bigger the number of bytes it will be encoded in. In our example, we purposely chose small numbers so that they are encoded into one byte. The following encoding explanation is not correct for all numbers you might use.</p>
</blockquote>
<ul>
<li><code>0A</code> gives us <code>1010</code>. This is a byte that represent both the wire type (type of value) and the field tag. To get the wire type, we simply take the first 3 bits starting from the right. In our case this is <code>010</code> or 2. if you check the <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure">Encoding</a> page of Protobuf Documentation, this means that we have a Length-Delimited type. In other words, we have some kind of data that has a dynamic size. This is exactly what we have, this is a list. Then, we are left with a tag equal to 1.</li>
<li><code>03</code> gives us <code>11</code>. This is the actual length of the list. Here we have 3 values.</li>
<li><code>01</code>, <code>02</code> and <code>03</code> (we omitted it, because we know the result), gives us respectively <code>1</code>, <code>10</code> and <code>11</code>. These are the actual values that we added into the list.</li>
</ul>
<p>In the end, we have 5 bytes, 1 byte for type + tag, 1 byte for the list length, and 3 bytes for the values. Pretty compact.</p>
<h2 id="unpacked">Unpacked</h2>
<p>Let's now see how the same values are encoded in an unpacked repeated field. To do that, we are going to use the <code>packed</code> field option. We are going to set that to false so that protoc skip the packing.</p>
<ul class="code-tab-container 1cf657b3-38d4-417d-9271-d1fce59ec414"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '1cf657b3-38d4-417d-9271-d1fce59ec414', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher 1cf657b3-38d4-417d-9271-d1fce59ec414"><li class="code_switcher_container_parent active-tab code_switcher_proto 0ba7ad70-78ae-420f-8861-88b0939c0206"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('0ba7ad70-78ae-420f-8861-88b0939c0206')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">UnpackedRepeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">packed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that done, we can now run similar commands as what we did in the <code>Packed</code> section. The only difference is that, now, we need to specify that we want to encode the data as <code>UnpackedRepeated</code>.</p>
<ul class="code-tab-container 6159c06c-4472-4c0b-abfd-e6e8e7270ce4"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '6159c06c-4472-4c0b-abfd-e6e8e7270ce4', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '6159c06c-4472-4c0b-abfd-e6e8e7270ce4', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 6159c06c-4472-4c0b-abfd-e6e8e7270ce4"><li class="code_switcher_container_parent active-tab code_switcher_shell b7ee0289-4962-4aea-864d-d8230e2d3fbd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  08 01 08 02 08 03                                 |......|
00000006
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 89dcc9bd-c6be-481f-a551-bab2432e6aac"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;01DCACCB&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 08 01 08 02 08 03                               ������
</span></code></pre></div></div>
</li></ul>
<p>And ... We have six bytes.</p>
<p>There are two things we can notice here. The first is that now we don't have any <code>0A</code> byte. And the second one is that we are interleaving <code>08</code> with our values. Let's find out how this was encoded.</p>
<p>As we already know the values for <code>01</code>, <code>02</code> and <code>03</code>, we can just convert <code>08</code>.</p>
<ul class="code-tab-container 25cfecfe-5074-4eeb-9b81-0d9c09391067"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '25cfecfe-5074-4eeb-9b81-0d9c09391067', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '25cfecfe-5074-4eeb-9b81-0d9c09391067', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 25cfecfe-5074-4eeb-9b81-0d9c09391067"><li class="code_switcher_container_parent active-tab code_switcher_shell 9099b9cd-3316-4bfb-af9a-bb17a84bc197"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 08"</span> | bc
1000
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 8254d744-837e-4666-b5eb-448c7407dcd3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x08, 2<span class="o">)</span>
1000
</code></pre></div></div>
</li></ul>
<ul>
<li><code>08</code> gives us <code>1000</code>. Once again this is the combination of wire type and field tag. So we have 0 for the wire type, which corresponds to varint. And then the field tag is 1.</li>
</ul>
<p>So in this case, we are basically encoding each value of the list as a separate field. Protobuf will then see that the <code>ids</code> field is repeated and that we are adding multiple values with the same field tag and it will just add these values to the list.</p>
<p>In the end, Protobuf is encoding <code>UnpackedRepeated</code> into six bytes instead of five. This sounds negligible here because we have a simple example but if you run the example on 100 ids:</p>
<blockquote>
<p>You can generate the repeated.txt by running this in your shell:</p>
<ul class="code-tab-container ae279883-80c9-4e2a-bea9-0e5b92743788"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'ae279883-80c9-4e2a-bea9-0e5b92743788', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'ae279883-80c9-4e2a-bea9-0e5b92743788', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher ae279883-80c9-4e2a-bea9-0e5b92743788"><li class="code_switcher_container_parent active-tab code_switcher_shell 7b67579d-ea67-49b0-80b3-09c7b3d0dbe5"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('7b67579d-ea67-49b0-80b3-09c7b3d0dbe5')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..100<span class="o">}</span>
<span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"ids: </span><span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> repeated.txt
<span class="k">done</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 69428286-3c5b-4f3d-ae06-1328e789a175"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('69428286-3c5b-4f3d-ae06-1328e789a175')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foreach <span class="o">(</span><span class="nv">$i</span> <span class="k">in </span>1..100<span class="o">)</span> <span class="o">{</span>
  Add-Content <span class="nt">-Path</span> <span class="s2">"repeated1.txt"</span> <span class="nt">-Value</span> <span class="s2">"ids: </span><span class="nv">$i</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div>
</li></ul></blockquote>
<ul class="code-tab-container 62d2e4a3-32d4-4e0f-92c7-183ec90e5e33"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '62d2e4a3-32d4-4e0f-92c7-183ec90e5e33', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '62d2e4a3-32d4-4e0f-92c7-183ec90e5e33', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 62d2e4a3-32d4-4e0f-92c7-183ec90e5e33"><li class="code_switcher_container_parent active-tab code_switcher_shell 7383c838-6330-4036-9245-dc79a033bad7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 64 01 02 03 04 05 06  07 08 09 0a 0b 0c 0d 0e  |.d..............|
00000010  0f 10 11 12 13 14 15 16  17 18 19 1a 1b 1c 1d 1e  |................|
00000020  1f 20 21 22 23 24 25 26  27 28 29 2a 2b 2c 2d 2e  |. <span class="o">!</span><span class="s2">"#</span><span class="nv">$%</span><span class="s2">&amp;'()*+,-.|
00000030  2f 30 31 32 33 34 35 36  37 38 39 3a 3b 3c 3d 3e  |/0123456789:;&lt;=&gt;|
00000040  3f 40 41 42 43 44 45 46  47 48 49 4a 4b 4c 4d 4e  |?@ABCDEFGHIJKLMN|
00000050  4f 50 51 52 53 54 55 56  57 58 59 5a 5b 5c 5d 5e  |OPQRSTUVWXYZ[</span><span class="se">\]</span><span class="s2">^|
00000060  5f 60 61 62 63 64                                 |_</span><span class="sb">`</span>abcd|
00000066

<span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  08 01 08 02 08 03 08 04  08 05 08 06 08 07 08 08  |................|
00000010  08 09 08 0a 08 0b 08 0c  08 0d 08 0e 08 0f 08 10  |................|
00000020  08 11 08 12 08 13 08 14  08 15 08 16 08 17 08 18  |................|
00000030  08 19 08 1a 08 1b 08 1c  08 1d 08 1e 08 1f 08 20  |............... |
00000040  08 21 08 22 08 23 08 24  08 25 08 26 08 27 08 28  |.!.<span class="s2">".#.</span><span class="nv">$.</span><span class="s2">%.&amp;.'.(|
00000050  08 29 08 2a 08 2b 08 2c  08 2d 08 2e 08 2f 08 30  |.).*.+.,.-.../.0|
00000060  08 31 08 32 08 33 08 34  08 35 08 36 08 37 08 38  |.1.2.3.4.5.6.7.8|
00000070  08 39 08 3a 08 3b 08 3c  08 3d 08 3e 08 3f 08 40  |.9.:.;.&lt;.=.&gt;.?.@|
00000080  08 41 08 42 08 43 08 44  08 45 08 46 08 47 08 48  |.A.B.C.D.E.F.G.H|
00000090  08 49 08 4a 08 4b 08 4c  08 4d 08 4e 08 4f 08 50  |.I.J.K.L.M.N.O.P|
000000a0  08 51 08 52 08 53 08 54  08 55 08 56 08 57 08 58  |.Q.R.S.T.U.V.W.X|
000000b0  08 59 08 5a 08 5b 08 5c  08 5d 08 5e 08 5f 08 60  |.Y.Z.[.</span><span class="se">\.</span><span class="s2">].^._.</span><span class="sb">`</span>|
000000c0  08 61 08 62 08 63 08 64                           |.a.b.c.d|
000000c8
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 11c1c780-8178-44e1-bf70-2576ff009d2c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;470F6C47&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 64 01 02 03 04 05 06 07 08 09 0A 0B 0C 0A 0E �d��������������
0000000000000010 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E ����������������
0000000000000020 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E � !"</span><span class="c">#$%&amp;'()*+,-.</span>
0000000000000030 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E /0123456789:<span class="p">;</span>&lt;<span class="o">=&gt;</span>
0000000000000040 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E ?@ABCDEFGHIJKLMN
0000000000000050 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E OPQRSTUVWXYZ[<span class="se">\]</span>^
0000000000000060 5F 60 61 62 63 64                               _<span class="sb">`</span><span class="s2">abcd

</span><span class="nv">$ </span><span class="s2">(Get-Content ./repeated.txt | protoc --encode=UnpackedRepeated proto/repeated.proto) -join "</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;6F5008AF&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 08 01 08 02 08 03 08 04 08 05 08 06 08 07 08 08 ����������������
0000000000000010 08 09 08 0A 08 0B 08 0C 08 0A 08 0E 08 0F 08 10 ����������������
0000000000000020 08 11 08 12 08 13 08 14 08 15 08 16 08 17 08 18 ����������������
0000000000000030 08 19 08 1A 08 1B 08 1C 08 1D 08 1E 08 1F 08 20 ���������������
0000000000000040 08 21 08 22 08 23 08 24 08 25 08 26 08 27 08 28 �!�"</span>�#�<span class="nv">$�</span>%�&amp;�<span class="s1">'�(
0000000000000050 08 29 08 2A 08 2B 08 2C 08 2D 08 2E 08 2F 08 30 �)�*�+�,�-�.�/�0
0000000000000060 08 31 08 32 08 33 08 34 08 35 08 36 08 37 08 38 �1�2�3�4�5�6�7�8
0000000000000070 08 39 08 3A 08 3B 08 3C 08 3D 08 3E 08 3F 08 40 �9�:�;�&lt;�=�&gt;�?�@
0000000000000080 08 41 08 42 08 43 08 44 08 45 08 46 08 47 08 48 �A�B�C�D�E�F�G�H
0000000000000090 08 49 08 4A 08 4B 08 4C 08 4D 08 4E 08 4F 08 50 �I�J�K�L�M�N�O�P
00000000000000A0 08 51 08 52 08 53 08 54 08 55 08 56 08 57 08 58 �Q�R�S�T�U�V�W�X
00000000000000B0 08 59 08 5A 08 5B 08 5C 08 5D 08 5E 08 5F 08 60 �Y�Z�[�\�]�^�_�`
00000000000000C0 08 61 08 62 08 63 08 64                         �a�b�c�d
</span></code></pre></div></div>
</li></ul>
<p>you will get 102 bytes with the packed version and 200 with the unpacked one. Ouch!</p>
<h2 id="ill-never-use-codepacked--falsecode-so-whats-the-problem">I'll never use <code>packed = false</code>, so what's the problem?</h2>
<p>As of now, we were using an example that would probably never appear in real life. So now, it's time to get back in touch with reality. Let's say that instead of storing as <code>int32</code> you want to store your ids as strings. To test that, we can create a Simple message called <code>Repeated</code> with a repeated string field.</p>
<ul class="code-tab-container 1464182a-c456-4292-b2b1-f5ce21c9b38e"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '1464182a-c456-4292-b2b1-f5ce21c9b38e', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher 1464182a-c456-4292-b2b1-f5ce21c9b38e"><li class="code_switcher_container_parent active-tab code_switcher_proto 275efe7e-78b8-4e36-80d9-02bccf449507"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('275efe7e-78b8-4e36-80d9-02bccf449507')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Repeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and change our text file to specify string values.</p>
<ul class="code-tab-container d55b8abe-8a26-437f-b2bc-31bcb7623e12"><li class="active-tab code_switcher_yaml"><a onclick="selectTab('code_switcher_yaml', 'd55b8abe-8a26-437f-b2bc-31bcb7623e12', 0)">repeated.txt</a></li></ul><ul class="code-tab-switcher d55b8abe-8a26-437f-b2bc-31bcb7623e12"><li class="code_switcher_container_parent active-tab code_switcher_yaml 29a709de-595d-4a9a-b0d2-e4e979e60e9a"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('29a709de-595d-4a9a-b0d2-e4e979e60e9a')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1"</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
</code></pre></div></div>
</li></ul>
<p>After that, we are familiar how to encode that, we can just change the <code>--encode</code> flag value to <code>Repeated</code>.</p>
<ul class="code-tab-container 505571d0-8efa-46fb-955b-0a5d921f66ee"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '505571d0-8efa-46fb-955b-0a5d921f66ee', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '505571d0-8efa-46fb-955b-0a5d921f66ee', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 505571d0-8efa-46fb-955b-0a5d921f66ee"><li class="code_switcher_container_parent active-tab code_switcher_shell 9e44c9b3-3d54-4a87-b877-f59187023b85"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>Repeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 01 31 0a 01 32 0a 01  33                       |..1..2..3|
00000009
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell d7702c60-f20e-4c32-843f-e8961e8d040b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>Repeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex

   Label: String (System.String) &lt;7AB0A992&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 01 31 0A 01 32 0A 01 33                      ��1��2��3
</span></code></pre></div></div>
</li></ul>
<p>Does it look familiar to you? Yes, we are interleaving <code>0A</code> (length-delimited type with tag 1) with the values (two bytes, <code>01</code> is the length and <code>31</code>, <code>32</code>, <code>33</code> are the ASCII values for <code>1</code>, <code>2</code>, <code>3</code>).</p>
<p>This is basically showing us that, even though repeated fields are packed by default, some types cannot be packed. This is the case for the following types:</p>
<ul>
<li><code>bytes</code></li>
<li><code>string</code></li>
<li>User defined Types (messages)</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>The overall idea of this post was to explain that some types are not 'packable' when used in repeated fields. Simple types like varints and other numbers can be packed but more complex types cannot. This can cause performance problems and this can even result in poor performance compared to JSON. So the thing to keep in mind when using repeated field is that we should mostly use it with numbers. For other types, use <code>repeated</code> with caution.</p>
<p><strong>If you find this kind of article interesting or you would like me to cover some topic on Protobuf or gRPC, be sure to let me know in the comments.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[As this is a common and not well documented mistake that developers are doing, I decided to do a post explaining the problem that you might face when using repeated fields in your Protobuf messages.]]></summary></entry><entry><title type="html">gRPC Go Server Embeddings</title><link href="https://clement-jean.github.io/grpc_go_embeddings/" rel="alternate" type="text/html" title="gRPC Go Server Embeddings" /><published>2022-12-10T00:00:00+08:00</published><updated>2022-12-10T00:00:00+08:00</updated><id>https://clement-jean.github.io/grpc_go_embeddings</id><content type="html" xml:base="https://clement-jean.github.io/grpc_go_embeddings/"><![CDATA[<p>One of the common thing that my students are asking about recently is the difference between 2 Type Embeddings when your are defining a Server type for Service Registration. While this is an important topic, the gRPC doc seems to only mention that the <code>Unimplemented</code> version is for Forward Compatibility, and my course, up until now, uses the name of the generated Service Server directly. As such, I thought I would give an explanation on why I now recommend to use <code>Unimplemented</code> and some examples of the 3 Type Embeddings that you can use.</p>
<h2 id="type-embedding">Type Embedding</h2>
<p>One thing that might not be clear for everyone is what is a Type Embedding and why we need it in gRPC. The first thing to understand is that Go is a language that uses composition instead of inheritance. And if you don't know about Composition or you just want a refresher, you friend Wikipedia is here: <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Composition over Inheritance</a>.</p>
<p>On top of composition, Go allows anonymous fields in a struct. While I think anonymous field is a misnomer because the field can be referenced by the type name, these provide a shorter way (no need for Identifier) of writing composition. Let's take an example:</p>
<div class="code_switcher_container_parent 81657fe5-618c-41a2-b753-e9df9ca5a080"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">A</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">s</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">B</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">s</span> <span class="kt">string</span>
	<span class="n">A</span> <span class="c">// no identifier here, just a type</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">b</span> <span class="n">B</span>

	<span class="n">b</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">"Test"</span>
	<span class="n">b</span><span class="o">.</span><span class="n">A</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">"Another Test"</span> <span class="c">// notice that we can access A even if it's 'anonymous'</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>In this example, we augmented <code>B</code> with the fields defined in <code>A</code>. The ouput of this program should be something like: <code>{Test {Another Test}}</code> where the outter object is <code>B</code> and the inner object is <code>A</code>.</p>
<p>So in the end this is just a convenient way of writing composition.</p>
<h2 id="grpc-go">gRPC Go</h2>
<p>Now, that we are clear on what is a Type Embedding, we can talk about its role in gRPC. As we know the protoc compiler will generate some code for our services, and we also know that services are contracts between a server and client. So basically, because we have a contract we need to make sure that this is implemented on both side of the wire.</p>
<p>So if we define a dummy service:</p>
<div class="code_switcher_container_parent b83a960e-86dd-4041-8a84-93a983d0fadf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">DummyService</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
</div>
<p>And we generate our code:</p>
<div class="code_switcher_container_parent cbf08dac-8954-42a0-9d1f-d6f395fc93b7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--grpc-go_out</span><span class="o">=</span><span class="nb">.</span> dummy.proto 
</code></pre></div></div>
</div>
<p>We have the following generated server code (simplified):</p>
<div class="code_switcher_container_parent c7182378-27b2-4b4d-828b-a6aedacbe36c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// DummyServiceServer is the server API for DummyService service.</span>
<span class="c">// All implementations must embed UnimplementedDummyServiceServer</span>
<span class="c">// for foward compatibility</span>
<span class="k">type</span> <span class="n">DummyServiceServer</span> <span class="k">interface</span> <span class="p">{</span>
	<span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span>
<span class="p">}</span>

<span class="c">// UnimplementedDummyServiceServer must be embedded to have forward compatible implementations.</span>
<span class="k">type</span> <span class="n">UnimplementedDummyServiceServer</span> <span class="k">struct</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">UnimplementedDummyServiceServer</span><span class="p">)</span> <span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span> <span class="p">{}</span>

<span class="c">// UnsafeDummyServiceServer may be embedded to opt out of forward compatibility for this service.</span>
<span class="c">// Use of this interface is not recommended, as added methods to DummyServiceServer will</span>
<span class="c">// result in compilation errors.</span>
<span class="k">type</span> <span class="n">UnsafeDummyServiceServer</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>First, we can notice a <code>mustEmbedUnimplementedDummyServiceServer</code> function. While I'm not entirely sure what this is doing since I can still compile without the <code>Unimplemented</code> embedding, I read on <a href="https://github.com/grpc/grpc-go/issues/3794">Issue 3794</a> that <code>RegisterDummyService</code> will require (probrably in the future) the Server to embed the <code>UnimplementedDummyServiceServer</code>.</p>
<p>Then, as mentionned in the <code>DummyServiceServer</code> documentation, this is the server API. This means that when we add rpc endpoints to our service in the .proto file, methods will be generated into that interface.</p>
<p>The second type will always be empty. However, once we add rpc endpoints, a method will be added to this type and this method will simply return a gRPC error.</p>
<p>And finally, the last type will stay as is and no methods will be added to it.</p>
<h2 id="servicenameserver">${ServiceName}Server</h2>
<p>This is the type embedding I used in my course. However, this is a mistake to use this directly. Let's see why.</p>
<p>Let's first add a rpc endpoint to our DummyService, this will help when we actually want to see the difference between the type embeddings by calling an endpoint.</p>
<div class="code_switcher_container_parent aa71cc47-b7fd-41c3-85ac-197814b94e4e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google/protobuf/empty.proto"</span><span class="p">;</span>

<span class="kd">service</span> <span class="n">DummyService</span> <span class="p">{</span>
	<span class="k">rpc</span> <span class="n">GetDummy</span><span class="p">(</span><span class="n">google.protobuf.Empty</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">google.protobuf.Empty</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Then our Server type will look like this:</p>
<div class="code_switcher_container_parent b8eb390d-d77a-42ea-a934-1f084fd909a8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="k">struct</span> <span class="n">Server</span> <span class="p">{</span>
	<span class="n">DummyServiceServer</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>So, right now, we didn't implement <code>GetDummy</code> rpc endpoint. What happens if we try to call it ? The server runs perfectly, no compilation error, but once you call the rpc endpoint it will panic. This is where this type embedding is not Forward Compatible because an service which doesn't have a complete implementation of our service might cause a panic when comunicating with one that has the implementation.</p>
<h2 id="unsafeservicenameserver">Unsafe${ServiceName}Server</h2>
<p>Let's skip the <code>Unimplemented</code> for now and let's take a look at the <code>Unsafe</code> type emdeding. Before explaining it though, I want to mention two things:</p>
<ul>
<li><code>Unsafe</code> sounds really bad. However in some specific cases, this embedding might actually be useful.</li>
<li>The type documentation says that this type is not recommended, but once again, be aware that it might be useful.</li>
</ul>
<p>With that said, let's get started. Let's replace our type embedding:</p>
<div class="code_switcher_container_parent 8ce33f73-558a-43a4-9cd2-a6bbb3c4d435"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="k">struct</span> <span class="n">Server</span> <span class="p">{</span>
	<span class="n">UnsafeDummyServiceServer</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>In this case, calling an unimplemented endpoint will also result in a panic at runtime, but the main difference here is that this types embedding will help you to catch the unimplemented endpoints at compile time. This means that each time you add a rpc endpoint it will force you to implement it in your Go code. I actually like that approach more but the problem of panic at runtime is still here.</p>
<p>So in most of cases this is something you will not use because this is similar to the previous type embedding we showed. It will panic at runtime if a rpc endpoint is not defined. However, if you can control all your clients and servers, meaning that you can update all of them at the same time (and for eternity), this type embedding is actually safer (ironic, right ?) because it helps you to discover all the unimplemented rpc endpoint in your service at compile time.</p>
<h2 id="unimplementedservicenameserver">Unimplemented${ServiceName}Server</h2>
<p>And now, here is the one that you should use in most of the cases. This type embedding, as mentionned earlier will get a default implementation for all rpc endpoint added in the service. This means that for the service that we defined earlier, we are going to have the following method generated:</p>
<div class="code_switcher_container_parent fb83cbe1-8b10-4cdd-9ed2-61bda8c3a9eb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">UnimplementedDummyServiceServer</span><span class="p">)</span> <span class="n">GetDummy</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="o">*</span><span class="n">emptypb</span><span class="o">.</span><span class="n">Empty</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">emptypb</span><span class="o">.</span><span class="n">Empty</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">status</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Unimplemented</span><span class="p">,</span> <span class="s">"method GetDummy not implemented"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>And now we basically have Forward Compatibility because if a service without full implementation is called, it will just return a gRPC error and will not panic.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, you might have use cases where you actually need <code>Unsafe</code> type embedding but most of the time use the <code>Unimplemented</code> one. As for the other type embedding, forget it, there is no advantage in using it, only disadvantages. I hope this was helpful and see you in the next post.</p>]]></content><author><name>Clement</name></author><category term="gRPC" /><category term="Go" /><summary type="html"><![CDATA[One of the common thing that my students are asking about recently is the difference between 2 Type Embeddings when your are defining a Server type for Service Registration. While this is an important topic, the gRPC doc seems to only mention that the Unimplemented version is for Forward Compatibility, and my course, up until now, uses the name of the generated Service Server directly. As such, I thought I would give an explanation on why I now recommend to use Unimplemented and some examples of the 3 Type Embeddings that you can use.]]></summary></entry><entry><title type="html">Protocol Buffers varint vs fixed</title><link href="https://clement-jean.github.io/protobuf-varint-vs-fixed/" rel="alternate" type="text/html" title="Protocol Buffers varint vs fixed" /><published>2022-10-02T00:00:00+08:00</published><updated>2022-10-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/protobuf-varint-vs-fixed</id><content type="html" xml:base="https://clement-jean.github.io/protobuf-varint-vs-fixed/"><![CDATA[<p>This article is much more a note to myself than something else but this might be interesting for people out there.</p>
<p>I wanted to calculate the thresholds at which it is better it is to use a <code>fixed</code> rather than a varint. <!--desc--> Now, knowing that the varint are encoded in base 128, this basically means that we are dealing with power of 128. This gives us the following table:</p>
<div class="table-responsive">
<table class="table table-striped table-borderless">
  <thead>
    <tr>
      <th scope="col" class="text-center">Threshold value</th>
      <th scope="col" class="text-center">Bytes size (without tag)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row" class="text-center">0</th>
      <td class="text-center">0</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">1</th>
      <td class="text-center">1</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">128</th>
      <td class="text-center">2</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">16,384</th>
      <td class="text-center">3</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">2,097,152</th>
      <td class="text-center">4</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">268,435,456</th>
      <td class="text-center">5</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">34,359,738,368</th>
      <td class="text-center">6</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">4,398,046,511,104</th>
      <td class="text-center">7</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">562,949,953,421,312</th>
      <td class="text-center">8</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">72,057,594,037,927,936</th>
      <td class="text-center">9</td>
    </tr>
  </tbody>
</table>
</div>
<p>In summary:</p>
<ul>
<li>From 268,435,456 to whatever limit you 32 bits type has, it is better to use a <code>fixed32</code>.</li>
<li>From 72,057,594,037,927,936 to whatever limit you 64 bits type has, it is better to use a <code>fixed64</code>.</li>
</ul>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[This article is much more a note to myself than something else but this might be interesting for people out there. I wanted to calculate the thresholds at which it is better it is to use a fixed rather than a varint.]]></summary></entry><entry><title type="html">Storing Colors in Protocol Buffers</title><link href="https://clement-jean.github.io/storing_color_in_pb/" rel="alternate" type="text/html" title="Storing Colors in Protocol Buffers" /><published>2022-06-02T00:00:00+08:00</published><updated>2022-06-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/storing_color_in_pb</id><content type="html" xml:base="https://clement-jean.github.io/storing_color_in_pb/"><![CDATA[<p>While working on a new course, I was looking for an example to store a Color in Protocol Buffers. At first this seemed like an easy task but it turned out to be an interesting example of optimization. Let's work through it.</p>
<h2 id="quick-requirements">Quick Requirements</h2>
<p>In order to define what's the most optimal message definition that we come with, we need a way to calculate the serialized size of that message. Fortunately, doing so is pretty easy with Protocol Buffers.</p>
<ul class="code-tab-container 5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 0)">Python</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 1)">Java</a></li><li class=" code_switcher_kotlin"><a onclick="selectTab('code_switcher_kotlin', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 2)">Kotlin</a></li><li class=" code_switcher_go"><a onclick="selectTab('code_switcher_go', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 3)">Go</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 4)">C#</a></li><li class=" code_switcher_js"><a onclick="selectTab('code_switcher_js', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 5)">JS</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813', 6)">C++</a></li></ul><ul class="code-tab-switcher 5b3eefb0-8b3c-4c4b-bba1-8cf2ba4f3813"><li class="code_switcher_container_parent active-tab code_switcher_python 4688ef6f-dd06-4bf6-b61e-b9406b2c88d3"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('4688ef6f-dd06-4bf6-b61e-b9406b2c88d3')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_size</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">SerializeToString</span><span class="p">())</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 5934c292-711e-43e5-be78-e009decdf288"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('5934c292-711e-43e5-be78-e009decdf288')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.Message</span><span class="o">;</span>

<span class="kt">int</span> <span class="nf">calculateSize</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">getSerializedSize</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_kotlin 09f58f99-076a-4b97-bb4e-46e19e557624"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('09f58f99-076a-4b97-bb4e-46e19e557624')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">com.google.protobuf.Message</span>

<span class="k">fun</span> <span class="nf">calculateSize</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">Message</span><span class="p">)</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">serializedSize</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_go d0bdcd80-b322-4814-b740-866faba1573c"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d0bdcd80-b322-4814-b740-866faba1573c')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google.golang.org/protobuf/proto"</span>

<span class="k">func</span> <span class="n">calculateSize</span><span class="p">(</span><span class="n">message</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
  <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Failed to encode:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 6036245c-3545-4361-b30d-9549fc165ccc"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('6036245c-3545-4361-b30d-9549fc165ccc')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Google.Protobuf</span>

<span class="kt">int</span> <span class="nf">CalculateSize</span><span class="p">(</span><span class="n">IMessage</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">message</span><span class="p">.</span><span class="nf">CalculateSize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_js f31e3135-2bc1-4b13-bf4a-2b663aadcf4b"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('f31e3135-2bc1-4b13-bf4a-2b663aadcf4b')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">calculateSize</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">message</span><span class="p">.</span><span class="nx">serializeBinary</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp ff3369dd-6be8-4f6b-90ab-a417fe0656a1"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('ff3369dd-6be8-4f6b-90ab-a417fe0656a1')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;google/protobuf/message.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">calculate_size</span><span class="p">(</span><span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Message</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">out</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">serialized</span> <span class="o">=</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">SerializeToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">serialized</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

  <span class="k">return</span> <span class="n">out</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="a-primitive-implementation">A primitive implementation</h2>
<p>When I see something like <code>#FFFFFFFF</code> or <code>#00000000</code> (RGBA), I directly think about two things:</p>
<ul>
<li>The human readable solution: <code>string</code></li>
<li>The non human readable solution: <code>int32</code> or <code>int64</code></li>
</ul>
<p>Let's try with the string and work our way through, here is the proto file we are gonna use:</p>
<div class="code_switcher_container_parent da9cea7b-7452-453b-a97f-95fa39d685ba"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('da9cea7b-7452-453b-a97f-95fa39d685ba')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">java_package</span> <span class="o">=</span> <span class="s">"com.example"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">java_multiple_files</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"example.com/m"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">csharp_namespace</span> <span class="o">=</span> <span class="s">"Example"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>and here is the code that calculates the size for <code>Color</code> with value <code>#FFFFFFFF</code> (max color value):</p>
<ul class="code-tab-container 86c6fdcb-b7da-4637-9f49-430417b16cf5"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 0)">Python</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 1)">Java</a></li><li class=" code_switcher_kotlin"><a onclick="selectTab('code_switcher_kotlin', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 2)">Kotlin</a></li><li class=" code_switcher_go"><a onclick="selectTab('code_switcher_go', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 3)">Go</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 4)">C#</a></li><li class=" code_switcher_js"><a onclick="selectTab('code_switcher_js', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 5)">JS</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '86c6fdcb-b7da-4637-9f49-430417b16cf5', 6)">C++</a></li></ul><ul class="code-tab-switcher 86c6fdcb-b7da-4637-9f49-430417b16cf5"><li class="code_switcher_container_parent active-tab code_switcher_python 3365b5bb-0088-42a5-a281-fe11e20a9bc3"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('3365b5bb-0088-42a5-a281-fe11e20a9bc3')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">proto.color_pb2</span> <span class="k">as</span> <span class="n">pb</span>

<span class="k">print</span><span class="p">(</span><span class="n">calculate_size</span><span class="p">(</span><span class="n">pb</span><span class="p">.</span><span class="n">Color</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"FFFFFFFF"</span><span class="p">)))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 9a9c2688-da2b-4f5d-9804-5bc6a1c4e1ec"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('9a9c2688-da2b-4f5d-9804-5bc6a1c4e1ec')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.example.Color</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calculateSize</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setValue</span><span class="o">(</span><span class="s">"FFFFFFFF"</span><span class="o">).</span><span class="na">build</span><span class="o">()));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_kotlin 5a1d67ac-1ed7-4cc9-bc4d-064072122844"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('5a1d67ac-1ed7-4cc9-bc4d-064072122844')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">com.example.color</span>

<span class="nf">println</span><span class="p">(</span><span class="nf">calculateSize</span><span class="p">(</span><span class="nf">color</span> <span class="p">{</span> <span class="n">value</span> <span class="p">=</span> <span class="s">"FFFFFFFF"</span> <span class="p">}))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_go 928c66c1-98ce-40b2-9576-a833a11034b0"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('928c66c1-98ce-40b2-9576-a833a11034b0')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="n">pb</span> <span class="s">"example.com/m"</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">calculateSize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">Color</span><span class="p">{</span><span class="n">Value</span><span class="o">:</span> <span class="s">"FFFFFFFF"</span><span class="p">}))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp d13ab7d5-9b74-40a6-8acc-67caeb074c04"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d13ab7d5-9b74-40a6-8acc-67caeb074c04')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Example</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="nf">CalculateSize</span><span class="p">(</span><span class="k">new</span> <span class="n">Color</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">"FFFFFFFF"</span> <span class="p">}));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_js 2ba6b696-899d-403b-9aee-4227d07603e3"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2ba6b696-899d-403b-9aee-4227d07603e3')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">Color</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./proto/color_pb</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculateSize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Color</span><span class="p">().</span><span class="nx">setValue</span><span class="p">(</span><span class="dl">"</span><span class="s2">FFFFFFFF</span><span class="dl">"</span><span class="p">)));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 1732643f-cfd1-406e-a2b9-f38885c2ed26"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('1732643f-cfd1-406e-a2b9-f38885c2ed26')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"color.pb.h"</span><span class="cp">
</span>
<span class="n">Color</span> <span class="n">color</span><span class="p">;</span>

<span class="n">color</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">"FFFFFFFF"</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">calculate_size</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>
</li></ul>
<p>And that should give us a 10 bytes serialization, because this will be encoded as the following:</p>
<p class="text-center h4">
  <span style="color: blue">0a</span>
  <span style="color: red">08</span>
  <span style="color: green">46 46 46 46 46 46 46 46</span>
</p>
<p>where:</p>
<p>🔵 blue: is the combinaison between field tag and field type in one byte (read more <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure">here</a>). In our case our tag is 1 and the type is what's called <code>Length-delimited</code>.</p>
<p>🔴 red: is the size of the <code>Length-delimited</code> field, here 8.</p>
<p>🟢 green: is the <code>Length-delimited</code> field value. Here 46 is F (you can type <code>man ascii</code> and have a look at the Hexadecimal set).</p>
<h2 id="lets-optimize-that">Let's optimize that</h2>
<p>As mentioned earlier, the other way to solve that is to store the value in an integer. So let's check the decimal value of the biggest color that we can get, which is <code>FFFFFFFF</code>.</p>
<ul class="code-tab-container 305eac55-fbd2-4ea6-b548-4c7197b7f5bc"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '305eac55-fbd2-4ea6-b548-4c7197b7f5bc', 0)">Linux/Mac</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '305eac55-fbd2-4ea6-b548-4c7197b7f5bc', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 305eac55-fbd2-4ea6-b548-4c7197b7f5bc"><li class="code_switcher_container_parent active-tab code_switcher_shell 6286bbbe-c1c8-4fda-bb79-9518359692be"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('6286bbbe-c1c8-4fda-bb79-9518359692be')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"ibase=16; FFFFFFFF"</span> | bc
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 35bced0d-eaa3-4884-a989-e267730701c3"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('35bced0d-eaa3-4884-a989-e267730701c3')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>convert]::toint64<span class="o">(</span><span class="s2">"FFFFFFFF"</span>, 16<span class="o">)</span>
</code></pre></div></div>
</li></ul>
<p>and this gives us: <strong>4,294,967,295</strong>. Sounds like this gonna fit inside an <code>int32</code> or even an <code>uint32</code> if we wanted to make class instantiation safer (not letting user enter negative value). So we now have:</p>
<div class="code_switcher_container_parent b24b1bc8-1600-4ca4-8678-9160956cbacc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>and by using the same code for calculating the size we obtain: <strong>6 bytes</strong>.</p>
<h2 id="a-step-further">A step further</h2>
<p>Let's take a look at a table that I made for another post.</p>
<div class="table-responsive">
<table class="table table-striped table-borderless">
  <thead>
    <tr>
      <th scope="col" class="text-center">Threshold value</th>
      <th scope="col" class="text-center">Bytes size (without tag)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row" class="text-center">0</th>
      <td class="text-center">0</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">1</th>
      <td class="text-center">1</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">128</th>
      <td class="text-center">2</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">16,384</th>
      <td class="text-center">3</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">2,097,152</th>
      <td class="text-center">4</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">268,435,456</th>
      <td class="text-center">5</td>
    </tr>
  </tbody>
</table>
</div>
<p>This table presents the field value thresholds and the bytes size for serialization of <code>uint32</code>. Can you see the problem here ? <strong>4,294,967,295</strong> is simply bigger than <strong>268,435,456</strong> and what it means is that, our value of <code>FFFFFFFF</code> will be serialized to 5 bytes.</p>
<p>Do we know another type that could help us serialize in less bytes? Sure we do! We know that <code>fixed32</code> is an unsigned integer and it will always be serialized to 4 bytes. So we if change to:</p>
<div class="code_switcher_container_parent ba90d289-b206-4126-acac-706ec3204f41"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">fixed32</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>the value <code>FFFFFFFF</code> will be serialized into:</p>
<p class="text-center h4">
  <span style="color: blue">0d</span>
  <span style="color: green">ff ff ff ff</span>
</p>
<p>and we are done!</p>
<h2 id="wait-a-minute-">Wait a minute ...</h2>
<p>This seems to vary with our data/color distribution, isn't it ?</p>
<div class="text-center">
  <img src="/images/threshold_color.png" alt="Threshold color between uint32 and fixed32">
</div>
<p>It varies. However you can see the number of colors that can be efficiently serialized with a <code>uint32</code> is pretty small. The dots here represent the threshold that I showed in the table presented in &quot;A step further&quot; and here we can see that the threshold at <strong>2,097,152</strong> or <code>001FFFFF</code> is where it becomes efficient to store with a <code>fixed32</code>.</p>
<p>Let's calculate the percentage of colors that can be efficiently stored with an <code>uint32</code>.</p>
<p class="text-center h4">
  (<span style="color: blue">2097152</span> / <span style="color: red">4294967295</span>) * 100 ~= 0.05
</p>
<p>where:</p>
<p>🔵 blue: is the threshold at which it becomes more optimal to save with <code>fixed32</code>.</p>
<p>🔴 red: biggest number that we can have (<code>FFFFFFFF</code>).</p>
<p>So in conclusion only 0.05% of the possible numbers will be not optimally serialized. I think we can agree on the fact that is acceptable.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Protocol Buffers are providing us with a lot of types for numbers, and choosing the right one is important for optimizing you payload or serialized data size. If you want to know more about how to choose between them, you might consider joining <a href="https://www.udemy.com/course/protocol-buffers/?referralCode=CB382B4ED9936D6C6193">my Udemy course</a> on Protocol Buffers.</p>
<p>Hope you enjoyed this article, I will be glad to get some feedback on this. Especially if you find a more efficient way to serialize this data. Check the about page to find all the ways you can us for reaching to me.</p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[While working on a new course, I was looking for an example to store a Color in Protocol Buffers. At first this seemed like an easy task but it turned out to be an interesting example of optimization. Let's work through it.]]></summary></entry><entry><title type="html">Code Download for gRPC Course (C#)</title><link href="https://clement-jean.github.io/code_download_for_grpc_csharp/" rel="alternate" type="text/html" title="Code Download for gRPC Course (C#)" /><published>2022-02-07T00:00:00+08:00</published><updated>2022-02-07T00:00:00+08:00</updated><id>https://clement-jean.github.io/code_download_for_grpc_csharp</id><content type="html" xml:base="https://clement-jean.github.io/code_download_for_grpc_csharp/"><![CDATA[<p>For student taking my class on gRPC C# (Udemy), here is the way to get the code.</p>
<h2 id="getting-the-code">Getting the code</h2>
<p>In order to get the code for this course, you can simply go to <a href="https://github.com/Clement-Jean/grpc-csharp-course">the github repository</a> and clone it.</p>
<p>You can also directly clone it in your terminal:</p>
<div class="code_switcher_container_parent 49c51d90-8649-4c91-b647-98bcfc024306"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:Clement-Jean/grpc-csharp-course.git
</code></pre></div></div>
</div>
<h2 id="contributing">Contributing</h2>
<p>I value any input you my have on this repository:</p>
<ul>
<li>Typo</li>
<li>Code optimization</li>
<li>Code Deprecation</li>
<li>...</li>
</ul>
<p><strong>You can do a Pull Request if you think that your input can help the community</strong>.</p>
<h2 id="more">More</h2>
<p>I also value any other kind of input, such as :star: on the repo or fork.</p>
<p>Finally, do not hesitate to contact me. <strong>You can find my email address <a href="https://clement-jean.github.io/about/">here</a></strong>.</p>]]></content><author><name>Clement</name></author><category term="gRPC" /><category term="C#" /><category term="Udemy" /><summary type="html"><![CDATA[For student taking my class on gRPC C# (Udemy), here is the way to get the code.]]></summary></entry><entry><title type="html">If Modified Since for Redis</title><link href="https://clement-jean.github.io/if_modified_since_for_redis/" rel="alternate" type="text/html" title="If Modified Since for Redis" /><published>2021-09-16T00:00:00+08:00</published><updated>2021-09-16T00:00:00+08:00</updated><id>https://clement-jean.github.io/if_modified_since_for_redis</id><content type="html" xml:base="https://clement-jean.github.io/if_modified_since_for_redis/"><![CDATA[<p>Caching is everywhere! It is an essential part of most applications out there and so obviously there are a lot of options you can chose from. Here is a non exhaustive list:</p>
<ul>
<li><a href="https://redis.com">Redis</a></li>
<li><a href="http://memcached.org">Memcached</a></li>
<li>CDNs</li>
<li>and lot more</li>
</ul>
<p>And caching is very specific to the kind of data you are transfering (JSON, video, ...) and to your architecture.</p>
<p><strong>That's a lot of choices to make !</strong></p>
<p>At <a href="http://educationforethiopia.org">E4E</a>, since we are a stratup we can't take the risk to over engineer this. I will cost us time, money and make our architecture way harder to maintain. So we developed a simple <a href="https://github.com/Clement-Jean/RedisIMS">Redis plugin</a> to help us with caching.</p>
<h2 id="background">Background</h2>
<p>As I said, caching is very specific to your solution, there is no One size fits all solution. So let's see what our solution is providing first.</p>
<p>At E4E we provide educational video content for students in Ethiopia through an native Android app called <a href="https://play.google.com/store/apps/details?id=com.e4e.saquama">Saquama</a>. Every video comes with some metadata like: Title, Description and all the relational part that comes with it. For this article we are focusing on these metadata because videos are already taken care of by a CDN.</p>
<h2 id="what-about-the-plugin">What about the plugin?</h2>
<p>RedisIMS standing for Redis If Modified Since (very creative, isn't it ?), provides a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">HTTP protocol's If Modified Since Header</a> like experience. This basically means that we have a timestamp saying when our metadata about a certain video changed. We can then compare this timestamp with the one sent by the client and returns a value accordingly.</p>
<h3 id="how-does-that-work--technically-i-mean">How does that work ? Technically I mean.</h3>
<p>This plugin is heavily influenced by the following Lua code in this <a href="https://blog.r4um.net/2021/redis-mtime-getset/#:~:text=Redis%20server%20side%20if-modified-since%20caching%20pattern%20using%20lua,can%20save%20significant%20network%20bandwidth%20and%20compute%20cycles.">article</a>. The process consist in the following actions:</p>
<ul>
<li>
<p>When caching some data, the plugin will do a HSET of the key defined in the plugin, the data and the timestamp.</p>
</li>
<li>
<p>When getting cached data, the plugin will use HGET with the key defined and the timestamp.</p>
<ul>
<li>If the data doesn't exist, return NULL</li>
<li>If the data exists and the timestamp is bigger or equal than the cached one, we return NULL</li>
<li>and If the timestamp is smaller than the cached one, we return the cached data</li>
</ul>
</li>
</ul>
<h2 id="an-example">An example</h2>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell">redisims.exists MY_NON_EXISTING_KEY -&gt; 0 
redisims.get MY_NON_EXISTING_KEY TIMESTAMP -&gt; NULL

redisims.set MY_EXISTING_KEY THE_VALUE THE_TIMESTAMP
redisims.exists MY_EXISTING_KEY -&gt; 1

redisims.get MY_EXISTING_KEY OUTDATED_TIMESTAMP -&gt; YOUR_OBJECT
redisims.get MY_EXISTING_KEY CURRENT_TIMESTAMP -&gt; NULL</code></pre></figure>
<h2 id="interested-">Interested ?</h2>
<p>If you feel like contributing to the project or just trying it, head up to the <a href="https://github.com/Clement-Jean/RedisIMS">Github repository</a>.</p>
<p>And finnaly if you have any constructive feedback, feel free to reach me by checking the contact page of either my <a href="https://github.com/Clement-Jean">Github profile</a> or the <a href="https://clement-jean.github.io/about/">about page of the website</a></p>]]></content><author><name>Clement</name></author><category term="Redis" /><summary type="html"><![CDATA[Caching is everywhere! It is an essential part of most applications out there and so obviously there are a lot of options you can chose from. Here is a non exhaustive list:]]></summary></entry><entry><title type="html">Value Matchers in Expresso Intents</title><link href="https://clement-jean.github.io/value_matchers_in_espresso_intents/" rel="alternate" type="text/html" title="Value Matchers in Expresso Intents" /><published>2021-02-15T00:00:00+08:00</published><updated>2021-02-15T00:00:00+08:00</updated><id>https://clement-jean.github.io/value_matchers_in_espresso_intents</id><content type="html" xml:base="https://clement-jean.github.io/value_matchers_in_espresso_intents/"><![CDATA[<p>After the decision of using <a href="https://firebase.google.com/docs/crashlytics">Crashlytics</a> for our first pilot (<a href="https://www.educationforethiopia.org/">Education for ethopia</a>), the tech team discovered that one particular crash was redundant. This crash was due to a malformed Intent between the video player in portrait mode and the video player in landscape mode.</p>
<h2 id="context">Context</h2>
<p>To understand a little bit more about the problem faced later, I want to describe briefly how this transition of video player mode is working for us.</p>
<h3 id="portraitactivity">PortraitActivity</h3>
<p>This activity handles the playlist of videos and the video player (we use <a href="https://exoplayer.dev">ExoPlayer</a>).</p>
<h3 id="landscapeactivity">LandscapeActivity</h3>
<p>This activity handles only the video player and has a locked screenOrientation in the AndroidManifest:</p>
<div class="code_switcher_container_parent b35c020f-6ec0-4859-8b9b-40c447137601"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>android:screenOrientation="landscape"
</code></pre></div></div>
</div>
<h3 id="the-behavior">The behavior</h3>
<p>Our expected behavior is that depending on 3 attributes of the player (currentPosition, currentMediaItem.mediaId, isPlaying), the user find the video in the same state switching from Portrait to Landscape or from Landscape to Portrait.</p>
<h2 id="testing">Testing</h2>
<p>Now, because we had this redundant crash, we decided to do like all the good engineers: testing. With that we would then be able to prevent these crashes to ever happen again in the future.</p>
<p>For that, we used the <a href="https://developer.android.com/training/testing/espresso/intents">Espresso Intent extension</a> and basically check the extras passed between activities. To do that we did the following:</p>
<div class="code_switcher_container_parent 9e4be9c9-ae36-4545-910b-18cfdc11373f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">activityRule</span><span class="o">.</span><span class="na">scenario</span><span class="o">.</span><span class="na">onActivity</span> <span class="o">{</span>
    <span class="n">val</span> <span class="n">player</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">findViewById</span><span class="o">&lt;</span><span class="nc">PlayerView</span><span class="o">&gt;(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">player_view</span><span class="o">).</span><span class="na">player</span><span class="o">!!</span>

    <span class="n">player</span><span class="o">.</span><span class="na">pause</span><span class="o">()</span> <span class="c1">// pause the video</span>
    <span class="n">player</span><span class="o">.</span><span class="na">seekTo</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span> <span class="c1">// we seek to 1 sec from the beginning</span>
<span class="o">}</span>
<span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">change_activity</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">())</span>

<span class="n">intended</span><span class="o">(</span>
    <span class="n">allOf</span><span class="o">(</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">CURRENT_POSITION</span><span class="o">,</span> <span class="mi">1000L</span><span class="o">),</span> <span class="c1">// 1 sec</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">MEDIA_ID</span><span class="o">,</span> <span class="s">"A_VIDEO.mp4"</span><span class="o">),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">IS_PLAYING</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="c1">// is not playing</span>
    <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
</div>
<p>pretty simple and pretty expressive code.</p>
<p>The real trouble came when we decided to test a video that is playing. The first problem came from ExoPlayer itself, we basically needed to wait that the video was in playing state before to even create the new activity. To do that we added a listener like the following:</p>
<div class="code_switcher_container_parent 3a9a6886-2e49-47fc-9fbf-5b864de32848"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">player</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="nl">object:</span> <span class="nc">Player</span><span class="o">.</span><span class="na">EventListener</span> <span class="o">{</span>
    <span class="n">override</span> <span class="n">fun</span> <span class="nf">onIsPlayingChanged</span><span class="o">(</span><span class="nl">playing:</span> <span class="nc">Boolean</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">isPlaying</span> <span class="o">=</span> <span class="n">playing</span>
    <span class="o">}</span>
<span class="o">})</span>
</code></pre></div></div>
</div>
<p>and we basically waited for <code>isPlaying</code> to change:</p>
<div class="code_switcher_container_parent 7b355689-391d-49bf-a06c-553c729d21f6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(!</span><span class="n">isPlaying</span> <span class="o">&amp;&amp;</span> <span class="n">deadline</span><span class="o">.</span><span class="na">isNotExceeded</span><span class="o">())</span> <span class="o">{}</span>
</code></pre></div></div>
</div>
<p>After that we were able to click our <code>full_screen_button</code> and we were ready to check our intents. In a naive attempte we wrote something like:</p>
<div class="code_switcher_container_parent 38f3425c-91af-4a32-aec6-4c08d3b84fc5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">intended</span><span class="o">(</span>
    <span class="n">allOf</span><span class="o">(</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">CURRENT_POSITION</span><span class="o">,</span> <span class="n">greaterThanOrEqualTo</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)),</span> <span class="c1">// &gt;= 1000 because playing</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">MEDIA_ID</span><span class="o">,</span> <span class="s">"A_VIDEO.mp4"</span><span class="o">),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">IS_PLAYING</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
    <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
</div>
<p>And we thought &quot;yeah looks like it's gonna work&quot;. But after running our test, we received a ❌. We then decided to read the Logs and see what wouldn't match. I let you judge by yourself:</p>
<div class="code_switcher_container_parent e99369b0-5c31-41ef-a1fd-bdaa15cab0e5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IntentMatcher: <span class="o">(</span>has extras: has bundle with: key: is <span class="s2">"current_position"</span> value: is &lt;a value equal to or greater than &lt;1000L&gt;&gt; and has extras: has bundle with: key: is <span class="s2">"media_id"</span> value: is <span class="s2">"A_VIDEO.mp4"</span> and has extras: has bundle with: key: is <span class="s2">"is_playing"</span> value: is &lt;<span class="nb">true</span><span class="o">&gt;)</span>

Matched intents:[]

Recorded intents:
<span class="nt">-Intent</span> <span class="o">{</span> <span class="nv">cmp</span><span class="o">=</span>com.clementjean.unittest/.NewActivity <span class="o">(</span>has extras<span class="o">)</span> <span class="o">}</span> handling packages:[[com.clementjean.unittest]], extras:[Bundle[<span class="o">{</span><span class="nv">current_position</span><span class="o">=</span>1158, <span class="nv">media_id</span><span class="o">=</span>A_VIDEO.mp4, <span class="nv">is_playing</span><span class="o">=</span><span class="nb">true</span><span class="o">}]])</span>
</code></pre></div></div>
</div>
<p>Apparently the recorded intent is matching, we have a current_position &gt;= 1000, we have the right meta_id and the is_playing is set to true. Correct right?</p>
<p>After an hour of trying to debug that, we checked the documentation (we only scanned through it before) and we finally found what was the problem.</p>
<p>In the documentation of <a href="https://developer.android.com/reference/androidx/test/espresso/intent/matcher/IntentMatchers#hasExtra(org.hamcrest.Matcher%3Cjava.lang.String%3E,%20org.hamcrest.Matcher%3C?%3E)">Intent matchers</a>, we can see that there are two definitions of the function <code>hasExtra</code>:</p>
<div class="code_switcher_container_parent 744e6c6f-5fb0-4de8-9682-c1055132c035"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Matcher</span><span class="o">&lt;</span><span class="nc">Intent</span><span class="o">&gt;</span> <span class="nf">hasExtra</span> <span class="o">(</span><span class="nc">Matcher</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">keyMatcher</span><span class="o">,</span> <span class="nc">Matcher</span><span class="o">&lt;?&gt;</span> <span class="n">valueMatcher</span><span class="o">)</span>
</code></pre></div></div>
</div>
<p>and</p>
<div class="code_switcher_container_parent 0d5eee77-ce55-4bf9-8af9-50262d59f3f0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Matcher</span><span class="o">&lt;</span><span class="nc">Intent</span><span class="o">&gt;</span> <span class="nf">hasExtra</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span>
</code></pre></div></div>
</div>
<p>Do you see the problem?</p>
<p>The problem is in that line <code>hasExtra(CURRENT_POSITION, greaterThanOrEqualTo(1000L))</code> because by using the string <code>CURRENT_POSITION</code>, we were actually using the second overload of the function and thus the value of our Intent extra was definitely not equal to value matcher <code>greaterThanOrEqualTo</code>.</p>
<p>To solve that we need to add the matcher <code>is()</code> around the string <code>CURRENT_POSITION</code> and we would then access the first definition of the matcher <code>hasExtra</code>. It gives us something like:</p>
<div class="code_switcher_container_parent cf23aa39-3966-43b8-a7c2-923a4838ed28"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">intended</span><span class="o">(</span>
    <span class="n">allOf</span><span class="o">(</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="err">`</span><span class="n">is</span><span class="err">`</span><span class="o">(</span><span class="no">CURRENT_POSITION</span><span class="o">),</span> <span class="n">greaterThanOrEqualTo</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">MEDIA_ID</span><span class="o">,</span> <span class="s">"A_VIDEO.mp4"</span><span class="o">),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">IS_PLAYING</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
    <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
</div>
<h2 id="the-problem">The problem</h2>
<p>For me the problem is the impossibility for library designers to define a certain domain for the template parameter. Knowing that an intent only accept a restricted amount of types as extra, it would be great to have the possibility to only constraint the template to these types. This is however a language design problem and it might not be solved in a near future (if you are a language developer though, you might consider solving this).</p>
<h2 id="conclusion">Conclusion</h2>
<p><code>Beware function overloads</code></p>]]></content><author><name>Clement</name></author><category term="Android" /><summary type="html"><![CDATA[After the decision of using Crashlytics for our first pilot (Education for ethopia), the tech team discovered that one particular crash was redundant. This crash was due to a malformed Intent between the video player in portrait mode and the video player in landscape mode.]]></summary></entry></feed>