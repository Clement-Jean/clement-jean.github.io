<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://clement-jean.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://clement-jean.github.io/" rel="alternate" type="text/html" /><updated>2023-01-05T14:10:29+08:00</updated><id>https://clement-jean.github.io/feed.xml</id><title type="html">Clément Jean</title><subtitle>Eternal learner and challenges lover</subtitle><author><name>Clément Jean</name></author><entry><title type="html">Packed vs Unpacked Repeated Fields</title><link href="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/" rel="alternate" type="text/html" title="Packed vs Unpacked Repeated Fields" /><published>2023-01-05T00:00:00+08:00</published><updated>2023-01-05T00:00:00+08:00</updated><id>https://clement-jean.github.io/packed_vs_unpacked_repeated_fields</id><content type="html" xml:base="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>As this is a common and not well documented mistake that developers are doing, I decided to do a post explaining the problem that you might face when using repeated fields in your Protobuf messages.</p>
<p>Be sure to open any refresher section if you feel like you are not sure about a topic. We are going to use them during this post.</p>
<p>
<details><summary><b>Refresher #1: Repeated Fields</b></summary>
<p>A repeated field is a field that can contain 0 or more values. In other words, this is a list. We can create such a field by simply adding a `repeated` modifier in front of the field. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span></code></pre></figure>
</p>
</details>
</p>
<p>
<details><summary><b>Refresher #2: Field Options</b></summary>
<p>A field option is some additional information that will be affecting the compilation and thus the code generation. These options can be defined as key value pairs between square brackets between the field tag and the semicolon. In this post we are going to use the <code>packed</code> option, which takes a boolean as value and can only be used on repeated field. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">packed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span></code></pre></figure>
</p>
</details>
</p>
<p>
<details><summary><b>Refresher #3: Protobuf Text Format</b></summary>
<p>Protobuf does not exclusively encode to binary. It is possible to encode to JSON or to a format that is close to JSON. This text format is generally used for improving readability/writeability (nobody want to read/write binary) and enhance your debugging or analysis of your messages. I will not go into too much details about this here, but to write a repeated field, you can simply repeated the field name as many times as you want to add value to the field, followed by a colon and the value. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">ids</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s">3</span></code></pre></figure>
</p>
</details>
</p>
</p>
<h2 id="packed">Packed</h2>
<p>Let's start with packed repeated fields. In order to see how they are encoded we are going to use <code>protoc --encode</code> and pass it the content of some file defining the values in Protobuf Text Format. In this text file, let's define 3 values:</p>
<ul class="code-tab-container 9ff73fd6-a367-496c-95fb-73403877a2fc"><li class="active-tab code_switcher_yaml"><a onclick="selectTab('code_switcher_yaml', '9ff73fd6-a367-496c-95fb-73403877a2fc', 0)">repeated.txt</a></li></ul><ul class="code-tab-switcher 9ff73fd6-a367-496c-95fb-73403877a2fc"><li class="code_switcher_container_parent active-tab code_switcher_yaml 17994d22-ee88-4880-9d02-b43d1ab04bbf"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('17994d22-ee88-4880-9d02-b43d1ab04bbf')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ids</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">3</span>
</code></pre></div></div>
</li></ul>
<p>Then, for our proto file, we are going to store these values in a message called <code>PackedRepeated</code> that has a field of type <code>repeated int32</code>.</p>
<ul class="code-tab-container ace5ebd9-a974-47d4-a368-3ae01b02842c"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'ace5ebd9-a974-47d4-a368-3ae01b02842c', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher ace5ebd9-a974-47d4-a368-3ae01b02842c"><li class="code_switcher_container_parent active-tab code_switcher_proto 1ea81375-79b9-46ad-8fa0-9b34e20a77fc"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('1ea81375-79b9-46ad-8fa0-9b34e20a77fc')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">PackedRepeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And finally, we need to use the <code>--encode</code> flag from protoc, which let us take some binary content on the standard input and write some protobuf encoded message on the standard ouput. To take advantage of this we are going to display the content of a file on the standard output, pipe that to the standard input of protoc and finally, pipe the standard ouput of protoc to a command that display an hexadecimal dump.</p>
<ul class="code-tab-container 5efe047b-471c-44d1-950a-5d2ff14222c6"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '5efe047b-471c-44d1-950a-5d2ff14222c6', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '5efe047b-471c-44d1-950a-5d2ff14222c6', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 5efe047b-471c-44d1-950a-5d2ff14222c6"><li class="code_switcher_container_parent active-tab code_switcher_shell b9ff27f9-65de-46a0-9bd1-6e2a97c71811"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 03 01 02 03                                    |.....|
00000005
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell e0243564-a590-4400-a4ad-b463c3d000bf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: /Users/clement/Git/experiment/out.bin

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 03 01 02 03                                  �����
</span></code></pre></div></div>
</li></ul>
<p>So here we can see that the end result of encoding <code>repeated.txt</code> content as <code>PackedRepeated</code> is <code>0A 03 01 02 03</code>. What does that mean? Let's decrypt that.</p>
<p>To do that, we can simply take each hexadecimal number and transform it into binary. While this is pretty simple numbers, let's use the command line to make sure we don't slip up and have wrong binary.</p>
<ul class="code-tab-container 23f8b888-9342-4170-8ba2-5585fc7f62b3"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '23f8b888-9342-4170-8ba2-5585fc7f62b3', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '23f8b888-9342-4170-8ba2-5585fc7f62b3', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 23f8b888-9342-4170-8ba2-5585fc7f62b3"><li class="code_switcher_container_parent active-tab code_switcher_shell 04154c17-c3fa-41d8-acb0-4000f4b9c884"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 0A"</span> | bc
1010

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 03"</span> | bc
11

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 01"</span> | bc
1

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 02"</span> | bc
10
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell ea07e855-873b-40eb-9663-2133670a129e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x0A, 2<span class="o">)</span>
1010

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x03, 2<span class="o">)</span>
11

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x01, 2<span class="o">)</span>
1

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x02, 2<span class="o">)</span>
10
</code></pre></div></div>
</li></ul>
<blockquote>
<p>Note: When you are using integer that are not fixed, you are dealing with varints. This means that the bigger the value, the bigger the amount of bytes it will be encoded to. In our example, we purposely chose small numbers so that they are encoded into 1 byte. The following encoding explanation is not correct for all numbers you might use.</p>
</blockquote>
<ul>
<li><code>0A</code> gives us <code>1010</code>. This is a byte that represent both the wire type (type of value) and the field tag. To get the wire type, we simply take the first 3 bits starting from the right. In our case this is <code>010</code> or 2. if you check the <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure">Encoding</a> page of Protobuf Documentation, this means that we have a Length-Delimited type. In other words, we have some kind of data that has a dynamic size. This is exactly what we have, this is a list. Then, we are left with a tag equal to 1.</li>
<li><code>03</code> gives us <code>11</code>. This is the actual length of the list. Here we have 3 values.</li>
<li><code>01</code>, <code>02</code> and <code>03</code> (we omitted it, because we know the result), gives us respectively <code>1</code>, <code>10</code> and <code>11</code>. These are the actual values that we added into the list.</li>
</ul>
<p>In the end, we have 5 bytes, 1 byte for type + tag, 1 byte for the list length, and 3 bytes for the values. Pretty compact.</p>
<h2 id="unpacked">Unpacked</h2>
<p>Let's now see how the same values are encoded in an unpacked repeated field. To do that, we are going to use the <code>packed</code> field option. We are going to set that to false so that protoc skip the packing.</p>
<ul class="code-tab-container cdc8637e-1c9b-4eae-971d-80ad1d864ec6"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'cdc8637e-1c9b-4eae-971d-80ad1d864ec6', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher cdc8637e-1c9b-4eae-971d-80ad1d864ec6"><li class="code_switcher_container_parent active-tab code_switcher_proto 446deb49-4107-4b83-806e-f84099910daa"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('446deb49-4107-4b83-806e-f84099910daa')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">UnpackedRepeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">packed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that done, we can now run similar commands as what we did in the <code>Packed</code> section. The only difference is that, now, we need to specify that we want to encode the data as <code>UnpackedRepeated</code>.</p>
<ul class="code-tab-container 74f4953c-d357-4d5f-b2d4-40f4043f2a74"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '74f4953c-d357-4d5f-b2d4-40f4043f2a74', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '74f4953c-d357-4d5f-b2d4-40f4043f2a74', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 74f4953c-d357-4d5f-b2d4-40f4043f2a74"><li class="code_switcher_container_parent active-tab code_switcher_shell fa5ce126-c24d-4005-9c91-8886ec0772ef"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  08 01 08 02 08 03                                 |......|
00000006
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell b11d2e02-0c06-4981-b50f-b6b8e1ffe76d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;01DCACCB&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 08 01 08 02 08 03                               ������
</span></code></pre></div></div>
</li></ul>
<p>And ... We have 6 bytes.</p>
<p>There are two things we can notice here. The first is that now we don't have any <code>0A</code> byte. And the second one is that we are interleaving <code>08</code> with our values. Let's find out how this was encoded.</p>
<p>As we already know the values for <code>01</code>, <code>02</code> and <code>03</code>, we can just convert <code>08</code>.</p>
<ul class="code-tab-container f5c20a4c-1d52-4f8b-bfec-ee89949fe4d4"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'f5c20a4c-1d52-4f8b-bfec-ee89949fe4d4', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'f5c20a4c-1d52-4f8b-bfec-ee89949fe4d4', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher f5c20a4c-1d52-4f8b-bfec-ee89949fe4d4"><li class="code_switcher_container_parent active-tab code_switcher_shell 6874a489-58cc-4843-82ad-bcc5091328c0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 08"</span> | bc
1000
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 7d156d99-5de3-4b28-a407-070a3cadbaad"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x08, 2<span class="o">)</span>
1000
</code></pre></div></div>
</li></ul>
<ul>
<li><code>08</code> gives us <code>1000</code>. Once again this is the combination of wire type and field tag. So we have 0 for the wire type, which correspond to varint. And then the field tag is 1.</li>
</ul>
<p>So in this case, we are basically encoding each value of the list as a separate field. Protobuf will then see that the <code>ids</code> field is repeated and that we are adding multiple values with the same field tag and it will just add these values to the list.</p>
<p>In the end, Protobuf is encoding <code>UnpackedRepeated</code> into 6 bytes instead of 5. This sounds negligible here because we have a simple example but if you run the example on 100 ids:</p>
<blockquote>
<p>You can generate the repeated.txt by running this in your shell:</p>
<ul class="code-tab-container 79cc995e-5af2-4fc6-a97c-96a22a99cddc"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '79cc995e-5af2-4fc6-a97c-96a22a99cddc', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '79cc995e-5af2-4fc6-a97c-96a22a99cddc', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 79cc995e-5af2-4fc6-a97c-96a22a99cddc"><li class="code_switcher_container_parent active-tab code_switcher_shell 469966bb-cfff-4485-9713-ab1cd012f3e6"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('469966bb-cfff-4485-9713-ab1cd012f3e6')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..100<span class="o">}</span>
<span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"ids: </span><span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> repeated.txt
<span class="k">done</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 05ae4143-4a66-46b4-a286-98cf5e344961"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('05ae4143-4a66-46b4-a286-98cf5e344961')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foreach <span class="o">(</span><span class="nv">$i</span> <span class="k">in </span>1..100<span class="o">)</span> <span class="o">{</span>
  Add-Content <span class="nt">-Path</span> <span class="s2">"repeated1.txt"</span> <span class="nt">-Value</span> <span class="s2">"ids: </span><span class="nv">$i</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div>
</li></ul></blockquote>
<ul class="code-tab-container e05cbcd6-ebce-4d03-a50e-a7cdfa7a2bba"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'e05cbcd6-ebce-4d03-a50e-a7cdfa7a2bba', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'e05cbcd6-ebce-4d03-a50e-a7cdfa7a2bba', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher e05cbcd6-ebce-4d03-a50e-a7cdfa7a2bba"><li class="code_switcher_container_parent active-tab code_switcher_shell 8795e455-34ff-450f-851f-fa2441a5791c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 64 01 02 03 04 05 06  07 08 09 0a 0b 0c 0d 0e  |.d..............|
00000010  0f 10 11 12 13 14 15 16  17 18 19 1a 1b 1c 1d 1e  |................|
00000020  1f 20 21 22 23 24 25 26  27 28 29 2a 2b 2c 2d 2e  |. <span class="o">!</span><span class="s2">"#</span><span class="nv">$%</span><span class="s2">&amp;'()*+,-.|
00000030  2f 30 31 32 33 34 35 36  37 38 39 3a 3b 3c 3d 3e  |/0123456789:;&lt;=&gt;|
00000040  3f 40 41 42 43 44 45 46  47 48 49 4a 4b 4c 4d 4e  |?@ABCDEFGHIJKLMN|
00000050  4f 50 51 52 53 54 55 56  57 58 59 5a 5b 5c 5d 5e  |OPQRSTUVWXYZ[</span><span class="se">\]</span><span class="s2">^|
00000060  5f 60 61 62 63 64                                 |_</span><span class="sb">`</span>abcd|
00000066

<span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  08 01 08 02 08 03 08 04  08 05 08 06 08 07 08 08  |................|
00000010  08 09 08 0a 08 0b 08 0c  08 0d 08 0e 08 0f 08 10  |................|
00000020  08 11 08 12 08 13 08 14  08 15 08 16 08 17 08 18  |................|
00000030  08 19 08 1a 08 1b 08 1c  08 1d 08 1e 08 1f 08 20  |............... |
00000040  08 21 08 22 08 23 08 24  08 25 08 26 08 27 08 28  |.!.<span class="s2">".#.</span><span class="nv">$.</span><span class="s2">%.&amp;.'.(|
00000050  08 29 08 2a 08 2b 08 2c  08 2d 08 2e 08 2f 08 30  |.).*.+.,.-.../.0|
00000060  08 31 08 32 08 33 08 34  08 35 08 36 08 37 08 38  |.1.2.3.4.5.6.7.8|
00000070  08 39 08 3a 08 3b 08 3c  08 3d 08 3e 08 3f 08 40  |.9.:.;.&lt;.=.&gt;.?.@|
00000080  08 41 08 42 08 43 08 44  08 45 08 46 08 47 08 48  |.A.B.C.D.E.F.G.H|
00000090  08 49 08 4a 08 4b 08 4c  08 4d 08 4e 08 4f 08 50  |.I.J.K.L.M.N.O.P|
000000a0  08 51 08 52 08 53 08 54  08 55 08 56 08 57 08 58  |.Q.R.S.T.U.V.W.X|
000000b0  08 59 08 5a 08 5b 08 5c  08 5d 08 5e 08 5f 08 60  |.Y.Z.[.</span><span class="se">\.</span><span class="s2">].^._.</span><span class="sb">`</span>|
000000c0  08 61 08 62 08 63 08 64                           |.a.b.c.d|
000000c8
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 8e424a8d-fb25-4c95-8889-110441759dcb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;470F6C47&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 64 01 02 03 04 05 06 07 08 09 0A 0B 0C 0A 0E �d��������������
0000000000000010 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E ����������������
0000000000000020 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E � !"</span><span class="c">#$%&amp;'()*+,-.</span>
0000000000000030 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E /0123456789:<span class="p">;</span>&lt;<span class="o">=&gt;</span>
0000000000000040 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E ?@ABCDEFGHIJKLMN
0000000000000050 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E OPQRSTUVWXYZ[<span class="se">\]</span>^
0000000000000060 5F 60 61 62 63 64                               _<span class="sb">`</span><span class="s2">abcd

</span><span class="nv">$ </span><span class="s2">(Get-Content ./repeated.txt | protoc --encode=UnpackedRepeated proto/repeated.proto) -join "</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;6F5008AF&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 08 01 08 02 08 03 08 04 08 05 08 06 08 07 08 08 ����������������
0000000000000010 08 09 08 0A 08 0B 08 0C 08 0A 08 0E 08 0F 08 10 ����������������
0000000000000020 08 11 08 12 08 13 08 14 08 15 08 16 08 17 08 18 ����������������
0000000000000030 08 19 08 1A 08 1B 08 1C 08 1D 08 1E 08 1F 08 20 ���������������
0000000000000040 08 21 08 22 08 23 08 24 08 25 08 26 08 27 08 28 �!�"</span>�#�<span class="nv">$�</span>%�&amp;�<span class="s1">'�(
0000000000000050 08 29 08 2A 08 2B 08 2C 08 2D 08 2E 08 2F 08 30 �)�*�+�,�-�.�/�0
0000000000000060 08 31 08 32 08 33 08 34 08 35 08 36 08 37 08 38 �1�2�3�4�5�6�7�8
0000000000000070 08 39 08 3A 08 3B 08 3C 08 3D 08 3E 08 3F 08 40 �9�:�;�&lt;�=�&gt;�?�@
0000000000000080 08 41 08 42 08 43 08 44 08 45 08 46 08 47 08 48 �A�B�C�D�E�F�G�H
0000000000000090 08 49 08 4A 08 4B 08 4C 08 4D 08 4E 08 4F 08 50 �I�J�K�L�M�N�O�P
00000000000000A0 08 51 08 52 08 53 08 54 08 55 08 56 08 57 08 58 �Q�R�S�T�U�V�W�X
00000000000000B0 08 59 08 5A 08 5B 08 5C 08 5D 08 5E 08 5F 08 60 �Y�Z�[�\�]�^�_�`
00000000000000C0 08 61 08 62 08 63 08 64                         �a�b�c�d
</span></code></pre></div></div>
</li></ul>
<p>you will get 102 bytes with the packed version and 200 with the unpacked one. Ouch!</p>
<h2 id="ill-never-use-codepacked--falsecode-so-whats-the-problem">I'll never use <code>packed = false</code>, so what's the problem?</h2>
<p>As of now, we were using an example that would probably never appear in real life. So now, it's time to get back in touch with reality. Let's say that instead of storing as <code>int32</code> you want to store your ids as strings. To test that, we can create a Simple message called <code>Repeated</code> with a repeated string field.</p>
<ul class="code-tab-container 1d9c3eb4-63e7-43b5-b800-e4815ed95e80"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '1d9c3eb4-63e7-43b5-b800-e4815ed95e80', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher 1d9c3eb4-63e7-43b5-b800-e4815ed95e80"><li class="code_switcher_container_parent active-tab code_switcher_proto 7f4d5e92-9e76-478c-b3a9-a37b3130cd65"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('7f4d5e92-9e76-478c-b3a9-a37b3130cd65')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Repeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and change our text file to specify string values.</p>
<ul class="code-tab-container 98af3ee0-2413-4893-b11d-d69885645926"><li class="active-tab code_switcher_yaml"><a onclick="selectTab('code_switcher_yaml', '98af3ee0-2413-4893-b11d-d69885645926', 0)">repeated.txt</a></li></ul><ul class="code-tab-switcher 98af3ee0-2413-4893-b11d-d69885645926"><li class="code_switcher_container_parent active-tab code_switcher_yaml a40ae8a0-bdc7-4ba9-8229-c03936a8cc57"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('a40ae8a0-bdc7-4ba9-8229-c03936a8cc57')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1"</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
</code></pre></div></div>
</li></ul>
<p>After that, we are familiar how to encode that, we can just change the <code>--encode</code> flag value to <code>Repeated</code>.</p>
<ul class="code-tab-container 8e65c221-8f7a-497d-8c0c-36763b316470"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '8e65c221-8f7a-497d-8c0c-36763b316470', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '8e65c221-8f7a-497d-8c0c-36763b316470', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 8e65c221-8f7a-497d-8c0c-36763b316470"><li class="code_switcher_container_parent active-tab code_switcher_shell df2c4cce-191f-4de0-a7c6-c81ea2b457cf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>Repeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 01 31 0a 01 32 0a 01  33                       |..1..2..3|
00000009
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell f61ec355-d9e1-4c98-8f15-a0c4725913e5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>Repeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex

   Label: String (System.String) &lt;7AB0A992&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 01 31 0A 01 32 0A 01 33                      ��1��2��3
</span></code></pre></div></div>
</li></ul>
<p>Does it look familiar to you? Yes, we are interleaving <code>0A</code> (length-delimited type with tag 1) with the values (two bytes, <code>01</code> is the length and <code>31</code>, <code>32</code>, <code>33</code> are the ASCII values for <code>1</code>, <code>2</code>, <code>3</code>).</p>
<p>This is basically showing us that, even though repeated fields are packed by default, some types cannot be packed. This is the case for the following types:</p>
<ul>
<li><code>bytes</code></li>
<li><code>string</code></li>
<li>User defined Types (messages)</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>The overall idea of this post was to explain that some types are not 'packable' when used in repeated fields. Simple types like varints and other numbers can be packed but more complex types cannot. This can cause performance problems and this can even result in poor performance compared to JSON. So the thing to keep in mind when using repeated field is that we should mostly use it with numbers. For other types, use <code>repeated</code> with caution.</p>
<p><strong>If you find this kind of article interesting or you would like me to cover some topic on Protobuf or gRPC, be sure to let me know in the comments.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[As this is a common and not well documented mistake that developers are doing, I decided to do a post explaining the problem that you might face when using repeated fields in your Protobuf messages.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://clement-jean.github.io/images/box.jpg" /><media:content medium="image" url="https://clement-jean.github.io/images/box.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">gRPC Go Server Embeddings</title><link href="https://clement-jean.github.io/grpc_go_embeddings/" rel="alternate" type="text/html" title="gRPC Go Server Embeddings" /><published>2022-12-10T00:00:00+08:00</published><updated>2022-12-10T00:00:00+08:00</updated><id>https://clement-jean.github.io/grpc_go_embeddings</id><content type="html" xml:base="https://clement-jean.github.io/grpc_go_embeddings/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>One of the common thing that my students are asking about recently is the difference between 2 Type Embeddings when your are defining a Server type for Service Registration. While this is an important topic, the gRPC doc seems to only mention that the <code>Unimplemented</code> version is for Forward Compatibility, and my course, up until now, uses the name of the generated Service Server directly. As such, I thought I would give an explanation on why I now recommend to use <code>Unimplemented</code> and some examples of the 3 Type Embeddings that you can use.</p>
<h2 id="type-embedding">Type Embedding</h2>
<p>One thing that might not be clear for everyone is what is a Type Embedding and why we need it in gRPC. The first thing to understand is that Go is a language that uses composition instead of inheritance. And if you don't know about Composition or you just want a refresher, you friend Wikipedia is here: <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Composition over Inheritance</a>.</p>
<p>On top of composition, Go allows anonymous fields in a struct. While I think anonymous field is a misnomer because the field can be referenced by the type name, these provide a shorter way (no need for Identifier) of writing composition. Let's take an example:</p>
<div class="code_switcher_container_parent 2a798b09-5b4b-4942-a551-7271fe61124e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">A</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">s</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">B</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">s</span> <span class="kt">string</span>
	<span class="n">A</span> <span class="c">// no identifier here, just a type</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">b</span> <span class="n">B</span>

	<span class="n">b</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">"Test"</span>
	<span class="n">b</span><span class="o">.</span><span class="n">A</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">"Another Test"</span> <span class="c">// notice that we can access A even if it's 'anonymous'</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>In this example, we augmented <code>B</code> with the fields defined in <code>A</code>. The ouput of this program should be something like: <code>{Test {Another Test}}</code> where the outter object is <code>B</code> and the inner object is <code>A</code>.</p>
<p>So in the end this is just a convenient way of writing composition.</p>
<h2 id="grpc-go">gRPC Go</h2>
<p>Now, that we are clear on what is a Type Embedding, we can talk about its role in gRPC. As we know the protoc compiler will generate some code for our services, and we also know that services are contracts between a server and client. So basically, because we have a contract we need to make sure that this is implemented on both side of the wire.</p>
<p>So if we define a dummy service:</p>
<div class="code_switcher_container_parent e5ecd4ba-9a08-4e0a-a351-3ae92cb2f949"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">DummyService</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
</div>
<p>And we generate our code:</p>
<div class="code_switcher_container_parent 26aa9c79-f046-418e-a247-79d1746b027d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--grpc-go_out</span><span class="o">=</span><span class="nb">.</span> dummy.proto 
</code></pre></div></div>
</div>
<p>We have the following generated server code (simplified):</p>
<div class="code_switcher_container_parent e65f0abc-4b97-45f0-b2c0-2ee8dc39e402"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// DummyServiceServer is the server API for DummyService service.</span>
<span class="c">// All implementations must embed UnimplementedDummyServiceServer</span>
<span class="c">// for foward compatibility</span>
<span class="k">type</span> <span class="n">DummyServiceServer</span> <span class="k">interface</span> <span class="p">{</span>
	<span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span>
<span class="p">}</span>

<span class="c">// UnimplementedDummyServiceServer must be embedded to have forward compatible implementations.</span>
<span class="k">type</span> <span class="n">UnimplementedDummyServiceServer</span> <span class="k">struct</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">UnimplementedDummyServiceServer</span><span class="p">)</span> <span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span> <span class="p">{}</span>

<span class="c">// UnsafeDummyServiceServer may be embedded to opt out of forward compatibility for this service.</span>
<span class="c">// Use of this interface is not recommended, as added methods to DummyServiceServer will</span>
<span class="c">// result in compilation errors.</span>
<span class="k">type</span> <span class="n">UnsafeDummyServiceServer</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>First, we can notice a <code>mustEmbedUnimplementedDummyServiceServer</code> function. While I'm not entirely sure what this is doing since I can still compile without the <code>Unimplemented</code> embedding, I read on <a href="https://github.com/grpc/grpc-go/issues/3794">Issue 3794</a> that <code>RegisterDummyService</code> will require (probrably in the future) the Server to embed the <code>UnimplementedDummyServiceServer</code>.</p>
<p>Then, as mentionned in the <code>DummyServiceServer</code> documentation, this is the server API. This means that when we add rpc endpoints to our service in the .proto file, methods will be generated into that interface.</p>
<p>The second type will always be empty. However, once we add rpc endpoints, a method will be added to this type and this method will simply return a gRPC error.</p>
<p>And finally, the last type will stay as is and no methods will be added to it.</p>
<h2 id="servicenameserver">${ServiceName}Server</h2>
<p>This is the type embedding I used in my course. However, this is a mistake to use this directly. Let's see why.</p>
<p>Let's first add a rpc endpoint to our DummyService, this will help when we actually want to see the difference between the type embeddings by calling an endpoint.</p>
<div class="code_switcher_container_parent 670afafc-52f7-4dcc-83f8-f41d3b377eb7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google/protobuf/empty.proto"</span><span class="p">;</span>

<span class="kd">service</span> <span class="n">DummyService</span> <span class="p">{</span>
	<span class="k">rpc</span> <span class="n">GetDummy</span><span class="p">(</span><span class="n">google.protobuf.Empty</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">google.protobuf.Empty</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Then our Server type will look like this:</p>
<div class="code_switcher_container_parent f0ecd9c0-6ec1-45ba-a7fc-27cc3e0dcb8f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="k">struct</span> <span class="n">Server</span> <span class="p">{</span>
	<span class="n">DummyServiceServer</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>So, right now, we didn't implement <code>GetDummy</code> rpc endpoint. What happens if we try to call it ? The server runs perfectly, no compilation error, but once you call the rpc endpoint it will panic. This is where this type embedding is not Forward Compatible because an service which doesn't have a complete implementation of our service might cause a panic when comunicating with one that has the implementation.</p>
<h2 id="unsafeservicenameserver">Unsafe${ServiceName}Server</h2>
<p>Let's skip the <code>Unimplemented</code> for now and let's take a look at the <code>Unsafe</code> type emdeding. Before explaining it though, I want to mention two things:</p>
<ul>
<li><code>Unsafe</code> sounds really bad. However in some specific cases, this embedding might actually be useful.</li>
<li>The type documentation says that this type is not recommended, but once again, be aware that it might be useful.</li>
</ul>
<p>With that said, let's get started. Let's replace our type embedding:</p>
<div class="code_switcher_container_parent 8e304ce3-3162-4721-a464-fd8c3b788e2e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="k">struct</span> <span class="n">Server</span> <span class="p">{</span>
	<span class="n">UnsafeDummyServiceServer</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>In this case, calling an unimplemented endpoint will also result in a panic at runtime, but the main difference here is that this types embedding will help you to catch the unimplemented endpoints at compile time. This means that each time you add a rpc endpoint it will force you to implement it in your Go code. I actually like that approach more but the problem of panic at runtime is still here.</p>
<p>So in most of cases this is something you will not use because this is similar to the previous type embedding we showed. It will panic at runtime if a rpc endpoint is not defined. However, if you can control all your clients and servers, meaning that you can update all of them at the same time (and for eternity), this type embedding is actually safer (ironic, right ?) because it helps you to discover all the unimplemented rpc endpoint in your service at compile time.</p>
<h2 id="unimplementedservicenameserver">Unimplemented${ServiceName}Server</h2>
<p>And now, here is the one that you should use in most of the cases. This type embedding, as mentionned earlier will get a default implementation for all rpc endpoint added in the service. This means that for the service that we defined earlier, we are going to have the following method generated:</p>
<div class="code_switcher_container_parent aa7a390f-7d71-4abf-a45b-fe86cec2d98a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">UnimplementedDummyServiceServer</span><span class="p">)</span> <span class="n">GetDummy</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="o">*</span><span class="n">emptypb</span><span class="o">.</span><span class="n">Empty</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">emptypb</span><span class="o">.</span><span class="n">Empty</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">status</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Unimplemented</span><span class="p">,</span> <span class="s">"method GetDummy not implemented"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>And now we basically have Forward Compatibility because if a service without full implementation is called, it will just return a gRPC error and will not panic.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, you might have use cases where you actually need <code>Unsafe</code> type embedding but most of the time use the <code>Unimplemented</code> one. As for the other type embedding, forget it, there is no advantage in using it, only disadvantages. I hope this was helpful and see you in the next post.</p>]]></content><author><name>Clement</name></author><category term="gRPC" /><category term="Go" /><summary type="html"><![CDATA[One of the common thing that my students are asking about recently is the difference between 2 Type Embeddings when your are defining a Server type for Service Registration. While this is an important topic, the gRPC doc seems to only mention that the Unimplemented version is for Forward Compatibility, and my course, up until now, uses the name of the generated Service Server directly. As such, I thought I would give an explanation on why I now recommend to use Unimplemented and some examples of the 3 Type Embeddings that you can use.]]></summary></entry><entry><title type="html">Protocol Buffers varint vs fixed</title><link href="https://clement-jean.github.io/protobuf-varint-vs-fixed/" rel="alternate" type="text/html" title="Protocol Buffers varint vs fixed" /><published>2022-10-02T00:00:00+08:00</published><updated>2022-10-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/protobuf-varint-vs-fixed</id><content type="html" xml:base="https://clement-jean.github.io/protobuf-varint-vs-fixed/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>This article is much more a note to myself than something else but this might be interesting for people out there.</p>
<p>I wanted to calculate the thresholds at which it is better it is to use a <code>fixed</code> rather than a varint. <!--desc--> Now, knowing that the varint are encoded in base 128, this basically means that we are dealing with power of 128. This gives us the following table:</p>
<div class="table-responsive">
<table class="table table-striped table-borderless">
  <thead>
    <tr>
      <th scope="col" class="text-center">Threshold value</th>
      <th scope="col" class="text-center">Bytes size (without tag)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row" class="text-center">0</th>
      <td class="text-center">0</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">1</th>
      <td class="text-center">1</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">128</th>
      <td class="text-center">2</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">16,384</th>
      <td class="text-center">3</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">2,097,152</th>
      <td class="text-center">4</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">268,435,456</th>
      <td class="text-center">5</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">34,359,738,368</th>
      <td class="text-center">6</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">4,398,046,511,104</th>
      <td class="text-center">7</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">562,949,953,421,312</th>
      <td class="text-center">8</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">72,057,594,037,927,936</th>
      <td class="text-center">9</td>
    </tr>
  </tbody>
</table>
</div>
<p>In summary:</p>
<ul>
<li>From 268,435,456 to whatever limit you 32 bits type has, it is better to use a <code>fixed32</code>.</li>
<li>From 72,057,594,037,927,936 to whatever limit you 64 bits type has, it is better to use a <code>fixed64</code>.</li>
</ul>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[This article is much more a note to myself than something else but this might be interesting for people out there. I wanted to calculate the thresholds at which it is better it is to use a fixed rather than a varint.]]></summary></entry><entry><title type="html">Storing Colors in Protocol Buffers</title><link href="https://clement-jean.github.io/storing_color_in_pb/" rel="alternate" type="text/html" title="Storing Colors in Protocol Buffers" /><published>2022-06-02T00:00:00+08:00</published><updated>2022-06-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/storing_color_in_pb</id><content type="html" xml:base="https://clement-jean.github.io/storing_color_in_pb/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>While working on a new course, I was looking for an example to store a Color in Protocol Buffers. At first this seemed like an easy task but it turned out to be an interesting example of optimization. Let's work through it.</p>
<h2 id="quick-requirements">Quick Requirements</h2>
<p>In order to define what's the most optimal message definition that we come with, we need a way to calculate the serialized size of that message. Fortunately, doing so is pretty easy with Protocol Buffers.</p>
<ul class="code-tab-container ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 0)">Python</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 1)">Java</a></li><li class=" code_switcher_kotlin"><a onclick="selectTab('code_switcher_kotlin', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 2)">Kotlin</a></li><li class=" code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 3)">Go</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 4)">C#</a></li><li class=" code_switcher_js"><a onclick="selectTab('code_switcher_js', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 5)">JS</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b', 6)">C++</a></li></ul><ul class="code-tab-switcher ef5c49f8-3bea-4fee-9f8a-9c2c5725d44b"><li class="code_switcher_container_parent active-tab code_switcher_python 452234ff-fe43-4b79-b035-d1fedb983194"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('452234ff-fe43-4b79-b035-d1fedb983194')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_size</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">SerializeToString</span><span class="p">())</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 7b7b0698-413d-4009-bf79-2410b41ea2a2"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('7b7b0698-413d-4009-bf79-2410b41ea2a2')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.Message</span><span class="o">;</span>

<span class="kt">int</span> <span class="nf">calculateSize</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">getSerializedSize</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_kotlin 71108f6a-9c38-4071-a7f8-257870a5405e"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('71108f6a-9c38-4071-a7f8-257870a5405e')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">com.google.protobuf.Message</span>

<span class="k">fun</span> <span class="nf">calculateSize</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">Message</span><span class="p">)</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">serializedSize</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_go 2e68331a-dccc-490a-bc6e-83cd2c0c3c20"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2e68331a-dccc-490a-bc6e-83cd2c0c3c20')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google.golang.org/protobuf/proto"</span>

<span class="k">func</span> <span class="n">calculateSize</span><span class="p">(</span><span class="n">message</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
  <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Failed to encode:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 43decea3-fee5-4829-a519-bd5e31652cfe"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('43decea3-fee5-4829-a519-bd5e31652cfe')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Google.Protobuf</span>

<span class="kt">int</span> <span class="nf">CalculateSize</span><span class="p">(</span><span class="n">IMessage</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">message</span><span class="p">.</span><span class="nf">CalculateSize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_js bf838319-d330-419e-9227-11a881505027"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('bf838319-d330-419e-9227-11a881505027')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">calculateSize</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">message</span><span class="p">.</span><span class="nx">serializeBinary</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 3ab3f725-1989-4a6b-9c6b-82fed7478817"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('3ab3f725-1989-4a6b-9c6b-82fed7478817')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;google/protobuf/message.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">calculate_size</span><span class="p">(</span><span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Message</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">out</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">serialized</span> <span class="o">=</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">SerializeToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">serialized</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

  <span class="k">return</span> <span class="n">out</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="a-primitive-implementation">A primitive implementation</h2>
<p>When I see something like <code>#FFFFFFFF</code> or <code>#00000000</code> (RGBA), I directly think about two things:</p>
<ul>
<li>The human readable solution: <code>string</code></li>
<li>The non human readable solution: <code>int32</code> or <code>int64</code></li>
</ul>
<p>Let's try with the string and work our way through, here is the proto file we are gonna use:</p>
<div class="code_switcher_container_parent bddc0035-9bce-4c98-b716-99f0a60fc89d"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('bddc0035-9bce-4c98-b716-99f0a60fc89d')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">java_package</span> <span class="o">=</span> <span class="s">"com.example"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">java_multiple_files</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"example.com/m"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">csharp_namespace</span> <span class="o">=</span> <span class="s">"Example"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>and here is the code that calculates the size for <code>Color</code> with value <code>#FFFFFFFF</code> (max color value):</p>
<ul class="code-tab-container a0353855-d593-4fb4-bf4b-d3b463d8af06"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 0)">Python</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 1)">Java</a></li><li class=" code_switcher_kotlin"><a onclick="selectTab('code_switcher_kotlin', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 2)">Kotlin</a></li><li class=" code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 3)">Go</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 4)">C#</a></li><li class=" code_switcher_js"><a onclick="selectTab('code_switcher_js', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 5)">JS</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'a0353855-d593-4fb4-bf4b-d3b463d8af06', 6)">C++</a></li></ul><ul class="code-tab-switcher a0353855-d593-4fb4-bf4b-d3b463d8af06"><li class="code_switcher_container_parent active-tab code_switcher_python e0b7b498-ba8b-43c5-bdc2-63c5bb265051"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('e0b7b498-ba8b-43c5-bdc2-63c5bb265051')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">proto.color_pb2</span> <span class="k">as</span> <span class="n">pb</span>

<span class="k">print</span><span class="p">(</span><span class="n">calculate_size</span><span class="p">(</span><span class="n">pb</span><span class="p">.</span><span class="n">Color</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"FFFFFFFF"</span><span class="p">)))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 44119195-5d51-4631-bd67-001e3ee3fe23"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('44119195-5d51-4631-bd67-001e3ee3fe23')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.example.Color</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calculateSize</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setValue</span><span class="o">(</span><span class="s">"FFFFFFFF"</span><span class="o">).</span><span class="na">build</span><span class="o">()));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_kotlin eea8eb0a-16dc-461d-ba9a-182128fae2c8"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('eea8eb0a-16dc-461d-ba9a-182128fae2c8')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">com.example.color</span>

<span class="nf">println</span><span class="p">(</span><span class="nf">calculateSize</span><span class="p">(</span><span class="nf">color</span> <span class="p">{</span> <span class="n">value</span> <span class="p">=</span> <span class="s">"FFFFFFFF"</span> <span class="p">}))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_go fa874ce9-769d-47a0-b567-29f3de8e219f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('fa874ce9-769d-47a0-b567-29f3de8e219f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="n">pb</span> <span class="s">"example.com/m"</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">calculateSize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">Color</span><span class="p">{</span><span class="n">Value</span><span class="o">:</span> <span class="s">"FFFFFFFF"</span><span class="p">}))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 67928621-c354-457f-9341-5584419750c7"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('67928621-c354-457f-9341-5584419750c7')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Example</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="nf">CalculateSize</span><span class="p">(</span><span class="k">new</span> <span class="n">Color</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">"FFFFFFFF"</span> <span class="p">}));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_js 814dc29b-cbfd-4bdf-8f48-f2d7412767a9"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('814dc29b-cbfd-4bdf-8f48-f2d7412767a9')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">Color</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./proto/color_pb</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculateSize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Color</span><span class="p">().</span><span class="nx">setValue</span><span class="p">(</span><span class="dl">"</span><span class="s2">FFFFFFFF</span><span class="dl">"</span><span class="p">)));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 70cfd17d-dcc4-43d9-a8c3-bb1ac010f72a"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('70cfd17d-dcc4-43d9-a8c3-bb1ac010f72a')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"color.pb.h"</span><span class="cp">
</span>
<span class="n">Color</span> <span class="n">color</span><span class="p">;</span>

<span class="n">color</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">"FFFFFFFF"</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">calculate_size</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>
</li></ul>
<p>And that should give us a 10 bytes serialization, because this will be encoded as the following:</p>
<p class="text-center h4">
  <span style="color: blue">0a</span>
  <span style="color: red">08</span>
  <span style="color: green">46 46 46 46 46 46 46 46</span>
</p>
<p>where:</p>
<p>🔵 blue: is the combinaison between field tag and field type in one byte (read more <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure">here</a>). In our case our tag is 1 and the type is what's called <code>Length-delimited</code>.</p>
<p>🔴 red: is the size of the <code>Length-delimited</code> field, here 8.</p>
<p>🟢 green: is the <code>Length-delimited</code> field value. Here 46 is F (you can type <code>man ascii</code> and have a look at the Hexadecimal set).</p>
<h2 id="lets-optimize-that">Let's optimize that</h2>
<p>As mentioned earlier, the other way to solve that is to store the value in an integer. So let's check the decimal value of the biggest color that we can get, which is <code>FFFFFFFF</code>.</p>
<ul class="code-tab-container aa3f6059-a56f-4f6e-8991-b21e9cb38d91"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'aa3f6059-a56f-4f6e-8991-b21e9cb38d91', 0)">Linux/Mac</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'aa3f6059-a56f-4f6e-8991-b21e9cb38d91', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher aa3f6059-a56f-4f6e-8991-b21e9cb38d91"><li class="code_switcher_container_parent active-tab code_switcher_shell d6373b58-2495-4b47-ac7d-0c532a8fd7ee"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d6373b58-2495-4b47-ac7d-0c532a8fd7ee')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"ibase=16; FFFFFFFF"</span> | bc
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 93a2f0f4-7226-4228-81a9-0faaa928c803"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('93a2f0f4-7226-4228-81a9-0faaa928c803')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>convert]::toint64<span class="o">(</span><span class="s2">"FFFFFFFF"</span>, 16<span class="o">)</span>
</code></pre></div></div>
</li></ul>
<p>and this gives us: <strong>4,294,967,295</strong>. Sounds like this gonna fit inside an <code>int32</code> or even an <code>uint32</code> if we wanted to make class instantiation safer (not letting user enter negative value). So we now have:</p>
<div class="code_switcher_container_parent 1f2a6b52-a1ba-4674-a770-411ccf0348b6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>and by using the same code for calculating the size we obtain: <strong>6 bytes</strong>.</p>
<h2 id="a-step-further">A step further</h2>
<p>Let's take a look at a table that I made for another post.</p>
<div class="table-responsive">
<table class="table table-striped table-borderless">
  <thead>
    <tr>
      <th scope="col" class="text-center">Threshold value</th>
      <th scope="col" class="text-center">Bytes size (without tag)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row" class="text-center">0</th>
      <td class="text-center">0</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">1</th>
      <td class="text-center">1</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">128</th>
      <td class="text-center">2</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">16,384</th>
      <td class="text-center">3</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">2,097,152</th>
      <td class="text-center">4</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">268,435,456</th>
      <td class="text-center">5</td>
    </tr>
  </tbody>
</table>
</div>
<p>This table presents the field value thresholds and the bytes size for serialization of <code>uint32</code>. Can you see the problem here ? <strong>4,294,967,295</strong> is simply bigger than <strong>268,435,456</strong> and what it means is that, our value of <code>FFFFFFFF</code> will be serialized to 5 bytes.</p>
<p>Do we know another type that could help us serialize in less bytes? Sure we do! We know that <code>fixed32</code> is an unsigned integer and it will always be serialized to 4 bytes. So we if change to:</p>
<div class="code_switcher_container_parent 37abd783-01c8-4fd6-8a07-9672d8fdf722"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">fixed32</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>the value <code>FFFFFFFF</code> will be serialized into:</p>
<p class="text-center h4">
  <span style="color: blue">0d</span>
  <span style="color: green">ff ff ff ff</span>
</p>
<p>and we are done!</p>
<h2 id="wait-a-minute-">Wait a minute ...</h2>
<p>This seems to vary with our data/color distribution, isn't it ?</p>
<div class="text-center">
  <img src="/images/threshold_color.png" alt="Threshold color between uint32 and fixed32">
</div>
<p>It varies. However you can see the number of colors that can be efficiently serialized with a <code>uint32</code> is pretty small. The dots here represent the threshold that I showed in the table presented in &quot;A step further&quot; and here we can see that the threshold at <strong>2,097,152</strong> or <code>001FFFFF</code> is where it becomes efficient to store with a <code>fixed32</code>.</p>
<p>Let's calculate the percentage of colors that can be efficiently stored with an <code>uint32</code>.</p>
<p class="text-center h4">
  (<span style="color: blue">2097152</span> / <span style="color: red">4294967295</span>) * 100 ~= 0.05
</p>
<p>where:</p>
<p>🔵 blue: is the threshold at which it becomes more optimal to save with <code>fixed32</code>.</p>
<p>🔴 red: biggest number that we can have (<code>FFFFFFFF</code>).</p>
<p>So in conclusion only 0.05% of the possible numbers will be not optimally serialized. I think we can agree on the fact that is acceptable.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Protocol Buffers are providing us with a lot of types for numbers, and choosing the right one is important for optimizing you payload or serialized data size. If you want to know more about how to choose between them, you might consider joining <a href="https://www.udemy.com/course/protocol-buffers/?referralCode=CB382B4ED9936D6C6193">my Udemy course</a> on Protocol Buffers.</p>
<p>Hope you enjoyed this article, I will be glad to get some feedback on this. Especially if you find a more efficient way to serialize this data. Check the about page to find all the ways you can us for reaching to me.</p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[While working on a new course, I was looking for an example to store a Color in Protocol Buffers. At first this seemed like an easy task but it turned out to be an interesting example of optimization. Let's work through it.]]></summary></entry><entry><title type="html">Code Download for gRPC Course (C#)</title><link href="https://clement-jean.github.io/code_download_for_grpc_csharp/" rel="alternate" type="text/html" title="Code Download for gRPC Course (C#)" /><published>2022-02-07T00:00:00+08:00</published><updated>2022-02-07T00:00:00+08:00</updated><id>https://clement-jean.github.io/code_download_for_grpc_csharp</id><content type="html" xml:base="https://clement-jean.github.io/code_download_for_grpc_csharp/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>For student taking my class on gRPC C# (Udemy), here is the way to get the code.</p>
<h2 id="getting-the-code">Getting the code</h2>
<p>In order to get the code for this course, you can simply go to <a href="https://github.com/Clement-Jean/grpc-csharp-course">the github repository</a> and clone it.</p>
<p>You can also directly clone it in your terminal:</p>
<div class="code_switcher_container_parent 116b4dc9-ffb2-45be-9919-2b0eacb51586"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:Clement-Jean/grpc-csharp-course.git
</code></pre></div></div>
</div>
<h2 id="contributing">Contributing</h2>
<p>I value any input you my have on this repository:</p>
<ul>
<li>Typo</li>
<li>Code optimization</li>
<li>Code Deprecation</li>
<li>...</li>
</ul>
<p><strong>You can do a Pull Request if you think that your input can help the community</strong>.</p>
<h2 id="more">More</h2>
<p>I also value any other kind of input, such as :star: on the repo or fork.</p>
<p>Finally, do not hesitate to contact me. <strong>You can find my email address <a href="https://clement-jean.github.io/about/">here</a></strong>.</p>]]></content><author><name>Clement</name></author><category term="gRPC" /><category term="C#" /><category term="Udemy" /><summary type="html"><![CDATA[For student taking my class on gRPC C# (Udemy), here is the way to get the code.]]></summary></entry><entry><title type="html">If Modified Since for Redis</title><link href="https://clement-jean.github.io/if_modified_since_for_redis/" rel="alternate" type="text/html" title="If Modified Since for Redis" /><published>2021-09-16T00:00:00+08:00</published><updated>2021-09-16T00:00:00+08:00</updated><id>https://clement-jean.github.io/if_modified_since_for_redis</id><content type="html" xml:base="https://clement-jean.github.io/if_modified_since_for_redis/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>Caching is everywhere! It is an essential part of most applications out there and so obviously there are a lot of options you can chose from. Here is a non exhaustive list:</p>
<ul>
<li><a href="https://redis.com">Redis</a></li>
<li><a href="http://memcached.org">Memcached</a></li>
<li>CDNs</li>
<li>and lot more</li>
</ul>
<p>And caching is very specific to the kind of data you are transfering (JSON, video, ...) and to your architecture.</p>
<p><strong>That's a lot of choices to make !</strong></p>
<p>At <a href="http://educationforethiopia.org">E4E</a>, since we are a stratup we can't take the risk to over engineer this. I will cost us time, money and make our architecture way harder to maintain. So we developed a simple <a href="https://github.com/Clement-Jean/RedisIMS">Redis plugin</a> to help us with caching.</p>
<h2 id="background">Background</h2>
<p>As I said, caching is very specific to your solution, there is no One size fits all solution. So let's see what our solution is providing first.</p>
<p>At E4E we provide educational video content for students in Ethiopia through an native Android app called <a href="https://play.google.com/store/apps/details?id=com.e4e.saquama">Saquama</a>. Every video comes with some metadata like: Title, Description and all the relational part that comes with it. For this article we are focusing on these metadata because videos are already taken care of by a CDN.</p>
<h2 id="what-about-the-plugin">What about the plugin?</h2>
<p>RedisIMS standing for Redis If Modified Since (very creative, isn't it ?), provides a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since">HTTP protocol's If Modified Since Header</a> like experience. This basically means that we have a timestamp saying when our metadata about a certain video changed. We can then compare this timestamp with the one sent by the client and returns a value accordingly.</p>
<h3 id="how-does-that-work--technically-i-mean">How does that work ? Technically I mean.</h3>
<p>This plugin is heavily influenced by the following Lua code in this <a href="https://blog.r4um.net/2021/redis-mtime-getset/#:~:text=Redis%20server%20side%20if-modified-since%20caching%20pattern%20using%20lua,can%20save%20significant%20network%20bandwidth%20and%20compute%20cycles.">article</a>. The process consist in the following actions:</p>
<ul>
<li>
<p>When caching some data, the plugin will do a HSET of the key defined in the plugin, the data and the timestamp.</p>
</li>
<li>
<p>When getting cached data, the plugin will use HGET with the key defined and the timestamp.</p>
<ul>
<li>If the data doesn't exist, return NULL</li>
<li>If the data exists and the timestamp is bigger or equal than the cached one, we return NULL</li>
<li>and If the timestamp is smaller than the cached one, we return the cached data</li>
</ul>
</li>
</ul>
<h2 id="an-example">An example</h2>
<figure class="highlight"><pre><code class="language-shell" data-lang="shell">redisims.exists MY_NON_EXISTING_KEY -&gt; 0 
redisims.get MY_NON_EXISTING_KEY TIMESTAMP -&gt; NULL

redisims.set MY_EXISTING_KEY THE_VALUE THE_TIMESTAMP
redisims.exists MY_EXISTING_KEY -&gt; 1

redisims.get MY_EXISTING_KEY OUTDATED_TIMESTAMP -&gt; YOUR_OBJECT
redisims.get MY_EXISTING_KEY CURRENT_TIMESTAMP -&gt; NULL</code></pre></figure>
<h2 id="interested-">Interested ?</h2>
<p>If you feel like contributing to the project or just trying it, head up to the <a href="https://github.com/Clement-Jean/RedisIMS">Github repository</a>.</p>
<p>And finnaly if you have any constructive feedback, feel free to reach me by checking the contact page of either my <a href="https://github.com/Clement-Jean">Github profile</a> or the <a href="https://clement-jean.github.io/about/">about page of the website</a></p>]]></content><author><name>Clement</name></author><category term="Redis" /><summary type="html"><![CDATA[Caching is everywhere! It is an essential part of most applications out there and so obviously there are a lot of options you can chose from. Here is a non exhaustive list:]]></summary></entry><entry><title type="html">Value Matchers in Expresso Intents</title><link href="https://clement-jean.github.io/value_matchers_in_espresso_intents/" rel="alternate" type="text/html" title="Value Matchers in Expresso Intents" /><published>2021-02-15T00:00:00+08:00</published><updated>2021-02-15T00:00:00+08:00</updated><id>https://clement-jean.github.io/value_matchers_in_espresso_intents</id><content type="html" xml:base="https://clement-jean.github.io/value_matchers_in_espresso_intents/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>After the decision of using <a href="https://firebase.google.com/docs/crashlytics">Crashlytics</a> for our first pilot (<a href="https://www.educationforethiopia.org/">Education for ethopia</a>), the tech team discovered that one particular crash was redundant. This crash was due to a malformed Intent between the video player in portrait mode and the video player in landscape mode.</p>
<h2 id="context">Context</h2>
<p>To understand a little bit more about the problem faced later, I want to describe briefly how this transition of video player mode is working for us.</p>
<h3 id="portraitactivity">PortraitActivity</h3>
<p>This activity handles the playlist of videos and the video player (we use <a href="https://exoplayer.dev">ExoPlayer</a>).</p>
<h3 id="landscapeactivity">LandscapeActivity</h3>
<p>This activity handles only the video player and has a locked screenOrientation in the AndroidManifest:</p>
<div class="code_switcher_container_parent 713f6ca3-4d4e-424e-9c34-b6a6719cdf1c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>android:screenOrientation="landscape"
</code></pre></div></div>
</div>
<h3 id="the-behavior">The behavior</h3>
<p>Our expected behavior is that depending on 3 attributes of the player (currentPosition, currentMediaItem.mediaId, isPlaying), the user find the video in the same state switching from Portrait to Landscape or from Landscape to Portrait.</p>
<h2 id="testing">Testing</h2>
<p>Now, because we had this redundant crash, we decided to do like all the good engineers: testing. With that we would then be able to prevent these crashes to ever happen again in the future.</p>
<p>For that, we used the <a href="https://developer.android.com/training/testing/espresso/intents">Espresso Intent extension</a> and basically check the extras passed between activities. To do that we did the following:</p>
<div class="code_switcher_container_parent 1ab93bac-2bb3-4744-966f-e04daf615ae0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">activityRule</span><span class="o">.</span><span class="na">scenario</span><span class="o">.</span><span class="na">onActivity</span> <span class="o">{</span>
    <span class="n">val</span> <span class="n">player</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">findViewById</span><span class="o">&lt;</span><span class="nc">PlayerView</span><span class="o">&gt;(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">player_view</span><span class="o">).</span><span class="na">player</span><span class="o">!!</span>

    <span class="n">player</span><span class="o">.</span><span class="na">pause</span><span class="o">()</span> <span class="c1">// pause the video</span>
    <span class="n">player</span><span class="o">.</span><span class="na">seekTo</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span> <span class="c1">// we seek to 1 sec from the beginning</span>
<span class="o">}</span>
<span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="no">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">change_activity</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">())</span>

<span class="n">intended</span><span class="o">(</span>
    <span class="n">allOf</span><span class="o">(</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">CURRENT_POSITION</span><span class="o">,</span> <span class="mi">1000L</span><span class="o">),</span> <span class="c1">// 1 sec</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">MEDIA_ID</span><span class="o">,</span> <span class="s">"A_VIDEO.mp4"</span><span class="o">),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">IS_PLAYING</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span> <span class="c1">// is not playing</span>
    <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
</div>
<p>pretty simple and pretty expressive code.</p>
<p>The real trouble came when we decided to test a video that is playing. The first problem came from ExoPlayer itself, we basically needed to wait that the video was in playing state before to even create the new activity. To do that we added a listener like the following:</p>
<div class="code_switcher_container_parent 3ed93739-1f3a-4679-b853-fcb3c7ab2c09"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">player</span><span class="o">.</span><span class="na">addListener</span><span class="o">(</span><span class="nl">object:</span> <span class="nc">Player</span><span class="o">.</span><span class="na">EventListener</span> <span class="o">{</span>
    <span class="n">override</span> <span class="n">fun</span> <span class="nf">onIsPlayingChanged</span><span class="o">(</span><span class="nl">playing:</span> <span class="nc">Boolean</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">isPlaying</span> <span class="o">=</span> <span class="n">playing</span>
    <span class="o">}</span>
<span class="o">})</span>
</code></pre></div></div>
</div>
<p>and we basically waited for <code>isPlaying</code> to change:</p>
<div class="code_switcher_container_parent 88389fa6-81ea-47fe-9b89-531b9995ae0c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="o">(!</span><span class="n">isPlaying</span> <span class="o">&amp;&amp;</span> <span class="n">deadline</span><span class="o">.</span><span class="na">isNotExceeded</span><span class="o">())</span> <span class="o">{}</span>
</code></pre></div></div>
</div>
<p>After that we were able to click our <code>full_screen_button</code> and we were ready to check our intents. In a naive attempte we wrote something like:</p>
<div class="code_switcher_container_parent 944c6c4d-5768-4158-a5d4-8ed803238f56"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">intended</span><span class="o">(</span>
    <span class="n">allOf</span><span class="o">(</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">CURRENT_POSITION</span><span class="o">,</span> <span class="n">greaterThanOrEqualTo</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)),</span> <span class="c1">// &gt;= 1000 because playing</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">MEDIA_ID</span><span class="o">,</span> <span class="s">"A_VIDEO.mp4"</span><span class="o">),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">IS_PLAYING</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
    <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
</div>
<p>And we thought &quot;yeah looks like it's gonna work&quot;. But after running our test, we received a ❌. We then decided to read the Logs and see what wouldn't match. I let you judge by yourself:</p>
<div class="code_switcher_container_parent c629aeff-5171-4158-996d-58c846ff1232"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IntentMatcher: <span class="o">(</span>has extras: has bundle with: key: is <span class="s2">"current_position"</span> value: is &lt;a value equal to or greater than &lt;1000L&gt;&gt; and has extras: has bundle with: key: is <span class="s2">"media_id"</span> value: is <span class="s2">"A_VIDEO.mp4"</span> and has extras: has bundle with: key: is <span class="s2">"is_playing"</span> value: is &lt;<span class="nb">true</span><span class="o">&gt;)</span>

Matched intents:[]

Recorded intents:
<span class="nt">-Intent</span> <span class="o">{</span> <span class="nv">cmp</span><span class="o">=</span>com.clementjean.unittest/.NewActivity <span class="o">(</span>has extras<span class="o">)</span> <span class="o">}</span> handling packages:[[com.clementjean.unittest]], extras:[Bundle[<span class="o">{</span><span class="nv">current_position</span><span class="o">=</span>1158, <span class="nv">media_id</span><span class="o">=</span>A_VIDEO.mp4, <span class="nv">is_playing</span><span class="o">=</span><span class="nb">true</span><span class="o">}]])</span>
</code></pre></div></div>
</div>
<p>Apparently the recorded intent is matching, we have a current_position &gt;= 1000, we have the right meta_id and the is_playing is set to true. Correct right?</p>
<p>After an hour of trying to debug that, we checked the documentation (we only scanned through it before) and we finally found what was the problem.</p>
<p>In the documentation of <a href="https://developer.android.com/reference/androidx/test/espresso/intent/matcher/IntentMatchers#hasExtra(org.hamcrest.Matcher%3Cjava.lang.String%3E,%20org.hamcrest.Matcher%3C?%3E)">Intent matchers</a>, we can see that there are two definitions of the function <code>hasExtra</code>:</p>
<div class="code_switcher_container_parent 700274f5-aff5-41ac-b127-16cfe1c1f191"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Matcher</span><span class="o">&lt;</span><span class="nc">Intent</span><span class="o">&gt;</span> <span class="nf">hasExtra</span> <span class="o">(</span><span class="nc">Matcher</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">keyMatcher</span><span class="o">,</span> <span class="nc">Matcher</span><span class="o">&lt;?&gt;</span> <span class="n">valueMatcher</span><span class="o">)</span>
</code></pre></div></div>
</div>
<p>and</p>
<div class="code_switcher_container_parent 0cf01f8f-76aa-4d05-8b6d-b786ed7516a1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Matcher</span><span class="o">&lt;</span><span class="nc">Intent</span><span class="o">&gt;</span> <span class="nf">hasExtra</span> <span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="no">T</span> <span class="n">value</span><span class="o">)</span>
</code></pre></div></div>
</div>
<p>Do you see the problem?</p>
<p>The problem is in that line <code>hasExtra(CURRENT_POSITION, greaterThanOrEqualTo(1000L))</code> because by using the string <code>CURRENT_POSITION</code>, we were actually using the second overload of the function and thus the value of our Intent extra was definitely not equal to value matcher <code>greaterThanOrEqualTo</code>.</p>
<p>To solve that we need to add the matcher <code>is()</code> around the string <code>CURRENT_POSITION</code> and we would then access the first definition of the matcher <code>hasExtra</code>. It gives us something like:</p>
<div class="code_switcher_container_parent b8b07c0e-2808-4fda-a415-1d042b7df6bc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">intended</span><span class="o">(</span>
    <span class="n">allOf</span><span class="o">(</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="err">`</span><span class="n">is</span><span class="err">`</span><span class="o">(</span><span class="no">CURRENT_POSITION</span><span class="o">),</span> <span class="n">greaterThanOrEqualTo</span><span class="o">(</span><span class="mi">1000L</span><span class="o">)),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">MEDIA_ID</span><span class="o">,</span> <span class="s">"A_VIDEO.mp4"</span><span class="o">),</span>
        <span class="n">hasExtra</span><span class="o">(</span><span class="no">IS_PLAYING</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span>
    <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
</div>
<h2 id="the-problem">The problem</h2>
<p>For me the problem is the impossibility for library designers to define a certain domain for the template parameter. Knowing that an intent only accept a restricted amount of types as extra, it would be great to have the possibility to only constraint the template to these types. This is however a language design problem and it might not be solved in a near future (if you are a language developer though, you might consider solving this).</p>
<h2 id="conclusion">Conclusion</h2>
<p><code>Beware function overloads</code></p>]]></content><author><name>Clement</name></author><category term="Android" /><summary type="html"><![CDATA[After the decision of using Crashlytics for our first pilot (Education for ethopia), the tech team discovered that one particular crash was redundant. This crash was due to a malformed Intent between the video player in portrait mode and the video player in landscape mode.]]></summary></entry><entry><title type="html">gRPC ‘mocking’</title><link href="https://clement-jean.github.io/grpc_do_not_mock/" rel="alternate" type="text/html" title="gRPC ‘mocking’" /><published>2020-03-09T00:00:00+08:00</published><updated>2020-03-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/grpc_do_not_mock</id><content type="html" xml:base="https://clement-jean.github.io/grpc_do_not_mock/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>After being used to the traditional way of debug an android app by using mocking and interceptors, I came across an interesting problem with gRPC. I wanted to do the same. Basically, add an interceptor that mock a server response.</p>
<p><strong>An important note: The app is in Kotlin, however this code I show is in Java. What I want to show here is that the concepts in gRPC are generally easily convertible to other languages. And even if you are actually coding in another supported language, you should be able to do pretty much the same</strong></p>
<p>I discovered that, of course, gRPC has interceptors, but I also discovered in my case I didn't need them. Let me explain here. After playing a little bit with the <a href="https://grpc.github.io/grpc-java/javadoc/io/grpc/ForwardingClientCall.SimpleForwardingClientCall.html">ForwardingClientCall.SimpleForwardingClientCall</a> class by inheriting it like <a href="https://github.com/grpc/grpc-java/blob/master/examples/src/test/java/io/grpc/examples/header/HeaderServerInterceptorTest.java">this</a>:</p>
<div class="code_switcher_container_parent 7c3661ce-17ea-4cd8-9230-092dc0d30be2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">serverHeaderDeliveredToClient</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">class</span> <span class="nc">SpyingClientInterceptor</span> <span class="kd">implements</span> <span class="nc">ClientInterceptor</span> <span class="o">{</span>
    <span class="nc">ClientCall</span><span class="o">.</span><span class="na">Listener</span><span class="o">&lt;?&gt;</span> <span class="n">spyListener</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="nc">ReqT</span><span class="o">,</span> <span class="nc">RespT</span><span class="o">&gt;</span> <span class="nc">ClientCall</span><span class="o">&lt;</span><span class="nc">ReqT</span><span class="o">,</span> <span class="nc">RespT</span><span class="o">&gt;</span> <span class="nf">interceptCall</span><span class="o">(</span>
        <span class="nc">MethodDescriptor</span><span class="o">&lt;</span><span class="nc">ReqT</span><span class="o">,</span> <span class="nc">RespT</span><span class="o">&gt;</span> <span class="n">method</span><span class="o">,</span> <span class="nc">CallOptions</span> <span class="n">callOptions</span><span class="o">,</span> <span class="nc">Channel</span> <span class="n">next</span><span class="o">)</span>
    <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nc">SimpleForwardingClientCall</span><span class="o">&lt;</span><span class="nc">ReqT</span><span class="o">,</span> <span class="nc">RespT</span><span class="o">&gt;(</span><span class="n">next</span><span class="o">.</span><span class="na">newCall</span><span class="o">(</span><span class="n">method</span><span class="o">,</span> <span class="n">callOptions</span><span class="o">))</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="nc">Listener</span><span class="o">&lt;</span><span class="nc">RespT</span><span class="o">&gt;</span> <span class="n">responseListener</span><span class="o">,</span> <span class="nc">Metadata</span> <span class="n">headers</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">spyListener</span> <span class="o">=</span> <span class="n">responseListener</span> <span class="o">=</span>
              <span class="n">mock</span><span class="o">(</span><span class="nc">ClientCall</span><span class="o">.</span><span class="na">Listener</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">delegatesTo</span><span class="o">(</span><span class="n">responseListener</span><span class="o">));</span>
          <span class="kd">super</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">responseListener</span><span class="o">,</span> <span class="n">headers</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>I didn't find any way to send back a message to my client. After going through the gRPC code and especially the comments (ctrl+left click on android studio),something caught my eye:</p>
<div class="code_switcher_container_parent 82139506-32bf-431b-80ab-78d38a9f3f62"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
    ...
 * &lt;p&gt;DO NOT MOCK: Use InProcessServerBuilder and make a test server instead.
 *
 * @param &lt;ReqT&gt; type of message sent one or more times to the server.
 * @param &lt;RespT&gt; type of message received one or more times from the server.
 */</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">ClientCall</span><span class="o">&lt;</span><span class="nc">ReqT</span><span class="o">,</span> <span class="nc">RespT</span><span class="o">&gt;</span> <span class="o">{</span>
</code></pre></div></div>
</div>
<p>Here was my solution: <code>InProcessServerBuilder</code>. After a little bit more searching in github, I found <a href="https://github.com/grpc/grpc-java/blob/e6c8534f10d938566a62e38792a74032955e6c82/examples/src/test/java/io/grpc/examples/helloworld/HelloWorldServerTest.java">this</a>:</p>
<div class="code_switcher_container_parent 95a85407-ab13-4f75-ab99-0b712ae8fe30"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">greeterImpl_replyMessage</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
  <span class="c1">// Generate a unique in-process server name.</span>
  <span class="nc">String</span> <span class="n">serverName</span> <span class="o">=</span> <span class="nc">InProcessServerBuilder</span><span class="o">.</span><span class="na">generateName</span><span class="o">();</span>

  <span class="c1">// Create a server, add service, start, and register for automatic graceful shutdown.</span>
  <span class="n">grpcCleanup</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">InProcessServerBuilder</span>
      <span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">serverName</span><span class="o">)</span>
      <span class="o">.</span><span class="na">directExecutor</span><span class="o">()</span>
      <span class="o">.</span><span class="na">addService</span><span class="o">(</span><span class="k">new</span> <span class="nc">GreeterImpl</span><span class="o">())</span>
      <span class="o">.</span><span class="na">build</span><span class="o">()</span>
      <span class="o">.</span><span class="na">start</span><span class="o">());</span>

  <span class="nc">GreeterGrpc</span><span class="o">.</span><span class="na">GreeterBlockingStub</span> <span class="n">blockingStub</span> <span class="o">=</span> <span class="nc">GreeterGrpc</span><span class="o">.</span><span class="na">newBlockingStub</span><span class="o">(</span>
      <span class="c1">// Create a client channel and register for automatic graceful shutdown.</span>
      <span class="n">grpcCleanup</span><span class="o">.</span><span class="na">register</span><span class="o">(</span><span class="nc">InProcessChannelBuilder</span>
        <span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">serverName</span><span class="o">)</span>
        <span class="o">.</span><span class="na">directExecutor</span><span class="o">()</span>
        <span class="o">.</span><span class="na">build</span><span class="o">()));</span>


  <span class="nc">HelloReply</span> <span class="n">reply</span> <span class="o">=</span> <span class="n">blockingStub</span><span class="o">.</span><span class="na">sayHello</span><span class="o">(</span><span class="nc">HelloRequest</span>
    <span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
    <span class="o">.</span><span class="na">setName</span><span class="o">(</span> <span class="s">"test name"</span><span class="o">)</span>
    <span class="o">.</span><span class="na">build</span><span class="o">());</span>

  <span class="n">assertEquals</span><span class="o">(</span><span class="s">"Hello test name"</span><span class="o">,</span> <span class="n">reply</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>The most important thing to note here is the use of the two 2 builders:</p>
<ul>
<li>InProcessServerBuilder</li>
<li>InProcessChannelBuilder</li>
</ul>
<p>and the use of InProcessServerBuilder's function :</p>
<ul>
<li>addService</li>
</ul>
<p>And if you are familiar with the greeter example of gRPC, everything will make sense here. If you are not, you can join my gRPC Java course on <a href="https://www.udemy.com/course/grpc-java/?referralCode=9648E53DF9F3D92EB2EA">Udemy</a>.</p>
<p>You can now adapt this solution for the testing part of you application !</p>]]></content><author><name>Clement</name></author><category term="gRPC" /><category term="Android" /><category term="Kotlin" /><category term="Java" /><summary type="html"><![CDATA[After being used to the traditional way of debug an android app by using mocking and interceptors, I came across an interesting problem with gRPC. I wanted to do the same. Basically, add an interceptor that mock a server response.]]></summary></entry><entry><title type="html">My favorites design patterns - Builder</title><link href="https://clement-jean.github.io/my_favorites_design_patterns/" rel="alternate" type="text/html" title="My favorites design patterns - Builder" /><published>2020-03-07T00:00:00+08:00</published><updated>2020-03-07T00:00:00+08:00</updated><id>https://clement-jean.github.io/my_favorites_design_patterns</id><content type="html" xml:base="https://clement-jean.github.io/my_favorites_design_patterns/"><![CDATA[<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto+Mono"/><link rel="stylesheet" href="/assets/codeblock.css"/><script src="/assets/codeblock.js"></script>
<p>Recently, I was trying to handle errors in the programming language I'm developping. Nothing fancy here and the problem was quickly solved with a simple:</p>
<div class="code_switcher_container_parent 48fc8f7a-6386-48b6-8f9a-36dd4c496d9f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">throw</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Error</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">UNEXPECTED_TOKEN</span><span class="p">,</span> <span class="s">"Expected '(' but got "</span> <span class="o">+</span> <span class="n">token</span><span class="o">-&gt;</span><span class="n">get_literal</span><span class="p">());</span>
</code></pre></div></div>
</div>
<h2 id="the-problems">The problems</h2>
<ul>
<li>Lack of genericity: Each time I expected or got a different token, I needed to change the text in the message.</li>
</ul>
<div class="code_switcher_container_parent c66a9cc8-a80c-48f3-9288-852acf9b7f34"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">throw</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Error</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">UNEXPECTED_TOKEN</span><span class="p">,</span> <span class="s">"Expected '(' but got "</span> <span class="o">+</span> <span class="n">token</span><span class="o">-&gt;</span><span class="n">get_literal</span><span class="p">());</span>
<span class="k">throw</span> <span class="nf">Error</span><span class="p">(</span><span class="n">Error</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">UNEXPECTED_TOKEN</span><span class="p">,</span> <span class="s">"Expected ')' but got "</span> <span class="o">+</span> <span class="n">token</span><span class="o">-&gt;</span><span class="n">get_literal</span><span class="p">());</span>
</code></pre></div></div>
</div>
<ul>
<li>Lack of testability: I basically wanted to be able to check if the error type and the error message were the same. But then if I have a stupid typo then my test fail.</li>
</ul>
<div class="code_switcher_container_parent 451aa4f7-cc9d-4235-a897-723701a4adaa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ASSERT_EQ</span><span class="p">(</span><span class="n">error</span><span class="p">,</span> <span class="n">Error</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">UNEXPECTED_TOKEN</span><span class="p">,</span> <span class="s">"xpected '(' but got "</span> <span class="o">+</span> <span class="n">token</span><span class="o">-&gt;</span><span class="n">get_literal</span><span class="p">());</span>
</code></pre></div></div>
</div>
<p>So at that point, I decided to make the solution more generic and more testable. Basically, I wanted something roughly like:</p>
<div class="code_switcher_container_parent 700d4d6f-3eb8-499b-a3fe-53c919aae076"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Error</span> <span class="n">error</span> <span class="o">=</span> <span class="n">expect</span><span class="p">(</span><span class="s">"("</span><span class="p">).</span><span class="n">got</span><span class="p">(</span><span class="s">"{"</span><span class="p">)</span>
</code></pre></div></div>
</div>
<h2 id="the-solution">The solution</h2>
<p>And here comes the Builder pattern. The idea is that we could build an object by changing the variables in an expressive way. So finally, I came up with this:</p>
<div class="code_switcher_container_parent 5e5500ad-82e7-478e-8841-c1a98885c70e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Expect</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_expected</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_got</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="k">static</span> <span class="n">Expect</span> <span class="n">builder</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Expect</span><span class="p">();</span> <span class="p">}</span>

    <span class="n">Expect</span> <span class="o">&amp;</span><span class="n">expect</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">expected</span><span class="p">)</span> <span class="p">{</span> <span class="n">_expected</span> <span class="o">=</span> <span class="n">expected</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">Expect</span> <span class="o">&amp;</span><span class="n">got</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">got</span><span class="p">)</span> <span class="p">{</span> <span class="n">_got</span> <span class="o">=</span> <span class="n">got</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>

    <span class="n">Error</span> <span class="n">build</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Error</span><span class="p">(</span><span class="n">Error</span><span class="o">::</span><span class="n">Type</span><span class="o">::</span><span class="n">UNEXPECTED_TOKEN</span><span class="p">,</span> <span class="s">"Expected '"</span> <span class="o">+</span> <span class="n">_expected</span> <span class="o">+</span> <span class="s">"' but got '"</span> <span class="o">+</span> <span class="n">_got</span> <span class="o">+</span> <span class="s">"'"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
</div>
<p>That you would use like:</p>
<div class="code_switcher_container_parent cfba555c-2891-4601-b26b-1fe846ba1204"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Expect</span><span class="o">::</span><span class="n">builder</span><span class="p">().</span><span class="n">expect</span><span class="p">(</span><span class="s">"("</span><span class="p">).</span><span class="n">got</span><span class="p">(</span><span class="s">"{"</span><span class="p">).</span><span class="n">build</span><span class="p">()</span>
</code></pre></div></div>
</div>
<p>A much shorter, expressive and typo incensitive solution !</p>]]></content><author><name>Clement</name></author><category term="Design pattern" /><summary type="html"><![CDATA[Recently, I was trying to handle errors in the programming language I'm developping. Nothing fancy here and the problem was quickly solved with a simple:]]></summary></entry></feed>