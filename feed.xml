<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://clement-jean.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://clement-jean.github.io/" rel="alternate" type="text/html" /><updated>2023-03-13T10:06:13+08:00</updated><id>https://clement-jean.github.io/feed.xml</id><title type="html">Clément Jean</title><subtitle>Eternal learner and challenges lover</subtitle><author><name>Clément Jean</name></author><entry><title type="html">Protein: Parser (Part 1)</title><link href="https://clement-jean.github.io/protein_parser_part_1/" rel="alternate" type="text/html" title="Protein: Parser (Part 1)" /><published>2023-03-09T00:00:00+08:00</published><updated>2023-03-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_parser_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_parser_part_1/"><![CDATA[<p>In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!</p>
<h2 id="boilerplate">Boilerplate</h2>
<p>As always, we need to think a little bit before to actually write the features themselves. The first thing that we can do to get us started is to write the Parser interface.</p>
<ul class="code-tab-container 0a301b05-c410-4e62-bfe0-59a3d03df4a8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '0a301b05-c410-4e62-bfe0-59a3d03df4a8', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher 0a301b05-c410-4e62-bfe0-59a3d03df4a8"><li class="code_switcher_container_parent active-tab code_switcher_go 6d2ad0d0-335e-4d2d-b63c-c4cc26aa4265"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns ???</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="err">???</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This doesn't seem like a fancy interface but we do have a problem. What is our parser returning when finished? Well, it should return an AST, right? But how do we represent this AST. It turns out, we have two good possibilities:</p>
<ul>
<li>We roll our own serializable AST where each object is a Protobuf Message.</li>
<li>We use the descriptor.proto file which defines Messages for describing elements in a Protobuf file.</li>
</ul>
<p>Both have pros and cons. If we go with the first one we have more control over our serialization. It means that we can optimize some elements' serialized data. However, it also means that we are not compatible with the official way and that's not good.
For the &quot;using the official serialization&quot;, I think you get the idea. We have the pros being the cons of the other implementation, and the cons being the pros of the other implementation.</p>
<p>In the end, for the sake of compatibility, I will be sacrificing some performance. However, these performances are only saving a few bytes and having compatibility with programs serialized by protoc far overweights them.</p>
<h3 id="depending-on-protobuf">Depending on Protobuf</h3>
<p>To use the descriptor, we are going to depend on Protobuf's library. To do that we are going to add in our dependency:</p>
<div class="code_switcher_container_parent 6ce41eeb-6840-4a24-a085-b8a46f826f9c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go get google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>This will let us access <code>descriptorpb</code> package, which contains the <code>FileDescriptorProto</code> struct. If you look at the definition of that struct, you will see the following comment:</p>
<div class="code_switcher_container_parent 46ae9e44-fc4d-4eb5-b03e-2bbeea11d5e5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Describes a complete .proto file.</span>
<span class="k">type</span> <span class="n">FileDescriptorProto</span> <span class="k">struct</span>
</code></pre></div></div>
</div>
<p>That's exactly what we are trying to do.</p>
<h3 id="back-to-interface">Back to interface</h3>
<p>With that dependency on Protobuf, we can now finish our interface:</p>
<ul class="code-tab-container f6d8f007-55af-4bb5-8a02-696aacc7e9e4"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f6d8f007-55af-4bb5-8a02-696aacc7e9e4', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher f6d8f007-55af-4bb5-8a02-696aacc7e9e4"><li class="code_switcher_container_parent active-tab code_switcher_go 0f09c519-7fdb-4508-aa08-19a030b3d575"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns the representation of a file in Protobuf Descriptor</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementation">Implementation</h2>
<p>Let's now implement the interface. But by now you know the drill. We are going to create a minimal implementation so that our first test fails. So what we need is an <code>Impl</code> struct and we need to implement <code>Parser</code> by writing the <code>Parse</code> function.</p>
<p>For now, the <code>Parse</code> function will simply return an empty <code>FileDescriptorProto</code>.</p>
<ul class="code-tab-container cbc6b7d0-347c-49aa-a74e-de6930e72bb8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'cbc6b7d0-347c-49aa-a74e-de6930e72bb8', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher cbc6b7d0-347c-49aa-a74e-de6930e72bb8"><li class="code_switcher_container_parent active-tab code_switcher_go fc435ae3-2e63-4b8a-98df-fa53ee88d6db"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="c">// Impl is the implementation for the Parser interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
<span class="p">}</span>

<span class="c">// New creates a new instance of the Parser</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>

<span class="c">// Parse populates a FileDescriptorProto</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>
  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="first-test">First test</h3>
<p>As our first test we are going to create the test for a syntax statement. This test will take advantage of the fact that <code>Lexer</code> is an interface by creating a <code>FakeLexer</code>. This fake lexer will simply iterate over an array of tokens and return them one by one.</p>
<ul class="code-tab-container 6d9fa153-0afd-401b-af51-d5f50c56a13b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6d9fa153-0afd-401b-af51-d5f50c56a13b', 0)">parser/parser_test.go</a></li></ul><ul class="code-tab-switcher 6d9fa153-0afd-401b-af51-d5f50c56a13b"><li class="code_switcher_container_parent active-tab code_switcher_go f90e64b8-aefb-48fe-a9ca-e758981015c1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">FakeLexer</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">i</span>      <span class="kt">int</span>
  <span class="n">tokens</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">FakeLexer</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}}</span>
  <span class="p">}</span>

  <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="o">++</span>
  <span class="k">return</span> <span class="n">token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This basically means that each time we are running a test in the parser, we are not going to run the lexer code. We are going to simply focus on our current features. So, if we encounter a bug, it means that it is in the parser, not anywhere else.</p>
<p>With that, we can write our first test for <code>syntax = &quot;proto3&quot;;</code>.</p>
<ul class="code-tab-container 7cc57c03-447d-45f0-bcc5-8b5fc60cd21c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '7cc57c03-447d-45f0-bcc5-8b5fc60cd21c', 0)">parser/parser_syntax_test.go</a></li></ul><ul class="code-tab-switcher 7cc57c03-447d-45f0-bcc5-8b5fc60cd21c"><li class="code_switcher_container_parent active-tab code_switcher_go 9f360456-6759-4030-bea5-69720caeadd2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseSyntaxProto3</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"syntax"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"="</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">proto3</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"proto3"</span>

  <span class="k">if</span> <span class="n">syntax</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetSyntax</span><span class="p">();</span> <span class="n">syntax</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"syntax wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">syntax</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent d67a5e46-977b-4f7f-b6ae-8c03464750b6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseSyntaxProto3 <span class="o">(</span>0.00s<span class="o">)</span>
    parser_syntax_test.go:22: syntax wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'proto3'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<h3 id="parsing">Parsing</h3>
<p>We should now improve the <code>Parse</code> function to consume the <code>Lexer</code>'s tokens and do things with that. Here is the pseudo code:</p>
<div class="code_switcher_container_parent 431c36bd-c66b-43d6-b5c6-7200b225a2b2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">Identifier</span> <span class="p">{</span>
    <span class="n">fn</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span> <span class="c">// find the function depending on keyword</span>
    <span class="n">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">descriptor</span><span class="p">)</span> <span class="c">// populate the descriptor</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>You notice that we need a <code>currToken</code> representing the current token being parsed. We will also need the peek token for parsing syntax and other statements. This is because we are going to make sure each time that the peek token is correct, otherwise we will return an error. So <code>Impl</code> now has a <code>currToken</code> and <code>peekToken</code>:</p>
<ul class="code-tab-container ae750261-c1ef-4eec-95f9-d822c9b348c1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ae750261-c1ef-4eec-95f9-d822c9b348c1', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher ae750261-c1ef-4eec-95f9-d822c9b348c1"><li class="code_switcher_container_parent active-tab code_switcher_go 75407b31-ec66-4dc5-ada6-a0c59e92c9e7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
  <span class="n">curToken</span>  <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
  <span class="n">peekToken</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now, we need to populate these tokens before being able to use them. The first time we need to initialize them is in the <code>New</code> function.</p>
<ul class="code-tab-container 6e689d6e-0065-4a9e-b009-b7f38b1b352f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6e689d6e-0065-4a9e-b009-b7f38b1b352f', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 6e689d6e-0065-4a9e-b009-b7f38b1b352f"><li class="code_switcher_container_parent active-tab code_switcher_go f8fa350c-4ab6-4c7d-b1e9-fc6a8c3310f8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But <code>nextToken</code> is not the <code>Lexer.NextToken</code>, this is a private function in <code>Parser</code>. This is a function that looks for the next non-space token.</p>
<ul class="code-tab-container 17e6795d-bd1c-4799-8cb6-e400cbc87e07"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '17e6795d-bd1c-4799-8cb6-e400cbc87e07', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 17e6795d-bd1c-4799-8cb6-e400cbc87e07"><li class="code_switcher_container_parent active-tab code_switcher_go 5c58664a-f639-45ff-805b-196c07d4a4ec"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">nextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">();</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can start updating our <code>Parse</code> function.</p>
<ul class="code-tab-container b743cce5-acad-4ad8-afc2-e13bef3da26f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b743cce5-acad-4ad8-afc2-e13bef3da26f', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher b743cce5-acad-4ad8-afc2-e13bef3da26f"><li class="code_switcher_container_parent active-tab code_switcher_go 56567c38-b45c-4adb-b0c1-7595e4179116"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="c">//Do something with token</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Finally, we are going to register all the parsing functions that we are gonna write in this and next articles. We are going to have a map mapping &quot;syntax&quot; to parseSyntax, ...</p>
<ul class="code-tab-container e70e0ffd-0c70-4046-b3ed-792a6efd71ff"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e70e0ffd-0c70-4046-b3ed-792a6efd71ff', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher e70e0ffd-0c70-4046-b3ed-792a6efd71ff"><li class="code_switcher_container_parent active-tab code_switcher_go 47e8bc42-fa3e-4396-8a93-ee506c68677d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With this we can finalize the <code>Parse</code> function by looking at the relevant function for the <code>currToken.Literal</code>.</p>
<ul class="code-tab-container 5704411e-94b0-49f0-94d1-aceae8d9b27d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '5704411e-94b0-49f0-94d1-aceae8d9b27d', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 5704411e-94b0-49f0-94d1-aceae8d9b27d"><li class="code_switcher_container_parent active-tab code_switcher_go faf97562-3032-4709-accc-2296f1bcbbb7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="n">fn</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span> <span class="c">// keyword not found</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="n">fn</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="parsesyntax">parseSyntax()</h3>
<p>Before actually parsing a syntax statement, we need two helper functions: <code>accept</code> and <code>acceptPeek</code>. <code>acceptPeek</code> will just call <code>accept</code> with the <code>peekToken.Type</code>. <code>accept</code> take a <code>TokenType</code> and checks if it exists in the following variadic arguments.</p>
<ul class="code-tab-container 57f5e83c-6160-48ce-b4f7-57d56e85c794"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '57f5e83c-6160-48ce-b4f7-57d56e85c794', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 57f5e83c-6160-48ce-b4f7-57d56e85c794"><li class="code_switcher_container_parent active-tab code_switcher_go bbea2b05-fd5c-4653-a02a-f614d4219dff"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">original</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">,</span> <span class="n">expected</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">slices</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">original</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// TODO: add error</span>
    <span class="k">return</span> <span class="no">false</span>
  <span class="p">}</span>

  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>

<span class="c">// acceptPeek returns true and advance token</span>
<span class="c">// if tt contains the peekToken.Type</span>
<span class="c">// else it returns false</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptPeek</span><span class="p">(</span><span class="n">tt</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">tt</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now we ready for our <code>parseSyntax</code> function. We are first going to check that we have an <code>=</code> after syntax. Then we check that we have a String, if it’s the case we are going to take the value inside the quotes. And finally, we are going to check that there is a semicolon at the end of the statement.</p>
<ul class="code-tab-container 6d24a671-70d0-4f23-b0c1-809316533d63"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6d24a671-70d0-4f23-b0c1-809316533d63', 0)">parser/syntax.go</a></li></ul><ul class="code-tab-switcher 6d24a671-70d0-4f23-b0c1-809316533d63"><li class="code_switcher_container_parent active-tab code_switcher_go ccc642cb-11c2-4a97-8caf-c93f253d2cac"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseSyntax</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The <code>destringify</code> function looks like the following:</p>
<ul class="code-tab-container 97e0ee72-376c-4b82-8f9e-5450c717d393"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '97e0ee72-376c-4b82-8f9e-5450c717d393', 0)">parser/utils.go</a></li></ul><ul class="code-tab-switcher 97e0ee72-376c-4b82-8f9e-5450c717d393"><li class="code_switcher_container_parent active-tab code_switcher_go 1d46abda-a5b4-40aa-9429-9b6a3bb05f93"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="s">"strings"</span>

<span class="k">func</span> <span class="n">destringify</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">TrimFunc</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">r</span> <span class="kt">rune</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As mentioned, it takes the values between the quotes.</p>
<p>With our <code>parseSyntax</code> finished, we can rerun the test and:</p>
<div class="code_switcher_container_parent a8f7e536-1847-4b73-b23b-ce44381774ca"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  1.361s
</code></pre></div></div>
</div>
<h3 id="parseimport">parseImport()</h3>
<p><code>parseImport</code> is really similar to <code>parseSyntax</code>. However, with imports, we get introduced to optional keywords. An import can be written in 3 ways:</p>
<ul>
<li><code>import &quot;my.proto&quot;;</code></li>
<li><code>import public &quot;my.proto&quot;;</code></li>
<li><code>import weak &quot;my.proto&quot;;</code></li>
</ul>
<p>Let's write the tests:</p>
<ul class="code-tab-container 03c7586c-e691-48a7-b6f9-668b47202ecd"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '03c7586c-e691-48a7-b6f9-668b47202ecd', 0)">parser/parser_import_test.go</a></li></ul><ul class="code-tab-switcher 03c7586c-e691-48a7-b6f9-668b47202ecd"><li class="code_switcher_container_parent active-tab code_switcher_go e9dd64f8-de14-4001-b35e-7666e43af005"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePublicImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"public"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParseWeakImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"weak"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent ffdf13a0-c80b-472d-bff9-f623e052a93b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:25: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParsePublicImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:52: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParseWeakImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:79: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
FAIL
</code></pre></div></div>
</div>
<p>Even though the 2nd and 3rd one are rarely used, we still need to support them. To do so, we are going to need to create an enum called <code>DependencyType</code> which will have the variants: None, Public, and Weak. After that, we are going to check if we have an identifier and depending on the <code>Literal</code>, we are going to return the type.</p>
<ul class="code-tab-container 4f9121b8-ca83-4583-acde-4fe454782066"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4f9121b8-ca83-4583-acde-4fe454782066', 0)">parser/import.go</a></li></ul><ul class="code-tab-switcher 4f9121b8-ca83-4583-acde-4fe454782066"><li class="code_switcher_container_parent active-tab code_switcher_go 5ad87172-b0b0-421a-a61f-1223f6863fad"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"fmt"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">DependencyType</span> <span class="kt">int</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">None</span> <span class="n">DependencyType</span> <span class="o">=</span> <span class="no">iota</span>
  <span class="n">Public</span>
  <span class="n">Weak</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseImport</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">DependencyType</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="n">depType</span> <span class="o">:=</span> <span class="n">None</span>

  <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"public"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Public</span>
    <span class="k">case</span> <span class="s">"weak"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Weak</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// TODO: add error</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">depType</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And the last thing we need to do is register that to the <code>parseFuncs</code>.</p>
<ul class="code-tab-container aa1f2443-9882-451e-ab59-7c196726be68"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'aa1f2443-9882-451e-ab59-7c196726be68', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher aa1f2443-9882-451e-ab59-7c196726be68"><li class="code_switcher_container_parent active-tab code_switcher_go 85d8e22d-97d9-4a9c-acf8-a11da19208b0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We basically append the dependency and if we have a public or weak dependency we add its index into <code>PublicDependency</code> and <code>WeakDependency</code> respectively.</p>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent 1d934c96-d96d-4d11-b8e4-6aeea4e11af1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.450s
</code></pre></div></div>
</div>
<h3 id="parsepackage">parsePackage()</h3>
<p>Once again this function is pretty similar. The main difference is that we are going to look for identifiers and fully qualified names (identifiers separated by dots).</p>
<p>Let's write some tests.</p>
<ul class="code-tab-container ab4f0dc8-c570-4958-a3f2-868f7c590c7b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ab4f0dc8-c570-4958-a3f2-868f7c590c7b', 0)">parser/parser_package_test.go</a></li></ul><ul class="code-tab-switcher ab4f0dc8-c570-4958-a3f2-868f7c590c7b"><li class="code_switcher_container_parent active-tab code_switcher_go e236879e-a0ec-4814-9f30-31c610f69885"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParsePackage</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePackageFullIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"protobuf"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google.protobuf"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Let's fail our tests:</p>
<div class="code_switcher_container_parent bce7414b-56c6-4115-afc7-d5fbf2b2d092"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParsePackage <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:21: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
<span class="nt">---</span> FAIL: TestParsePackageFullIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:39: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google.protobuf'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<p>And now we can implement the <code>parsePackage</code> function. We are going to check that we have at least one identifier, and then if we have a dot we are going to make sure that we have another identifier after. Finally, we will be looking for the semicolon.</p>
<ul class="code-tab-container 2afd0c52-66b7-4fdc-81ee-8b29ff7afeb5"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '2afd0c52-66b7-4fdc-81ee-8b29ff7afeb5', 0)">parser/package.go</a></li></ul><ul class="code-tab-switcher 2afd0c52-66b7-4fdc-81ee-8b29ff7afeb5"><li class="code_switcher_container_parent active-tab code_switcher_go 9abe5c0a-2b9b-43c7-a0dc-6545736df723"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"strings"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parsePackage</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">var</span> <span class="n">parts</span> <span class="p">[]</span><span class="kt">string</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">nil</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">s</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="s">"."</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The last thing to do is to register this function in our <code>parseFuncs</code>.</p>
<ul class="code-tab-container 42dc0bdb-c0f8-4f85-ad5e-188b0b3c2681"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '42dc0bdb-c0f8-4f85-ad5e-188b0b3c2681', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 42dc0bdb-c0f8-4f85-ad5e-188b0b3c2681"><li class="code_switcher_container_parent active-tab code_switcher_go e6670e71-753a-40de-b21d-1b086b7b1249"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"package"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Package</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parsePackage</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and we rerun our tests.</p>
<div class="code_switcher_container_parent 8617f1dc-f385-43ff-894a-1ff49b44c543"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.847s
</code></pre></div></div>
</div>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we created our first three parsing functions. We parsed syntax, package and imports. We are now ready to go more complicated statements.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <!-- <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Next Article</a>
    </div> -->
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!]]></summary></entry><entry><title type="html">Protein: Lexer (Part 3)</title><link href="https://clement-jean.github.io/protein_lexer_part_3/" rel="alternate" type="text/html" title="Protein: Lexer (Part 3)" /><published>2023-03-03T00:00:00+08:00</published><updated>2023-03-03T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_3</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_3/"><![CDATA[<p>This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.</p>
<h2 id="position-checking">Position Checking</h2>
<p>Adding position checking in our test is pretty trivial since it's 3 ifs checking <code>Offset</code>, <code>Line</code>, and <code>Column</code>. So let's add that:</p>
<ul class="code-tab-container f914ed39-f919-43eb-b262-d8493d03e522"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f914ed39-f919-43eb-b262-d8493d03e522', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f914ed39-f919-43eb-b262-d8493d03e522"><li class="code_switcher_container_parent active-tab code_switcher_go ef704163-5a77-4fea-a701-ad151aa835f4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="c">//...</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - offset wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - line wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - column wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now if we run our tests, we should have a lot of errors coming from the fact that Go will initialize <code>Offset</code>, <code>Line</code>, and <code>Column</code> to 0 (default value). An example of error received is:</p>
<div class="code_switcher_container_parent dd34e958-f711-4a17-9a34-95e5f3ac4098"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:31: tests[0] - line wrong. <span class="nv">expected</span><span class="o">=</span>0, <span class="nv">got</span><span class="o">=</span>1
FAIL
</code></pre></div></div>
</div>
<blockquote>
<p>Before going to the new section, make sure that you update the position objects in your tests. If you are not willing to calculate all of the positions, you can just refer to the <a href="https://github.com/Clement-Jean/protein/blob/lexer/lexer/lexer_test.go">tests in the github repo</a> where I did it for you.</p>
</blockquote>
<h2 id="a-bug-">A bug ?!</h2>
<p>Now that we have all our positions set, we can rerun our tests.</p>
<div class="code_switcher_container_parent 4ebbf1b0-4a9b-441b-8dc4-1ecdb3112df6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:35: tests[1] - column wrong. <span class="nv">expected</span><span class="o">=</span>4, <span class="nv">got</span><span class="o">=</span>0
FAIL
</code></pre></div></div>
</div>
<p>And yes we have an error. Let's understand it.</p>
<p>The problem here comes from the way we handle newlines in the <code>emit</code> function. As of right now, this is done like so:</p>
<ul class="code-tab-container 4514e164-f030-43ac-ad99-6ff99539d242"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4514e164-f030-43ac-ad99-6ff99539d242', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 4514e164-f030-43ac-ad99-6ff99539d242"><li class="code_switcher_container_parent active-tab code_switcher_go cd49e9dd-7942-4be7-a2e9-4b476f5d2ef3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This code is checking for a newline inside the literal and if it finds one, it will just set the index of <code>\n</code> in the literal to startLineOffset. The problem here is that we handle all consecutive spaces (the general term) as one token. So when we have <code>\t\n\v\f\r</code>, we are effectively saying that the line starts at the beginning our our space token. This is not correct, right? We should be setting <code>startLineOffset</code> to 2 (just after <code>\n</code>) and then this should affect the <code>Column</code> position because of <code>Column: l.start - l.startLineOffset</code> in the <code>Token</code> instantiation in <code>emit</code>.</p>
<p>So how do we solve that? Well, it turns out to be pretty simple. We are going to look for the last instance of <code>\n</code> in the literal and this will give us the beginning of the line. After that we are going to take the current position (which is after the token right now) and subtract it with the length of the literal minus the beginning of the line. This gives us the offset at which the line begins. So now we should have this:</p>
<ul class="code-tab-container a3bd6f9a-c69c-4ab4-ba82-2bcefb35eca3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a3bd6f9a-c69c-4ab4-ba82-2bcefb35eca3', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a3bd6f9a-c69c-4ab4-ba82-2bcefb35eca3"><li class="code_switcher_container_parent active-tab code_switcher_go c7e2e9eb-b30f-40a2-a21c-1cd424184ce0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">lineStart</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">LastIndex</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> <span class="n">lineStart</span> <span class="o">!=</span> <span class="o">-</span><span class="m">1</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span> <span class="o">-</span> <span class="n">lineStart</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Note that we are only finding the last index when the token kind is a space. This is important because if we do that for all the tokens we will have performance hits (especially on large tokens).</p>
<p>And now, if we rerun our test:</p>
<div class="code_switcher_container_parent e05e4039-c4af-4e20-b84b-d258d77d1d30"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.857s
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we made the final test for our lexer and we solved a critical bug for <code>Token</code> positions. We now have a functional lexer and in the next article we are going to start the parser!</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_2" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_parser_part_1" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.]]></summary></entry><entry><title type="html">Protein: Lexer (Part 2)</title><link href="https://clement-jean.github.io/protein_lexer_part_2/" rel="alternate" type="text/html" title="Protein: Lexer (Part 2)" /><published>2023-02-20T00:00:00+08:00</published><updated>2023-02-20T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_2</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_2/"><![CDATA[<p>In this article we are going to delve into the second part of the lexing which is tokenizing more advanced part of the input. More precisely, we are going to lex spaces (whitespaces, new lines, ...), comments, Identifiers, Numbers (Int and Float), and Strings. At the end of this article, we will have a fully functioning lexer that can tokenize the <code>descriptor.proto</code> which is the longest proto file in the protobuf repo. Let's get started.</p>
<blockquote>
<p>Note: While this article is designed in a way that shows the evolution of the Lexer, you might still want to look at <a href="https://github.com/Clement-Jean/protein/commits/lexer">the commits</a> in order to see where any piece of code went.</p>
</blockquote>
<h2 id="spaces">Spaces</h2>
<p>Up until now, we assumed that all the characters that we would encounter were symbols. We are now going to add whitespaces, new lines, ... on top of that. Now, one thing to note here is that in traditional lexer, spaces will be discarded and are not counted as tokens. In our case, since the <a href="https://protobuf.dev/programming-guides/style/">Protobuf Style Guide</a> mentions that we should use an indent of 2 spaces, we are going to need that information. Before doing tokenizing spaces, we are going to need to more helper functions:</p>
<ul>
<li><code>backup</code>: Goes back by one utf8 character.</li>
<li><code>peek</code>: Check the next utf8 character without advancing the reading position.</li>
</ul>
<p><code>peek</code> is very similar to next because we are checking that we are still within the limits of our input and we read the character at <code>lexer.pos</code>. However, because we are just looking ahead and not advancing in the input, we are not going to update the <code>lexer.pos</code>.</p>
<ul class="code-tab-container c4c4645f-f7e6-4296-b0a2-c20909098a3f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c4c4645f-f7e6-4296-b0a2-c20909098a3f', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher c4c4645f-f7e6-4296-b0a2-c20909098a3f"><li class="code_switcher_container_parent active-tab code_switcher_go 85faa3be-48f7-42d9-a85b-b01f29aea2c0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">peek</span><span class="p">()</span> <span class="kt">rune</span> <span class="p">{</span>
  <span class="k">if</span> <span class="kt">int</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">r</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="o">:</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">r</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and <code>backup</code> is pretty simple. We are going to read the last character before <code>lexer.pos</code> and update the reading position by the size of that utf8 character. Furthermore, since in the <code>next</code> function we added <code>l.line++</code> when we have a new line, we are going to need backing that up too. So we are going to decrease <code>lexer.line</code> when we encounter a newline.</p>
<ul class="code-tab-container 623e28f9-26bb-4aca-a9dd-141fe7019adc"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '623e28f9-26bb-4aca-a9dd-141fe7019adc', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 623e28f9-26bb-4aca-a9dd-141fe7019adc"><li class="code_switcher_container_parent active-tab code_switcher_go 3f92f556-09f7-49a0-9ba0-55e085b44ffb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">backup</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">l</span><span class="o">.</span><span class="n">atEOF</span> <span class="o">&amp;&amp;</span> <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">r</span><span class="p">,</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeLastRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="o">:</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">])</span>
    <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">-=</span> <span class="n">w</span>

    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">line</span><span class="o">--</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As always, we want to add a test for our function that is skipping spaces. Now, it is important to understand that we are not only interested of whitespaces. We also want to 'skip' other non-printable characters such as '\t', '\r', '\n', ... For that we are going to use the <code>unicode.IsSpace</code> from the Go standard library. So our test, should contain these different characters.</p>
<ul class="code-tab-container 822e63e3-6bd8-4226-8f84-0ee52a794671"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '822e63e3-6bd8-4226-8f84-0ee52a794671', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 822e63e3-6bd8-4226-8f84-0ee52a794671"><li class="code_switcher_container_parent active-tab code_switcher_go 0c9cfa76-058a-4aa2-a6f3-ed95bd24fb29"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">TestNextTokenOnSpace</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"</span><span class="se">\t\n\v\f\r</span><span class="s"> "</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">"</span><span class="se">\t\n\v\f\r</span><span class="s"> "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously, if we run this we will get the following:</p>
<div class="code_switcher_container_parent 356e8089-9357-44ea-b055-0f334929deb1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Space"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Now that we have our test, <code>backup</code> and <code>peek</code>, we can write our <code>lexSpaces</code> function. This is a function that loops until we find a non-space character as peek and return a Token for that space.</p>
<ul class="code-tab-container 4dee82a2-8601-4c3b-b4e8-f16bd171d370"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4dee82a2-8601-4c3b-b4e8-f16bd171d370', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 4dee82a2-8601-4c3b-b4e8-f16bd171d370"><li class="code_switcher_container_parent active-tab code_switcher_go 878715f5-6459-4a29-b8c1-c74cd595e1f1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">lexSpaces</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsSpace</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenSpace</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This <code>lexSpaces</code> function will now need to be placed in our <code>lexProto</code> switch in order to be taken into consideration.</p>
<ul class="code-tab-container a6667a76-760b-4b99-9666-7663ec07215a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a6667a76-760b-4b99-9666-7663ec07215a', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a6667a76-760b-4b99-9666-7663ec07215a"><li class="code_switcher_container_parent active-tab code_switcher_go ed914835-aa6c-489d-bbaa-8f752e82332f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">unicode</span><span class="o">.</span><span class="n">IsSpace</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span> <span class="c">// go back by one character</span>
    <span class="k">return</span> <span class="n">lexSpaces</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and that's basically it! We run our test and we get:</p>
<div class="code_switcher_container_parent daf69ee1-347a-4391-a4e1-acb23fd1b7bd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.235s
</code></pre></div></div>
</div>
<h2 id="comments">Comments</h2>
<p>It turns out that we can lex comments with a similar technique as the one used for spaces. The only difference here is that we have two type of comment:</p>
<ul>
<li>Line comment: Starts with <code>//</code> and finishes at the end of the line.</li>
<li>Multiline comment: Starts with <code>/*</code> and finishes with <code>*/</code>.</li>
</ul>
<h3 id="line-comment">Line comment</h3>
<p>We are going to start with the line comment. This is very similar to <code>lexSpaces</code>. The major difference is that we are going to check for '\n' or EOF for finishing the comment. Finally, we are going to return a Token.</p>
<p>But before all that, let's write two tests. One that checks that we are skipping until '\n' and the other that checks that we are skipping until EOF.</p>
<ul class="code-tab-container ed48cdd9-5cec-4e27-b743-c57ad96b5a74"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ed48cdd9-5cec-4e27-b743-c57ad96b5a74', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher ed48cdd9-5cec-4e27-b743-c57ad96b5a74"><li class="code_switcher_container_parent active-tab code_switcher_go 5744bae6-423b-431c-a77d-25700716dc77"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">TestNextTokenOnLineCommentWithEOF</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"//this is a comment"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"//this is a comment"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnLineCommentWithNewLine</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"//this is a comment</span><span class="se">\n</span><span class="s">_"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"//this is a comment"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">19</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">19</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">20</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">20</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We fail to pass, once again:</p>
<div class="code_switcher_container_parent b154d4a1-61c9-4201-99ee-1aeb50aec410"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnLineCommentWithEOF <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnLineCommentWithNewLine <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Let's now write our function.</p>
<ul class="code-tab-container 84fefbd6-29c3-4c37-9009-169969a63acf"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '84fefbd6-29c3-4c37-9009-169969a63acf', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 84fefbd6-29c3-4c37-9009-169969a63acf"><li class="code_switcher_container_parent active-tab code_switcher_go 7b1729cc-4664-4057-90f2-c40c60f872fe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">lexLineComment</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenComment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and run our tests:</p>
<div class="code_switcher_container_parent 1932f177-10ba-4199-b33f-701735c317bc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.351s
</code></pre></div></div>
</div>
<p>We pass the Line Comment tests, let's go to the multiline comment.</p>
<h3 id="multiline-comment">Multiline Comment</h3>
<p>These comments are again pretty similar, however, like any other object that doesn't end with EOF we can have errors. The main error here is an unterminated comment. As an example, writing something like:</p>
<div class="code_switcher_container_parent 1f4fea35-02c6-41dd-a819-f99f18b83639"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/*</span><span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="n">comment</span>
</code></pre></div></div>
</div>
<p>should result in an error from the lexer.</p>
<p>To handle such errors, we are going to create a function that will basically stop the lexing process by emitting an Error Token and return nil as state.</p>
<ul class="code-tab-container fbe5bd6f-0da0-4818-a5d9-8ae99be451bc"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'fbe5bd6f-0da0-4818-a5d9-8ae99be451bc', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher fbe5bd6f-0da0-4818-a5d9-8ae99be451bc"><li class="code_switcher_container_parent active-tab code_switcher_go 7f365001-8277-4753-959a-4612dc027de7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">errorf</span><span class="p">(</span><span class="n">format</span> <span class="kt">string</span><span class="p">,</span> <span class="n">args</span> <span class="o">...</span><span class="n">any</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">l</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="o">...</span><span class="p">),</span> <span class="n">Position</span><span class="p">{</span>
    <span class="n">Offset</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="p">,</span>
    <span class="n">Line</span><span class="o">:</span>   <span class="n">l</span><span class="o">.</span><span class="n">startLine</span><span class="p">,</span>
    <span class="n">Column</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span><span class="p">,</span>
  <span class="p">}}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="m">0</span>
  <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="m">0</span>
  <span class="n">l</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="o">:</span><span class="m">0</span><span class="p">]</span>
  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This is similar to what we did in emit, the only difference is that here the literal of a token is the error message and we reset the state of our lexer.</p>
<p>Now that we know the requirements for our lexer concerning comments, we can write some tests. Before that, though, as a matter of convenience, we are going to define constants for our error messages. This is done to avoid typos when writing tests:</p>
<ul class="code-tab-container 71b2df3a-0d59-4608-9f4a-b052b9cf2dc7"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '71b2df3a-0d59-4608-9f4a-b052b9cf2dc7', 0)">lexer/errors.go</a></li></ul><ul class="code-tab-switcher 71b2df3a-0d59-4608-9f4a-b052b9cf2dc7"><li class="code_switcher_container_parent active-tab code_switcher_go a0798e72-5850-4712-b9dc-36ba8bc8ca3a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">errorUnterminatedMultilineComment</span> <span class="o">=</span> <span class="s">"unterminated multiline comment"</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>and once this is done we can now have our tests:</p>
<ul class="code-tab-container 17bfc915-055e-4de2-b1ed-0469964548d0"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '17bfc915-055e-4de2-b1ed-0469964548d0', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 17bfc915-055e-4de2-b1ed-0469964548d0"><li class="code_switcher_container_parent active-tab code_switcher_go 086e3a21-ece4-4800-90c2-9271e5368c36"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnMultilineComment</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"/*this is a comment*/_"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"/*this is a comment*/"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">22</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">22</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnUnterminatedMultilineComment</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"/*this is a comment"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedMultilineComment</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>we run:</p>
<div class="code_switcher_container_parent 5e9c4a5a-0940-4b4e-a075-312c7c51c19b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnMultilineComment <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnUnterminatedMultilineComment <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>and we fail (we are used to it).</p>
<p><code>lexMultilineComment</code> is a little bit longer than the other functions we wrote for lexing. This is mostly due to the fact that we are checking for unterminated comment but also because we need to check that the current character is '/' and that the previous character was '*'. So we keep a reference to the previous character and check that for stopping the reading loop.</p>
<ul class="code-tab-container eb2e6d41-441b-47d0-a5ee-b597c8bbba83"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'eb2e6d41-441b-47d0-a5ee-b597c8bbba83', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher eb2e6d41-441b-47d0-a5ee-b597c8bbba83"><li class="code_switcher_container_parent active-tab code_switcher_go 59934ef1-c7dd-4c4b-94a6-bbec3266b364"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexMultilineComment</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">p</span> <span class="kt">rune</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">r</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">errorf</span><span class="p">(</span><span class="n">errorUnterminatedMultilineComment</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">p</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenComment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Once again this is very similar to <code>lexSpaces</code> and <code>lexLineComment</code>, isn't it?</p>
<p>Let's now place that in our <code>lexProto</code> function:</p>
<ul class="code-tab-container fc865789-b473-47b2-af1e-15c5738ca826"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'fc865789-b473-47b2-af1e-15c5738ca826', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher fc865789-b473-47b2-af1e-15c5738ca826"><li class="code_switcher_container_parent active-tab code_switcher_go b709e799-3199-4a1f-aa04-e305f35884b6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="o">&amp;&amp;</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">==</span> <span class="sc">'*'</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexMultilineComment</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and our tests?</p>
<div class="code_switcher_container_parent 42e37f3e-ea02-4266-8978-967e1e518ca2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.741s
</code></pre></div></div>
</div>
<h2 id="identifiers">Identifiers</h2>
<p>For identifiers, we need a way to keep going while we have a letter (capitalized or not), a number or an underscore. We are going to create a function called <code>acceptWhile</code> that does just that. We want to pass the set of possible characters to it and while the set contains the current value it will advance. Once we are done, we are going to use <code>backup</code> to make sure that the <code>lexer.pos</code> is just after the last character of the identifier.</p>
<p>Before we do that, though, it's testing time. We simply want to test that when we pass some text starting with a letter, <code>lexProto</code> will create an Identifier token.</p>
<ul class="code-tab-container d3aa8e61-17aa-432e-9a0f-a5c5016d7381"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd3aa8e61-17aa-432e-9a0f-a5c5016d7381', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher d3aa8e61-17aa-432e-9a0f-a5c5016d7381"><li class="code_switcher_container_parent active-tab code_switcher_go 233b11c9-cfbf-49d0-bc10-c8d0d5294af6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"hello_world2023 HelloWorld2023"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="s">"hello_world2023"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="s">"HelloWorld2023"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We obviously fail the test:</p>
<div class="code_switcher_container_parent a9abbc57-be45-4a03-9f42-caefa92ee13e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Identifier"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>and now we can start our <code>acceptWhile</code> function:</p>
<ul class="code-tab-container 434b877c-7cf7-47ca-be66-b655e9278243"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '434b877c-7cf7-47ca-be66-b655e9278243', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 434b877c-7cf7-47ca-be66-b655e9278243"><li class="code_switcher_container_parent active-tab code_switcher_go 69c1d070-9f5c-4a76-9f70-4a2449672dbc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptWhile</span><span class="p">(</span><span class="n">valid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">strings</span><span class="o">.</span><span class="n">ContainsRune</span><span class="p">(</span><span class="n">valid</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That's it. Nothing more! A few lines of code and we can now simply write our <code>lexIdentifier</code>.</p>
<ul class="code-tab-container 96006926-53fe-4f29-93a6-124a5acde05e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '96006926-53fe-4f29-93a6-124a5acde05e', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 96006926-53fe-4f29-93a6-124a5acde05e"><li class="code_switcher_container_parent active-tab code_switcher_go 5ff97bf0-c5af-44ae-82e1-9142b9e5894c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexIdentifier</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenIdentifier</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and add that to the <code>lexProto</code>:</p>
<ul class="code-tab-container b3c7beb7-fc6c-4b27-9036-f883b8205166"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b3c7beb7-fc6c-4b27-9036-f883b8205166', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher b3c7beb7-fc6c-4b27-9036-f883b8205166"><li class="code_switcher_container_parent active-tab code_switcher_go 6f39eda3-34fd-4675-9d16-2893484a8510"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexIdentifier</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent 053311f5-34c1-4f47-a7e0-345ffebd5c83"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.767s
</code></pre></div></div>
</div>
<h2 id="strings">Strings</h2>
<p>Before going the numbers, let's continue with something easy. Lexing strings is similar to what we did with multiline comments. We have a beginning and an end delimited by a certain character. In Protobuf, for strings, we can use single and double quotes. However, we cannot match a double quote with a single one. This means that having something like:</p>
<div class="code_switcher_container_parent 392c4770-cf99-435c-910a-d89f951e00a1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"test'
</span></code></pre></div></div>
</div>
<p>will result in a unterminated string.</p>
<p>Now that we know the requirements, let's write out tests.</p>
<ul class="code-tab-container f7e51da2-5680-4355-ba21-7d3dbadac44a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f7e51da2-5680-4355-ba21-7d3dbadac44a', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher f7e51da2-5680-4355-ba21-7d3dbadac44a"><li class="code_switcher_container_parent active-tab code_switcher_go eb4f6e24-e16a-4911-9f6b-a9c93c3820a4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"'test' </span><span class="se">\"</span><span class="s">test</span><span class="se">\"</span><span class="s">"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenStr</span><span class="p">,</span> <span class="s">"'test'"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenStr</span><span class="p">,</span> <span class="s">"</span><span class="se">\"</span><span class="s">test</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnUnterminatedString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"'test"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedQuotedString</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnMismatchedQuotesString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">test'"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedQuotedString</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>you notice the constant named <code>errorUnterminatedQuotedString</code>. It is similar to the error message we added for the multiline comment.</p>
<ul class="code-tab-container 9c83f379-c06b-4fd4-a7d1-1da9b081d51c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '9c83f379-c06b-4fd4-a7d1-1da9b081d51c', 0)">lexer/errors.go</a></li></ul><ul class="code-tab-switcher 9c83f379-c06b-4fd4-a7d1-1da9b081d51c"><li class="code_switcher_container_parent active-tab code_switcher_go 08b5b02e-e124-41df-9a18-7e0f8b8f4e38"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">errorUnterminatedMultilineComment</span> <span class="o">=</span> <span class="s">"unterminated multiline comment"</span>
  <span class="n">errorUnterminatedQuotedString</span>     <span class="o">=</span> <span class="s">"unterminated quoted string"</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>We obviously fail the test:</p>
<div class="code_switcher_container_parent 164952d4-96f8-459d-9cb1-3a9ce4a18e8e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"String"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnUnterminatedString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnMismatchedQuotesString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Ok, now we can write our <code>lexString</code>. We are going to write a function that first take notice of the character it currently is on. This character will be a single or double quote and we are going to need it to determine the end of our string. After that we are going to loop over the input and we are going to check for EOF (unterminated string) and the character at the beginning (end of string). When we encounter the end of the string, we can just break out of the loop and return a String Token.</p>
<ul class="code-tab-container 833b6aef-a3eb-4dff-9891-51d009b4005a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '833b6aef-a3eb-4dff-9891-51d009b4005a', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 833b6aef-a3eb-4dff-9891-51d009b4005a"><li class="code_switcher_container_parent active-tab code_switcher_go e47a3f55-5722-4dc0-9e18-f864f6bd63f1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexString</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">open</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="n">Loop</span><span class="o">:</span>
  <span class="k">for</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span><span class="o">:</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">errorf</span><span class="p">(</span><span class="n">errorUnterminatedQuotedString</span><span class="p">)</span>
    <span class="k">case</span> <span class="kt">rune</span><span class="p">(</span><span class="n">open</span><span class="p">)</span><span class="o">:</span>
      <span class="k">break</span> <span class="n">Loop</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenStr</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and after that, you know the trick, we add that to <code>lexProto</code>:</p>
<ul class="code-tab-container 8a67b946-e140-492e-a389-401e5da4f18f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8a67b946-e140-492e-a389-401e5da4f18f', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 8a67b946-e140-492e-a389-401e5da4f18f"><li class="code_switcher_container_parent active-tab code_switcher_go 5722359f-ba5e-40f2-8c9a-ca3d01222a15"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexString</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and the tests?</p>
<div class="code_switcher_container_parent 26b98afc-f6ad-47e2-b389-e019c27e459a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.374s
</code></pre></div></div>
</div>
<h2 id="numbers">Numbers</h2>
<p>The real challenge comes with numbers. If we take a look at the <a href="https://protobuf.dev/reference/protobuf/proto3-spec/">Protobuf language specification</a>, we need to accept Decimal, Octal and Hexadecimal for integers and exponents for floats. On top of that we need to be able to put a sign before the number to be able to have -5 for example.</p>
<p>In our tests we are going to try listing all the possible kinds of numbers (if you spot something missing, let me know):</p>
<ul class="code-tab-container 6266da43-64fb-4a0d-a9ce-1655782eba24"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6266da43-64fb-4a0d-a9ce-1655782eba24', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 6266da43-64fb-4a0d-a9ce-1655782eba24"><li class="code_switcher_container_parent active-tab code_switcher_go a9060728-185c-4230-9468-c6a6d09f8374"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnIntDecimal</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"5 0 -5 +5"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"-5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"+5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnIntHex</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"0xff 0XFF"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0xff"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0XFF"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnIntOctal</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"056"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"056"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnFloat</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"-0.5 +0.5 -.5 +.5 .5 .5e5 .5e+5 .5e-5 5e5"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"-0.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"+0.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"-.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"+.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e+5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e-5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"5e5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Tests fail:</p>
<div class="code_switcher_container_parent 79944982-fa0d-419f-a4a8-fd6350dde305"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnIntDecimal <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnIntHex <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnIntOctal <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnFloat <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Float"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Now, before writing our <code>lexNumber</code> we want to have an <code>accept</code> function which does something similar to <code>acceptWhile</code> but only one time instead of in a loop. This will help us to check if our number, as an example, is starting by 0 in which case it might be a hexadecimal number.</p>
<ul class="code-tab-container f6764343-4f0a-4be5-bd07-f82ee37baea1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f6764343-4f0a-4be5-bd07-f82ee37baea1', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f6764343-4f0a-4be5-bd07-f82ee37baea1"><li class="code_switcher_container_parent active-tab code_switcher_go 2b7757c0-6ace-494a-942f-f83d7a2e375c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">valid</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">strings</span><span class="o">.</span><span class="n">ContainsRune</span><span class="p">(</span><span class="n">valid</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">true</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">false</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now we can write our <code>lexNumber</code> function. We are going to start by assuming that our set of possible characters are from 0 to 9. Then we check if the number starts with the character 0. If it's the case, it will be an Hexadecimal or an Octal. We update the set of possible characters based on that.</p>
<p>Now that we know the possible set of characters, we can do an <code>acceptWhile</code> to read the digits. After the number we might see a dot for floating-point numbers. There we are going to do another <code>acceptWhile</code> to read all the digits. And finally, after all of this, we can still have an exponent followed by a sign and digits.</p>
<ul class="code-tab-container 199e2e38-0ce8-4d6b-8f5e-ecc5c96a1d6b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '199e2e38-0ce8-4d6b-8f5e-ecc5c96a1d6b', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 199e2e38-0ce8-4d6b-8f5e-ecc5c96a1d6b"><li class="code_switcher_container_parent active-tab code_switcher_go ce76092b-8adf-4597-bc62-7ebd0e7eb738"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexNumber</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">t</span> <span class="n">TokenType</span> <span class="o">=</span> <span class="n">TokenInt</span>

  <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"+-"</span><span class="p">)</span>

  <span class="n">digits</span> <span class="o">:=</span> <span class="s">"0123456789"</span> <span class="c">// decimal</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"0"</span><span class="p">)</span> <span class="p">{</span> <span class="c">// starts with 0</span>
    <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"xX"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">digits</span> <span class="o">=</span> <span class="s">"0123456789abcdefABCDEF"</span> <span class="c">// hexadecimal</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">digits</span> <span class="o">=</span> <span class="s">"01234567"</span> <span class="c">// octal</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">TokenFloat</span>
    <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"0123456789"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"eE"</span><span class="p">)</span> <span class="p">{</span> <span class="c">// exponent</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">TokenFloat</span>
    <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"+-"</span><span class="p">)</span>
    <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"0123456789"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We add that to <code>lexProto</code>:</p>
<ul class="code-tab-container 8ab47aaa-4820-4d73-8553-0291169850f5"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8ab47aaa-4820-4d73-8553-0291169850f5', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 8ab47aaa-4820-4d73-8553-0291169850f5"><li class="code_switcher_container_parent active-tab code_switcher_go 23bad8f1-3acc-47b2-b15a-6c748ade5cbf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'+'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'-'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">||</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexNumber</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We run our tests again:</p>
<div class="code_switcher_container_parent 04bff35a-c83c-45b3-97db-c3257235c9c2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnFloat <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[8] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Float"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"."</span>
FAIL
</code></pre></div></div>
</div>
<p>and we still have an error. This is due to the fact that, in part 1, when we were lexing symbols, we added this case statement:</p>
<ul class="code-tab-container a77dbbc3-87cf-470a-a35b-6cf03829cf5d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a77dbbc3-87cf-470a-a35b-6cf03829cf5d', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a77dbbc3-87cf-470a-a35b-6cf03829cf5d"><li class="code_switcher_container_parent active-tab code_switcher_go 85b8ed52-e14e-4124-96d9-986fc8c77001"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">:</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
<span class="c">//...</span>
</code></pre></div></div>
</li></ul>
<p>In Protobuf, numbers can start directly with a dot and thus our lexer will just read Dot and then an Integer. So we need to skip the lexing of a dot if it's followed by a number.</p>
<ul class="code-tab-container 8231a5e2-2ba6-4ae8-a207-03930d6a5619"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8231a5e2-2ba6-4ae8-a207-03930d6a5619', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 8231a5e2-2ba6-4ae8-a207-03930d6a5619"><li class="code_switcher_container_parent active-tab code_switcher_go 7e995181-7db5-4ec3-b094-3032b48db9f1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsNumber</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">())</span><span class="o">:</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
<span class="c">//...</span>
</code></pre></div></div>
</li></ul>
<p>And our tests pass:</p>
<div class="code_switcher_container_parent e33bce2c-e715-4202-a81c-5beea619f493"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.763s
</code></pre></div></div>
</div>
<blockquote>
<p>Note: I am aware that some invalid numbers can pass through this lexing function. For example, the invalid number <code>0XFF.5</code> will return you a float. However, this is not the lexer that should handle the verification of number, the parser will. The lexer's job is to return tokens.</p>
</blockquote>
<h2 id="we-can-lex">We can Lex!</h2>
<p>As promised in the beginning of the article, we are able to lex a file called <code>descriptor.proto</code>. This file can be found <a href="https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto">here</a>. Just copy its content to a file.</p>
<p>Now, we need to write some main function to run our lexer. It will read the first argument from the command line (no error handling because this is just a test), read the file to a string, initialize a lexer and will repeatedly call the <code>NextToken</code> until EOF.</p>
<ul class="code-tab-container 17df1306-9631-426d-9192-f4a9b20d4a6d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '17df1306-9631-426d-9192-f4a9b20d4a6d', 0)">main.go</a></li></ul><ul class="code-tab-switcher 17df1306-9631-426d-9192-f4a9b20d4a6d"><li class="code_switcher_container_parent active-tab code_switcher_go d04a141e-8c96-42b5-a5d1-50c0cbe9df41"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"log"</span>
  <span class="s">"os"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">args</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Args</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="p">]</span>
  <span class="n">content</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">content</span><span class="p">))</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span>

    <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">token</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>we run:</p>
<div class="code_switcher_container_parent 559cdd1f-4fe5-4598-bc56-d9ed685e550d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run main.go descriptor.proto
</code></pre></div></div>
</div>
<p>and we should have output similar to:</p>
<div class="code_switcher_container_parent d58da1d4-70cd-403d-9eb6-37a6246a2c6a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
2023/02/21 18:01:58 <span class="o">{}</span> <span class="o">}</span> <span class="o">{</span>38493 920 0<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>Space 
 <span class="o">{</span>38494 920 1<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{}</span> <span class="o">}</span> <span class="o">{</span>38495 921 0<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>Space 
 <span class="o">{</span>38496 921 1<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>EOF  <span class="o">{</span>38497 922 0<span class="o">}}</span>
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we tokenized all the elements that we need to get started with our parser. We are even able to lex proto files in the protobuf library! In the next episode, before going to the parser, we are going to make sure that our token positions are correct because up until now we didn't test that.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to delve into the second part of the lexing which is tokenizing more advanced part of the input. More precisely, we are going to lex spaces (whitespaces, new lines, ...), comments, Identifiers, Numbers (Int and Float), and Strings. At the end of this article, we will have a fully functioning lexer that can tokenize the descriptor.proto which is the longest proto file in the protobuf repo. Let's get started.]]></summary></entry><entry><title type="html">Protein: Lexer (Part 1)</title><link href="https://clement-jean.github.io/protein_lexer_part_1/" rel="alternate" type="text/html" title="Protein: Lexer (Part 1)" /><published>2023-02-17T00:00:00+08:00</published><updated>2023-02-17T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_1/"><![CDATA[<p>As promised in a <a href="https://www.linkedin.com/posts/clement-jean_protobuf-activity-7024951031868391424-I26b?utm_source=share&amp;utm_medium=member_desktop">LinkedIn Poll</a>, we are going to develop Parser for proto files which will create an AST that is serializable in Protobuf itself. Obviously, this is going to be a series of articles because we need to write quite a lot of parsing code. However, I believe that this is worth doing since we are going to see another use of Protobuf outside of gRPC.</p>
<p>In this article, we are going to present the project and start writing a Lexer. This is not the most amusing part. However, this will be the foundations for our part 2 in which we will start more complex tokenizing of the input.</p>
<h2 id="the-project">The Project</h2>
<p>The project is called <a href="https://github.com/Clement-Jean/protein">protein</a>. In itself, this is intended to be a project showing how to parse proto files to do tools for Protobuf. But the end goal is to provide an easy-to-use and efficient linter.</p>
<p>The project is mostly divided into three components:</p>
<ul>
<li>The Lexer: it tokenizes the input and provides metadata about these tokens.</li>
<li>The Parser: it verifies the validity of our tokens and builds an AST.</li>
<li>The Linter: it analyzes the AST and provide feedback to users.</li>
</ul>
<blockquote>
<p>Note: There might be more components later but these are the major ones.</p>
</blockquote>
<p>One thing worth mentioning is that the AST will be built with objects generated by Protobuf. This means that we will have an AST that we can serialize and maybe even cache for multiple runs of our Linter.</p>
<p>Finally, as mentioned, this project shows how to build tools for Protobuf. Thus I hope the readers will be inspired to create their own tools and/or contribute to this project. I'm going to document all the code and explain all the logic so that you can follow along and even participate in the development.</p>
<h2 id="the-lexer">The Lexer</h2>
<p>The <code>protein</code> Lexer has been inspired by one of the great pieces of code out there: The <a href="https://cs.opensource.google/go/go/+/master:src/text/template/parse/lex.go">template library lex.go</a> in the Go standard library. I was introduced to this code by an <a href="https://www.youtube.com/watch?v=HxaD_trXwRE">amazing talk</a> given by <a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>. So I want to thank all the contributors and Rob for the amazing talk. <strong>Thank you guys!</strong></p>
<p>The essence of the Lexer is a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">Finite-state Machine</a> (FSM). This basically means that we are going to go from state to state by applying functions to do the transition. For example, let's say that we have the following line:</p>
<div class="code_switcher_container_parent e810c943-64e7-4347-bdf4-216f8e90da58"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>
</code></pre></div></div>
</div>
<p>We will go through the following states:</p>
<div class="code_switcher_container_parent ff133492-b64e-4242-ba0a-7a80cbcc127e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>initial state -&gt; Identifier(&quot;syntax&quot;) -&gt; Equal -&gt; Str(&quot;proto3&quot;) -&gt; EOF
</code></pre></div>
<p>And each state will know how to parse their own value (e.g. &quot;proto3&quot; for the Str state).</p>
<p>Finally, the Lexer will be used by calling the <code>NextToken</code> function. This function, as its name suggests, will return the next token in the input. This is basically calling all the parsing functions from each state.</p>
<h2 id="lets-start-simple">Let's Start Simple</h2>
<p>Let's fullfil the first requirement. The user code, in our case the Parser, will interact with the Lexer by repeatedly calling the <code>NextToken</code> function. So let's define an interface because that will be handy later on in this series to test the Parser on a fake Lexer.</p>
<ul class="code-tab-container 99f01d99-c77b-49c7-a47a-4952177638bf"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '99f01d99-c77b-49c7-a47a-4952177638bf', 0)">lexer/lexer.go</a></li></ul><ul class="code-tab-switcher 99f01d99-c77b-49c7-a47a-4952177638bf"><li class="code_switcher_container_parent active-tab code_switcher_go dc889123-2c62-4cc8-beda-b22d2ed40b00"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// Lexer is protein's tokenizer</span>
<span class="k">type</span> <span class="n">Lexer</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// NextToken returns the following token in the input source.</span>
  <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>For now, &quot;input source&quot; is still a little vague but we are going to deal with that later in the implementation.</p>
<p>After that, we do not have the definition of a <code>Token</code>. In our application, a token is a collection of few information about some text in the input:</p>
<ul>
<li>A type: a simple way to identify tokens (e.g., Identifier, Str, ...)</li>
<li>A literal: the value of a token as a string</li>
<li>A position: the position of this text in the input</li>
</ul>
<p>Let's define all that. Let's start with position. We want to know the offset relative to the beginning of the file and we want to know the line and column at which the token shows up. These info are for making the error messages clearer to the user (at least we'll try our best!). Instead of having something like:</p>
<p><code>unterminated string</code></p>
<p>we want to have:</p>
<p><code>file.proto 1:10 unterminated string: &quot;this is unterminated</code></p>
<p>Where, in this example 1 is the line and 10 is the column.</p>
<p>So a position is pretty simple.</p>
<ul class="code-tab-container 4327593d-a9a0-4627-826c-4c35d3862ab0"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4327593d-a9a0-4627-826c-4c35d3862ab0', 0)">lexer/position.go</a></li></ul><ul class="code-tab-switcher 4327593d-a9a0-4627-826c-4c35d3862ab0"><li class="code_switcher_container_parent active-tab code_switcher_go a0269321-4eaf-43d4-a190-ccc48864ea30"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// Position is a position in the input</span>
<span class="k">type</span> <span class="n">Position</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="c">// Offset is the position relative to the beginning of the file (starts at 0)</span>
  <span class="n">Offset</span> <span class="kt">int</span>

  <span class="c">// Line is the file line (starts at 1)</span>
  <span class="n">Line</span> <span class="kt">int</span>

  <span class="c">// Column is the offset relative to the beginning of the line (starts at 0)</span>
  <span class="n">Column</span> <span class="kt">int</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And with that we can now define our Token.</p>
<ul class="code-tab-container 8c0343b1-d345-4ad8-9c72-f9205a3ec80d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8c0343b1-d345-4ad8-9c72-f9205a3ec80d', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher 8c0343b1-d345-4ad8-9c72-f9205a3ec80d"><li class="code_switcher_container_parent active-tab code_switcher_go 04a2aa1b-2884-405b-9ebb-720f5f5e1c79"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// TokenType is an alias type which tells of which kind the token is</span>
<span class="k">type</span> <span class="n">TokenType</span> <span class="kt">int</span>

<span class="c">// Token is a piece of the input</span>
<span class="k">type</span> <span class="n">Token</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Type</span>    <span class="n">TokenType</span>
  <span class="n">Literal</span> <span class="kt">string</span>
  <span class="n">Position</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="token-types">Token Types</h2>
<p>Right now, we simply have the <code>TokenType</code> type alias but do not define any value. We are going to define an enum for all the possible values that the <code>Token.Type</code> property can have.</p>
<ul class="code-tab-container 1dbca41f-5ed8-4fa5-a4d7-36fe86ececc8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1dbca41f-5ed8-4fa5-a4d7-36fe86ececc8', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher 1dbca41f-5ed8-4fa5-a4d7-36fe86ececc8"><li class="code_switcher_container_parent active-tab code_switcher_go d93ad864-9cf6-4284-870b-8ce703bb3c9f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="c">// These are all the token types</span>
<span class="k">const</span> <span class="p">(</span>
  <span class="n">EOF</span>          <span class="n">TokenType</span> <span class="o">=</span> <span class="no">iota</span> <span class="o">-</span> <span class="m">1</span> <span class="c">// End Of File</span>
  <span class="n">TokenIllegal</span>                      <span class="c">// Illegal token</span>
  <span class="n">TokenError</span>                        <span class="c">// Error</span>
  <span class="n">TokenSpace</span>                        <span class="c">// Space (whitespace, '\n', '\r', '\t')</span>
  <span class="n">TokenComment</span>                      <span class="c">// Comment (single line or multiline)</span>

  <span class="n">TokenIdentifier</span> <span class="c">// Identifier</span>
  <span class="n">TokenInt</span>        <span class="c">// Integer</span>
  <span class="n">TokenFloat</span>      <span class="c">// Float</span>
  <span class="n">TokenStr</span>        <span class="c">// String ('...' or "...")</span>

  <span class="n">TokenUnderscore</span>  <span class="c">// _</span>
  <span class="n">TokenEqual</span>       <span class="c">// =</span>
  <span class="n">TokenColon</span>       <span class="c">// ,</span>
  <span class="n">TokenSemicolon</span>   <span class="c">// ;</span>
  <span class="n">TokenDot</span>         <span class="c">// .</span>
  <span class="n">TokenLeftBrace</span>   <span class="c">// {</span>
  <span class="n">TokenRightBrace</span>  <span class="c">// }</span>
  <span class="n">TokenLeftSquare</span>  <span class="c">// [</span>
  <span class="n">TokenRightSquare</span> <span class="c">// ]</span>
  <span class="n">TokenLeftParen</span>   <span class="c">// (</span>
  <span class="n">TokenRightParen</span>  <span class="c">// )</span>
  <span class="n">TokenLeftAngle</span>   <span class="c">// &lt;</span>
  <span class="n">TokenRightAngle</span>  <span class="c">// &gt;</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>There are few things to notice here. The first one is the use of <code>iota</code>. If you are not familiar with this, this is a keyword that lets us define multiple constant with consecutive values. Here, we use <code>iota - 1</code> because, by default, <code>iota</code> starts counting at zero but here we want to start at -1. The second thing to notice is that some of these tokens have constant values (e.g., <code>TokenEqual</code> == '=') and others don't have one (e.g., Identifier value will be evaluated at runtime).</p>
<p>For debugging and testing, we will need a way to display the <code>TokenType</code> as a string. In Go, we can simply do that by defining a function called <code>String()</code> on the <code>TokenType</code> type. And to define the value we are going to have a constant array defining values based on the type (remember <code>TokenType</code> is just an int).</p>
<ul class="code-tab-container 04a341fa-5e1c-422e-9c4d-d0fae7c0a86b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '04a341fa-5e1c-422e-9c4d-d0fae7c0a86b', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher 04a341fa-5e1c-422e-9c4d-d0fae7c0a86b"><li class="code_switcher_container_parent active-tab code_switcher_go f191d948-b3d6-4521-886c-1ed5d83ca53a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">var</span> <span class="n">tokenTypeStr</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
  <span class="s">"EOF"</span><span class="p">,</span>
  <span class="s">"Illegal"</span><span class="p">,</span>
  <span class="s">"Error"</span><span class="p">,</span>
  <span class="s">"Space"</span><span class="p">,</span>
  <span class="s">"Comment"</span><span class="p">,</span>
  <span class="s">"Identifier"</span><span class="p">,</span>
  <span class="s">"Integer"</span><span class="p">,</span>
  <span class="s">"Float"</span><span class="p">,</span>
  <span class="s">"String"</span><span class="p">,</span>
  <span class="s">"_"</span><span class="p">,</span>
  <span class="s">"="</span><span class="p">,</span>
  <span class="s">","</span><span class="p">,</span>
  <span class="s">";"</span><span class="p">,</span>
  <span class="s">"."</span><span class="p">,</span>
  <span class="s">"{"</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span>
  <span class="s">"["</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span>
  <span class="s">"("</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span>
  <span class="s">"&lt;"</span><span class="p">,</span> <span class="s">"&gt;"</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">tokenTypeStr</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="m">1</span><span class="p">]</span> <span class="c">// +1 because we start at iota - 1</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementing-a-basic-lexer">Implementing a Basic Lexer</h2>
<p>With all of the previous boilerplate, we can now start our implementation. Don't get too excited though, we are simply going to define an &quot;empty shell&quot; Lexer in order to be able to write a failing test (see <a href="https://stackoverflow.com/questions/276813/what-is-red-green-testing">Red/Green testing</a>).</p>
<p>As we know, we need to implement the <code>NextToken</code> function.</p>
<ul class="code-tab-container 25cfa1cc-9989-4b00-af6f-52a46d4847b3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '25cfa1cc-9989-4b00-af6f-52a46d4847b3', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 25cfa1cc-9989-4b00-af6f-52a46d4847b3"><li class="code_switcher_container_parent active-tab code_switcher_go e61ee8d8-59da-434a-a56d-e3ada90742b3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">Token</span><span class="p">{</span>
    <span class="n">Type</span><span class="o">:</span> <span class="n">TokenIllegal</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Furthermore, we need a simple way to instantiate our Lexer. To do so, we are going to create a function called <code>New</code> with a return type being <code>Lexer</code> and will return an instance of <code>Impl</code>.</p>
<ul class="code-tab-container cfcff6dd-4bbf-4887-9423-c694e373ea80"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'cfcff6dd-4bbf-4887-9423-c694e373ea80', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher cfcff6dd-4bbf-4887-9423-c694e373ea80"><li class="code_switcher_container_parent active-tab code_switcher_go 3bf27964-1d1d-440c-bf03-f11da7b8b022"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// New creates a new instance of the Lexer</span>
<span class="k">func</span> <span class="n">New</span><span class="p">()</span> <span class="n">Lexer</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="writing-a-failing-test">Writing a Failing Test</h2>
<p>Now let's start with a simple test. We are going to test all the symbols (Underscore, Equal, ...). At the end of this article, we aim to make that test pass.</p>
<p>We are going to use a technique called <a href="https://arslan.io/2022/12/04/functional-table-driven-tests-in-go/">table-driven tests</a>. To do so, we are going to define a type that represents an expected Token.</p>
<ul class="code-tab-container 42d536f6-0683-4f1f-a619-b19256dd6817"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '42d536f6-0683-4f1f-a619-b19256dd6817', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 42d536f6-0683-4f1f-a619-b19256dd6817"><li class="code_switcher_container_parent active-tab code_switcher_go cf125351-874e-4399-ba7d-ee4add699b59"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Check</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">expectedType</span>     <span class="n">TokenType</span>
  <span class="n">expectedLiteral</span>  <span class="kt">string</span>
  <span class="n">expectedPosition</span> <span class="n">Position</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>I'm calling it <code>Check</code> because it will be used as for a single check in a list of checks. We are going to iterate over that list of checks and do asserts on the three properties.</p>
<ul class="code-tab-container 8920ccba-3fb5-4c46-b483-d682ad75b10f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8920ccba-3fb5-4c46-b483-d682ad75b10f', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 8920ccba-3fb5-4c46-b483-d682ad75b10f"><li class="code_switcher_container_parent active-tab code_switcher_go 69b30252-0dfc-4611-b669-e99331cdc345"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="n">tok</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedType</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - tokentype wrong. expected=%q, got=%q"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedType</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Type</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Literal</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedLiteral</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - literal wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedLiteral</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// asserts on Position for later</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can now write a compiling and failing test.</p>
<ul class="code-tab-container 752de5fa-68df-4af2-b8b1-76a5394540ba"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '752de5fa-68df-4af2-b8b1-76a5394540ba', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 752de5fa-68df-4af2-b8b1-76a5394540ba"><li class="code_switcher_container_parent active-tab code_switcher_go 6ab1c1fd-014c-4049-b45b-c125a0eb1cd1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>
<span class="p">)</span>

<span class="c">//...</span>

<span class="k">func</span> <span class="n">TestNextTokenOnSymbols</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenColon</span><span class="p">,</span> <span class="s">","</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenDot</span><span class="p">,</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftBrace</span><span class="p">,</span> <span class="s">"{"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightBrace</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftSquare</span><span class="p">,</span> <span class="s">"["</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightSquare</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftParen</span><span class="p">,</span> <span class="s">"("</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightParen</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftAngle</span><span class="p">,</span> <span class="s">"&lt;"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightAngle</span><span class="p">,</span> <span class="s">"&gt;"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and if we test:</p>
<div class="code_switcher_container_parent ffb5db55-0d41-4177-8888-fcd98b2bf9ec"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"_"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>That was expected.</p>
<h2 id="improving-impl">Improving Impl</h2>
<p>If you didn't notice, our implementation for the Lexer is useless. It's not storing any state and it doesn't even process text. Let's change that.</p>
<p>Let's first look at the states our Lexer will store.</p>
<ul class="code-tab-container 7f030962-6c0f-4f34-8e1f-cbd34e701a35"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '7f030962-6c0f-4f34-8e1f-cbd34e701a35', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 7f030962-6c0f-4f34-8e1f-cbd34e701a35"><li class="code_switcher_container_parent active-tab code_switcher_go 9a95b2de-8566-41e1-8aaf-d4ba6f440849"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Impl is the implementation for the Lexer interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">src</span>             <span class="kt">string</span> <span class="c">// the input text</span>
  <span class="n">start</span>           <span class="kt">int</span>    <span class="c">// the start of a token</span>
  <span class="n">startLine</span>       <span class="kt">int</span>    <span class="c">// the line at which a token start</span>
  <span class="n">startLineOffset</span> <span class="kt">int</span>    <span class="c">// the offset of the starting line relative to beginning of file</span>
  <span class="n">line</span>            <span class="kt">int</span>    <span class="c">// the current file line being process</span>
  <span class="n">pos</span>             <span class="kt">int</span>    <span class="c">// the reading position in the file</span>
  <span class="n">atEOF</span>           <span class="kt">bool</span>   <span class="c">// tells wether the Lexer is finished</span>
  <span class="n">token</span>           <span class="n">Token</span>  <span class="c">// the token to return</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That seems like a lot but don't worry, this is actually pretty intuitive once we start interacting with these properties.</p>
<p>Now, we can improve our <code>New</code> function a little bit.</p>
<ul class="code-tab-container 5950d436-5981-4769-ba19-1be766052f70"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '5950d436-5981-4769-ba19-1be766052f70', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 5950d436-5981-4769-ba19-1be766052f70"><li class="code_switcher_container_parent active-tab code_switcher_go b3a17a9b-fcb0-4458-91b3-42131870d2c9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// New creates a new instance of the Lexer</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">input</span> <span class="kt">string</span><span class="p">)</span> <span class="n">Lexer</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span>
    <span class="n">src</span><span class="o">:</span>       <span class="n">input</span><span class="p">,</span>
    <span class="n">line</span><span class="o">:</span>      <span class="m">1</span><span class="p">,</span> <span class="c">// lines are 1-indexed</span>
    <span class="n">startLine</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We are finally storing text and some indices to keep track of where we are in it.</p>
<p>We can now start to think about emitting token in the <code>NextToken</code> function but before actually emitting tokens we are going to need thinking about the FSM.</p>
<p>As mentioned, we are going to create states and transitions between these states. These states will be represented as functions and the transitions will be made by returning another state after the processing needed for the current state.</p>
<p>We define a state as follows:</p>
<ul class="code-tab-container 88c5a1ab-8601-42d0-b91a-a31c7e34550e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '88c5a1ab-8601-42d0-b91a-a31c7e34550e', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 88c5a1ab-8601-42d0-b91a-a31c7e34550e"><li class="code_switcher_container_parent active-tab code_switcher_go 1a50636d-670e-4fbd-9fa4-a8dd75959710"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">type</span> <span class="n">stateFn</span> <span class="k">func</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span>
</code></pre></div></div>
</li></ul>
<p>You can notice that this is a function, taking an <code>Impl</code> as parameter and returning a stateFn. Think about is as a list of states linked together.</p>
<p>With that, we are now able to define the <code>NextToken</code> logic.</p>
<ul class="code-tab-container df349eaa-d156-4c1e-ba15-22f10215a9d5"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'df349eaa-d156-4c1e-ba15-22f10215a9d5', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher df349eaa-d156-4c1e-ba15-22f10215a9d5"><li class="code_switcher_container_parent active-tab code_switcher_go efffbd29-121c-45c3-9067-110997821605"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// NextToken provides the following token in the input</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span> <span class="p">{</span>
  <span class="n">state</span> <span class="o">:=</span> <span class="n">lexProto</span>
  <span class="k">for</span> <span class="p">{</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">state</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">state</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">token</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Where <code>lexerProto</code> is the initial state and where we iterate until <code>state</code> it becomes <code>nil</code>.</p>
<h2 id="lexproto">lexProto</h2>
<p><code>lexProto</code> Is the initial state of our FSM. This is a <code>stateFn</code>. This means that it interacts with <code>Impl</code> and returns another <code>stateFn</code>.</p>
<p>For now, we can make this function really simple. It is a function that checks the next character and checking if this character is a symbol. If it is, we return a <code>Token</code> with the relevant <code>TokenType</code>, otherwise we return an Illegal <code>Token</code>.</p>
<ul class="code-tab-container 680bfd50-5651-49c5-9ba9-25cdffb99893"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '680bfd50-5651-49c5-9ba9-25cdffb99893', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 680bfd50-5651-49c5-9ba9-25cdffb99893"><li class="code_switcher_container_parent active-tab code_switcher_go 2bffce46-80d7-44ab-9a6f-a02ffbd07b59"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'_'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenUnderscore</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'='</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenEqual</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">','</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenColon</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">';'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenSemicolon</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'{'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftBrace</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'}'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightBrace</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftSquare</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightSquare</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftParen</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightParen</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'&lt;'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftAngle</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightAngle</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenIllegal</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="next">next()</h2>
<p><code>next</code> Is also pretty simple. It basically checks if the position is valid. If it isn't it returns <code>EOF</code>, otherwise it takes the next rune (utf8 character), updates the <code>pos</code>, updates the <code>line</code> if needed, and return the rune read.</p>
<ul class="code-tab-container 8fc93113-63de-4ddb-a881-d0182c35cf63"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8fc93113-63de-4ddb-a881-d0182c35cf63', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 8fc93113-63de-4ddb-a881-d0182c35cf63"><li class="code_switcher_container_parent active-tab code_switcher_go 28d1d06e-38b3-41b5-9dd9-25bc30db7e63"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">next</span><span class="p">()</span> <span class="kt">rune</span> <span class="p">{</span>
  <span class="k">if</span> <span class="kt">int</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">atEOF</span> <span class="o">=</span> <span class="no">true</span>
    <span class="k">return</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">r</span><span class="p">,</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="o">:</span><span class="p">])</span>
  <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">w</span>

  <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">line</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">r</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="emittokentype">emit(TokenType)</h2>
<p><code>emit</code> Is a function that checks our current location in the input text, creates a token, and return nil to stop the loop in <code>NextToken</code>.</p>
<ul class="code-tab-container cebeff39-1f89-48ce-9cb6-eaf6ad11c2e2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'cebeff39-1f89-48ce-9cb6-eaf6ad11c2e2', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher cebeff39-1f89-48ce-9cb6-eaf6ad11c2e2"><li class="code_switcher_container_parent active-tab code_switcher_go 98c82b97-3fd3-4fea-958a-3a8ec64bba16"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">t</span> <span class="o">:=</span> <span class="n">Token</span><span class="p">{</span>
    <span class="n">Type</span><span class="o">:</span>    <span class="n">tt</span><span class="p">,</span>
    <span class="n">Literal</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="o">:</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">],</span>
    <span class="n">Position</span><span class="o">:</span> <span class="n">Position</span><span class="p">{</span>
      <span class="n">Offset</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="p">,</span>
      <span class="n">Line</span><span class="o">:</span>   <span class="n">l</span><span class="o">.</span><span class="n">startLine</span><span class="p">,</span>
      <span class="n">Column</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span><span class="p">,</span>
    <span class="p">}}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">pos</span>
  <span class="n">l</span><span class="o">.</span><span class="n">startLine</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">line</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">t</span>
  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<blockquote>
<p>Note: this is a lot of small operations. Take the time to go through the comments written in the <code>Impl</code> struct. This is not that hard.</p>
</blockquote>
<h2 id="handling-eof">Handling EOF</h2>
<p>If we run our test now, we will get the following:</p>
<div class="code_switcher_container_parent 685a58f4-ef04-4f37-b4ed-e313391b49d4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:20: tests[13] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"EOF"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>This is basically saying: &quot;we received an Illegal Token but we expected EOF&quot;.</p>
<p>This is pretty trivial to solve. Remember the <code>atEOF</code> property in the <code>Impl</code>? Well, we just add that in our switch statement.</p>
<ul class="code-tab-container 2e14519e-5ade-421e-ade8-73966c5eba78"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '2e14519e-5ade-421e-ade8-73966c5eba78', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 2e14519e-5ade-421e-ade8-73966c5eba78"><li class="code_switcher_container_parent active-tab code_switcher_go 822cd92b-8f62-444f-a6d8-7f791fd2d42d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">l</span><span class="o">.</span><span class="n">atEOF</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="c">//...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and now:</p>
<div class="code_switcher_container_parent 931e1959-9ac0-468b-ae8f-37da48d2aceb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.809s
</code></pre></div></div>
</div>
<p>Boom !</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have a Lexer that is able to go through a text and identify the symbols that we defined as TokenType. Admittedly, this is not exceptional but we are now ready for the next part where we are going to skip whitespaces and comments, and lex Identifiers, Numbers (Int and Float), and Strings.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
		<div class="col text-center">
			<a href="/protein_lexer_part_2" class="btn btn-danger text-center">Next Article</a>
		</div>
	</div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[As promised in a LinkedIn Poll, we are going to develop Parser for proto files which will create an AST that is serializable in Protobuf itself. Obviously, this is going to be a series of articles because we need to write quite a lot of parsing code. However, I believe that this is worth doing since we are going to see another use of Protobuf outside of gRPC.]]></summary></entry><entry><title type="html">Writing Protoc Plugins</title><link href="https://clement-jean.github.io/writing_protoc_plugins/" rel="alternate" type="text/html" title="Writing Protoc Plugins" /><published>2023-02-10T00:00:00+08:00</published><updated>2023-02-10T00:00:00+08:00</updated><id>https://clement-jean.github.io/writing_protoc_plugins</id><content type="html" xml:base="https://clement-jean.github.io/writing_protoc_plugins/"><![CDATA[<p>Recently, I answered a <a href="https://stackoverflow.com/questions/75343655/modeling-schema-metadata-without-serializing-into-the-protobuf-message/75362085#75362085">StackOverflow question</a> related to writing protoc plugins and Protobuf custom options. I thought this would be interesting to share how to write one because I believe this is quite an involved process and it fits the context of an article.</p>
<h2 id="c-or-go">C++ or Go</h2>
<p>When checking the protobuf documentation, I could only find a plugin API for C++ and Go. Furthermore, Go seems to be the only language where people have written blog posts about how to write such a custom plugin. In this article, I'm trying to cover as many languages as possible so for now I'll write in both languages and if you find that another language support writing custom plugin, leave a comment and I'll be happy to update.</p>
<h2 id="bazel">Bazel</h2>
<p>In order to build a multi-language project, I'm going to use Bazel. This might be frightening for some people but I'll try to explain as much as I can. Furthermore, if you are interested in learning Bazel, you can let me know in the comments.</p>
<h2 id="the-context">The Context</h2>
<p>While the StackOverflow states the problem, I want to explain it again so that I have control of whether the content exists. Here is a copy of the question:</p>
<blockquote>
<p>Does protobuf support embedding non functional metadata into the protobuf schema without affecting the message serialization/de-serialization? I am attempting to embed business information (ownership, contact info) into a large shared protobuf schema but do NOT want to impact functionality at all.</p>
<p>A structured comment or custom_option that does not get serialized would work. I would also like to parse the information from the .proto file for auditing purposes.</p>
<p>TIA</p>
<div class="code_switcher_container_parent 0ffd58a9-ea55-488a-9ff5-e3956076af32"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
 <span class="k">optional</span> <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[(</span><span class="n">silent_options</span><span class="p">)</span><span class="o">.</span><span class="na">owner</span> <span class="o">=</span> <span class="s">"team1"</span><span class="p">,</span> <span class="p">(</span><span class="n">silent_options</span><span class="p">)</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="s">"team1@company.com"</span><span class="p">];</span>
 <span class="k">optional</span> <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div></blockquote>
<p>In other words, we want to create a custom FieldOption which lets us assign an owner and an email to a field. On top of that, we want that to be analyzed for auditing purpose. This basically means that we can do that at &quot;compile&quot; time. So we are going to build a custom plugin which will let us write something like:</p>
<div class="code_switcher_container_parent b29b9931-ab8d-4172-b312-322621639f21"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--audit_out</span><span class="o">=</span><span class="nb">.</span> test.proto
</code></pre></div></div>
</div>
<p>Now, in this article, to keep everything simple, we are not going to generate any code or report stored in a file. We are going to print info on the terminal. However, generating files is pretty trivial to add in general. We simply write the information that we print in the terminal to a file (protoc library has some sort of printer to write to files).</p>
<h3 id="workspace--build-root">WORKSPACE + BUILD (root)</h3>
<p>Let us first create our Bazel Workspace for our project. We do that by creating a WORKSPACE.bazel file at the root and inside we are going to add the dependencies needed to build our project.</p>
<ul class="code-tab-container 481f9196-56a4-48b4-b424-cbb9863378c7"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '481f9196-56a4-48b4-b424-cbb9863378c7', 0)">WORKSPACE.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '481f9196-56a4-48b4-b424-cbb9863378c7', 1)">WORKSPACE.bazel (C++)</a></li></ul><ul class="code-tab-switcher 481f9196-56a4-48b4-b424-cbb9863378c7"><li class="code_switcher_container_parent active-tab code_switcher_python ecb51ffb-fc78-433b-bb7e-179cbdb4d275"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('ecb51ffb-fc78-433b-bb7e-179cbdb4d275')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="p">,</span> <span class="s">"http_archive"</span><span class="p">)</span>

<span class="n">RULES_GO_VERSION</span> <span class="o">=</span> <span class="s">"0.37.0"</span>
<span class="n">GO_VERSION</span> <span class="o">=</span> <span class="s">"1.19.5"</span>
<span class="n">GAZELLE_VERSION</span> <span class="o">=</span> <span class="s">"0.29.0"</span>
<span class="n">PROTOBUF_VERSION</span> <span class="o">=</span> <span class="s">"3.21.12"</span>

<span class="c1"># To create go libraries and binaries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"io_bazel_rules_go"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"56d8c5a5c91e1af73eca71a6fab2ced959b67c86d12ba37feedb0a2dfea441a6"</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v%s/rules_go-v%s.zip"</span> <span class="o">%</span> <span class="p">(</span><span class="n">RULES_GO_VERSION</span><span class="p">,</span> <span class="n">RULES_GO_VERSION</span><span class="p">),</span>
    <span class="s">"https://github.com/bazelbuild/rules_go/releases/download/v%s/rules_go-v%s.zip"</span> <span class="o">%</span> <span class="p">(</span><span class="n">RULES_GO_VERSION</span><span class="p">,</span> <span class="n">RULES_GO_VERSION</span><span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="c1"># To generate BUILD.bazel files and lists of dependencies (more on that later)
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"bazel_gazelle"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"ecba0f04f96b4960a5b250c8e8eeec42281035970aa8852dda73098274d14a1d"</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v%s/bazel-gazelle-v%s.tar.gz"</span> <span class="o">%</span> <span class="p">(</span><span class="n">GAZELLE_VERSION</span><span class="p">,</span> <span class="n">GAZELLE_VERSION</span><span class="p">),</span>
    <span class="s">"https://github.com/bazelbuild/bazel-gazelle/releases/download/v%s/bazel-gazelle-v%s.tar.gz"</span> <span class="o">%</span> <span class="p">(</span><span class="n">GAZELLE_VERSION</span><span class="p">,</span> <span class="n">GAZELLE_VERSION</span><span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="c1"># To get protobuf and protoc libraries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"com_google_protobuf"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"930c2c3b5ecc6c9c12615cf5ad93f1cd6e12d0aba862b572e076259970ac3a53"</span><span class="p">,</span>
  <span class="n">strip_prefix</span> <span class="o">=</span> <span class="s">"protobuf-%s"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
    <span class="s">"https://github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:deps.bzl"</span><span class="p">,</span> <span class="s">"go_register_toolchains"</span><span class="p">,</span> <span class="s">"go_rules_dependencies"</span><span class="p">)</span>

<span class="n">go_rules_dependencies</span><span class="p">()</span>

<span class="n">go_register_toolchains</span><span class="p">(</span><span class="n">version</span> <span class="o">=</span> <span class="n">GO_VERSION</span><span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@bazel_gazelle//:deps.bzl"</span><span class="p">,</span> <span class="s">"gazelle_dependencies"</span><span class="p">)</span>

<span class="n">gazelle_dependencies</span><span class="p">(</span><span class="n">go_repository_default_config</span> <span class="o">=</span> <span class="s">"//:WORKSPACE.bazel"</span><span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@com_google_protobuf//:protobuf_deps.bzl"</span><span class="p">,</span> <span class="s">"protobuf_deps"</span><span class="p">)</span>

<span class="n">protobuf_deps</span><span class="p">()</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 2314ab73-a3d9-4a92-94b0-6f385ccc9926"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2314ab73-a3d9-4a92-94b0-6f385ccc9926')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="p">,</span> <span class="s">"http_archive"</span><span class="p">)</span>

<span class="n">PROTOBUF_VERSION</span> <span class="o">=</span> <span class="s">"3.21.12"</span>

<span class="c1"># To get protobuf and protoc libraries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"com_google_protobuf"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"930c2c3b5ecc6c9c12615cf5ad93f1cd6e12d0aba862b572e076259970ac3a53"</span><span class="p">,</span>
  <span class="n">strip_prefix</span> <span class="o">=</span> <span class="s">"protobuf-%s"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
    <span class="s">"https://github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@com_google_protobuf//:protobuf_deps.bzl"</span><span class="p">,</span> <span class="s">"protobuf_deps"</span><span class="p">)</span>

<span class="n">protobuf_deps</span><span class="p">()</span>
</code></pre></div></div>
</li></ul>
<p>This gets all the dependencies needed to work with protobuf. Mainly we are going to use protobuf library which contains some generated code to deal with descriptors (a meta object that describe an object written in protobuf) and the protoc library which lets us define plugins.</p>
<h4 id="go">Go</h4>
<p>For go, we have some extra steps. The first thing we can do is creating our go module. To do that we can write the following command:</p>
<div class="code_switcher_container_parent 24d300fa-ef6a-4870-a87b-c332cbe20c3f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('24d300fa-ef6a-4870-a87b-c332cbe20c3f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go mod init test.com
</code></pre></div></div>
</div>
<p>Where you can replace <code>test.com</code> with the name of your module. <strong>If you changed the module name, be aware that you'll need to update all the following <code>test.com</code></strong>.</p>
<p>Now, because we also want our application to run with a simple <code>go run main.go</code> kind of command, we are going to add a dependency to the module, which is protobuf. To do that enter the following command:</p>
<div class="code_switcher_container_parent c42d281d-ffdf-447a-ba28-7fdc2be8e591"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('c42d281d-ffdf-447a-ba28-7fdc2be8e591')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>Note that we added a protobuf dependency in the WORKSPACE.bazel and in our go.mod. These are not the same. One if for the building phase (linking with libraries) and the other is to be used in the Go program (as code).</p>
<p>Finally, we also need to set up Gazelle. We need to create a BUILD.bazel file at the root level.</p>
<ul class="code-tab-container d820b5ac-39ae-4129-96b3-76802ed54f9d"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'd820b5ac-39ae-4129-96b3-76802ed54f9d', 0)">BUILD.bazel</a></li></ul><ul class="code-tab-switcher d820b5ac-39ae-4129-96b3-76802ed54f9d"><li class="code_switcher_container_parent active-tab code_switcher_python ee2faa32-78c3-4ffe-9607-6319ed5efd29"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('ee2faa32-78c3-4ffe-9607-6319ed5efd29')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_gazelle//:def.bzl"</span><span class="p">,</span> <span class="s">"gazelle"</span><span class="p">)</span>

<span class="c1"># gazelle:prefix test.com
</span><span class="n">gazelle</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"gazelle"</span><span class="p">)</span>

<span class="n">gazelle</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"gazelle-update-repos"</span><span class="p">,</span>
  <span class="n">args</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"-from_file=go.mod"</span><span class="p">,</span>
    <span class="s">"-to_macro=deps.bzl%go_dependencies"</span><span class="p">,</span>
    <span class="s">"-prune"</span><span class="p">,</span>
  <span class="p">],</span>
  <span class="n">command</span> <span class="o">=</span> <span class="s">"update-repos"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>This creates two commands (<code>gazelle</code> and <code>gazelle-update-repos</code>) that we can run to generate our BUILD.bazel and other dependency files automatically.</p>
<p>We can now run <code>bazel run //:gazelle-update-repos</code> in the terminal and we will see that it creates a file called <code>deps.bzl</code> and that the WORKSPACE.bazel was modified with these lines:</p>
<ul class="code-tab-container c788ef14-dd88-4d34-8381-1d58bbbef814"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'c788ef14-dd88-4d34-8381-1d58bbbef814', 0)">WORKSPACE.bazel</a></li></ul><ul class="code-tab-switcher c788ef14-dd88-4d34-8381-1d58bbbef814"><li class="code_switcher_container_parent active-tab code_switcher_python 20f08256-5824-4f62-9333-27aeaa057304"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"//:deps.bzl"</span><span class="p">,</span> <span class="s">"go_dependencies"</span><span class="p">)</span>

<span class="c1"># gazelle:repository_macro deps.bzl%go_dependencies
</span><span class="n">go_dependencies</span><span class="p">()</span>
</code></pre></div></div>
</li></ul>
<p>If you open the <code>deps.bzl</code>, you will see a list of all the dependencies fetched to be able to build your go application.</p>
<h3 id="protobuf">Protobuf</h3>
<p>We are now at the stage where we can define our custom option. It is worth noting that in our case we need an option on fields but we can create options for a lot of different context. We could for example create an option at the top-level context (<code>go_package</code>, <code>optimize_for</code>, ...), at a message level, etc. You can find all the options in the file called descriptor.proto in the GitHub repo under <code>src/google/protobuf</code>.</p>
<p>To create a custom option, we need to extend the relevant message. In our case we need to extend <code>google.protobuf.FieldOptions</code>. To do that we can simply use the <code>extend</code> concept, which lets us define more fields inside an already existing message.</p>
<ul class="code-tab-container c70ed2e5-29c4-45d7-9564-abc9efac445d"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'c70ed2e5-29c4-45d7-9564-abc9efac445d', 0)">proto/silent_option.proto (Go)</a></li><li class=" code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'c70ed2e5-29c4-45d7-9564-abc9efac445d', 1)">proto/silent_option.proto (C++)</a></li></ul><ul class="code-tab-switcher c70ed2e5-29c4-45d7-9564-abc9efac445d"><li class="code_switcher_container_parent active-tab code_switcher_proto 862f5191-e97d-4a5a-a75d-88ca90e9faeb"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('862f5191-e97d-4a5a-a75d-88ca90e9faeb')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">SilentOption</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">owner</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.FieldOptions</span> <span class="p">{</span>
  <span class="n">SilentOption</span> <span class="na">silent_option</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// see note below for why 1000</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_proto 2121ac6c-a233-4037-ae59-ef6a49b17161"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2121ac6c-a233-4037-ae59-ef6a49b17161')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">SilentOption</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">owner</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.FieldOptions</span> <span class="p">{</span>
  <span class="n">SilentOption</span> <span class="na">silent_option</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// see note below for why 1000</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<blockquote>
<p>NOTE: if you check the FieldOptions message in the descriptor.proto file, you will see the following line: <code>extensions 1000 to max;</code>. This means that when we are extending this message, our fields will need to contain tags that are between 1000 and max (maximum tag). Furthermore, some of the option tags are &quot;already taken&quot;. This means that other custom options are using them and if you were to use your option with another one having the same tag, you would have a conflict. Check the list of the <a href="https://github.com/protocolbuffers/protobuf/blob/main/docs/options.md">Protobuf Global Extension Registry</a> before selecting the tag for your custom option and maybe register it.</p>
</blockquote>
<p>Now that we have our proto file, we can think about compiling it. To do that we are going to create a BUILD.bazel file in the proto directory. This will define a library for our proto file and another for the related programming language.</p>
<ul class="code-tab-container 8d29eb12-51ac-4fa3-91af-35f8a0997969"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '8d29eb12-51ac-4fa3-91af-35f8a0997969', 0)">BUILD.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '8d29eb12-51ac-4fa3-91af-35f8a0997969', 1)">BUILD.bazel (C++)</a></li></ul><ul class="code-tab-switcher 8d29eb12-51ac-4fa3-91af-35f8a0997969"><li class="code_switcher_container_parent active-tab code_switcher_shell 2c24b9e7-cf6e-4da1-8ffc-ac18b1ef50b3"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2c24b9e7-cf6e-4da1-8ffc-ac18b1ef50b3')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //:gazelle
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python c115c29d-272d-47bb-86a4-6513ef1c1e5f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('c115c29d-272d-47bb-86a4-6513ef1c1e5f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@rules_cc//cc:defs.bzl"</span><span class="p">,</span> <span class="s">"cc_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_proto"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"silent_option.proto"</span><span class="p">],</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">"@com_google_protobuf//:descriptor_proto"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">cc_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_cc_proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">":silent_option_proto"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h4 id="go-1">Go</h4>
<p>You might have noticed that we simply ran a command to generate our BUILD.bazel in the proto directory. This is what gazelle is doing. It checks your file and determine how to create BUILD files. However, I think there are problems with this solution. The main one is the naming of our libraries. By now, you should have something like this:</p>
<ul class="code-tab-container cbdf3378-a175-460a-83a0-f85a774474de"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'cbdf3378-a175-460a-83a0-f85a774474de', 0)">proto/BUILD.bazel</a></li></ul><ul class="code-tab-switcher cbdf3378-a175-460a-83a0-f85a774474de"><li class="code_switcher_container_parent active-tab code_switcher_python 2071a5ad-0cf3-461e-a168-e3f9e0b9ef73"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:def.bzl"</span><span class="p">,</span> <span class="s">"go_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//proto:def.bzl"</span><span class="p">,</span> <span class="s">"go_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto_proto"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"silent_option.proto"</span><span class="p">],</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">"@com_google_protobuf//:descriptor_proto"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">go_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto_go_proto"</span><span class="p">,</span>
  <span class="n">importpath</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">,</span>
  <span class="n">proto</span> <span class="o">=</span> <span class="s">":proto_proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">go_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto"</span><span class="p">,</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":proto_go_proto"</span><span class="p">],</span>
  <span class="n">importpath</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>and these are using generic names based on the folder there are stored in (proto). Let's rename all that.</p>
<ul class="code-tab-container 8db3b929-f8c1-4306-8ac3-1fa3cd413680"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '8db3b929-f8c1-4306-8ac3-1fa3cd413680', 0)">proto/BUILD.bazel</a></li></ul><ul class="code-tab-switcher 8db3b929-f8c1-4306-8ac3-1fa3cd413680"><li class="code_switcher_container_parent active-tab code_switcher_python a0188e08-c77e-4ffa-bb81-729c85e8e7a9"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('a0188e08-c77e-4ffa-bb81-729c85e8e7a9')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:def.bzl"</span><span class="p">,</span> <span class="s">"go_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//proto:def.bzl"</span><span class="p">,</span> <span class="s">"go_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_proto"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_go_proto"</span><span class="p">,</span>
  <span class="n">proto</span> <span class="o">=</span> <span class="s">":silent_option_proto"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_library</span><span class="p">(</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":silent_option_go_proto"</span><span class="p">],</span>
  <span class="c1">#...
</span><span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h3 id="plugin">Plugin</h3>
<p>Finally, we arrive at the moment where we need to write the plugin. The goal of this plugin is reading a protobuf file and if it sees a field with silent_option, it will print the file name, the field and its related info, and the option content.</p>
<blockquote>
<p>Note: Since this is a very different process for different implementations of Protobuf, I will rely on code comment to explain what the code is doing.</p>
</blockquote>
<ul class="code-tab-container 3799f8ae-349c-4150-a9ca-07913f680ab8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '3799f8ae-349c-4150-a9ca-07913f680ab8', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '3799f8ae-349c-4150-a9ca-07913f680ab8', 1)">main.cc</a></li></ul><ul class="code-tab-switcher 3799f8ae-349c-4150-a9ca-07913f680ab8"><li class="code_switcher_container_parent active-tab code_switcher_go f89cde73-4412-4375-a930-7b065a1253b7"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('f89cde73-4412-4375-a930-7b065a1253b7')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"flag"</span>
  <span class="s">"log"</span>

  <span class="s">"google.golang.org/protobuf/compiler/protogen"</span>
  <span class="s">"google.golang.org/protobuf/proto"</span>
  <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

  <span class="n">pb</span> <span class="s">"test.com/proto"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">flags</span> <span class="n">flag</span><span class="o">.</span><span class="n">FlagSet</span>
  <span class="c">// defines the options that we can pass to our plugin</span>
  <span class="n">team</span> <span class="o">:=</span> <span class="n">flags</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"team"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"Filtering team"</span><span class="p">)</span>

  <span class="n">protogen</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
    <span class="n">ParamFunc</span><span class="o">:</span> <span class="n">flags</span><span class="o">.</span><span class="n">Set</span><span class="p">,</span> <span class="c">// the protobuf library will set the option into the flags variable</span>
  <span class="p">}</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">gen</span> <span class="o">*</span><span class="n">protogen</span><span class="o">.</span><span class="n">Plugin</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">gen</span><span class="o">.</span><span class="n">Files</span> <span class="p">{</span> <span class="c">// iterates over all the proto files given as source</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">file</span><span class="o">.</span><span class="n">Generate</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>

      <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">file</span><span class="o">.</span><span class="n">Messages</span> <span class="p">{</span> <span class="c">// iterates over the messages in the current file</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">field</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">message</span><span class="o">.</span><span class="n">Fields</span> <span class="p">{</span> <span class="c">// iterates over the fields in the current message</span>
          <span class="n">option</span> <span class="o">:=</span> <span class="n">field</span><span class="o">.</span><span class="n">Desc</span><span class="o">.</span><span class="n">Options</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">FieldOptions</span><span class="p">)</span> <span class="c">// try to get an option</span>

          <span class="k">if</span> <span class="n">option</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span> <span class="c">// if no option we skip</span>
            <span class="k">continue</span>
          <span class="p">}</span>

          <span class="n">extension</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">option</span><span class="p">,</span> <span class="n">pb</span><span class="o">.</span><span class="n">E_SilentOption</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">SilentOption</span><span class="p">)</span> <span class="c">// try to cast this option in SilentOption</span>

          <span class="k">if</span> <span class="n">extension</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="n">extension</span><span class="o">.</span><span class="n">Owner</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">team</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">extension</span><span class="o">.</span><span class="n">Owner</span> <span class="o">==</span> <span class="o">*</span><span class="n">team</span> <span class="p">{</span>
            <span class="c">// in here we have a SilentOption which as the owner equal to the team option pass in command line.</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">Desc</span><span class="o">.</span><span class="n">Name</span><span class="p">(),</span> <span class="n">field</span><span class="p">,</span> <span class="n">extension</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 95902274-23c1-412d-a20a-b3ef13bd90e0"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('95902274-23c1-412d-a20a-b3ef13bd90e0')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/plugin.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/code_generator.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/descriptor.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/io/printer.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/command_line_interface.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"proto/silent_option.pb.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">compiler</span><span class="p">;</span>

<span class="c1">// implementation of Generator interface</span>
<span class="k">class</span> <span class="nc">AuditGenerator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CodeGenerator</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="c1">// iterates over the files and call the Generate function</span>
  <span class="c1">// we are skipping error handling</span>
  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">GenerateAll</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">FileDescriptor</span><span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">files</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">parameter</span><span class="p">,</span>
    <span class="n">GeneratorContext</span> <span class="o">*</span><span class="n">generator_context</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">error</span>
  <span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">file</span> <span class="o">:</span> <span class="n">files</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Generate</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">generator_context</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// analyzes a file</span>
  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">Generate</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">FileDescriptor</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">parameter</span><span class="p">,</span>
    <span class="n">GeneratorContext</span> <span class="o">*</span><span class="n">generator_context</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">error</span>
  <span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="c1">// iterates over the messages in the current file</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">message_type_count</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">message</span> <span class="o">=</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">message_type</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

      <span class="c1">// iterates over the fields in the current message</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">field_count</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">field</span> <span class="o">=</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">field</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">options</span> <span class="o">=</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">options</span><span class="p">.</span><span class="n">HasExtension</span><span class="p">(</span><span class="n">silent_option</span><span class="p">))</span> <span class="p">{</span><span class="k">continue</span><span class="p">;}</span> <span class="c1">// if no SilentOption we skip</span>

        <span class="k">auto</span> <span class="n">extension</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">silent_option</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">extension</span><span class="p">.</span><span class="n">IsInitialized</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">parameter</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">extension</span><span class="p">.</span><span class="n">owner</span><span class="p">()</span> <span class="o">==</span> <span class="n">parameter</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// in here we have a SilentOption which as the owner equal to the team option pass in command line.</span>
          <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">": "</span> <span class="o">&lt;&lt;</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">DebugString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="n">AuditGenerator</span> <span class="n">generator</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">PluginMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">generator</span><span class="p">);</span> <span class="c1">// registers the generator</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>To compile this code, we need to create a BUILD.bazel file which will generate a binary for our application.</p>
<ul class="code-tab-container 07605cac-c703-4740-b65d-365ab036cdd7"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '07605cac-c703-4740-b65d-365ab036cdd7', 0)">BUILD.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '07605cac-c703-4740-b65d-365ab036cdd7', 1)">BUILD.bazel (C++)</a></li></ul><ul class="code-tab-switcher 07605cac-c703-4740-b65d-365ab036cdd7"><li class="code_switcher_container_parent active-tab code_switcher_shell 112a4416-6192-4154-88f9-aaafbba7dbc5"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('112a4416-6192-4154-88f9-aaafbba7dbc5')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //:gazelle
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 7acb49cd-b019-433d-b02d-924797fd234f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('7acb49cd-b019-433d-b02d-924797fd234f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_cc//cc:defs.bzl"</span><span class="p">,</span> <span class="s">"cc_binary"</span><span class="p">)</span>

<span class="n">cc_binary</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"main.cc"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"//proto:silent_option_cc_proto"</span><span class="p">,</span>
    <span class="s">"@com_google_protobuf//:protobuf"</span><span class="p">,</span>
    <span class="s">"@com_google_protobuf//:protoc_lib"</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h4 id="go-2">Go</h4>
<p>Same naming problem as the Protobuf section. Let us rename that.</p>
<ul class="code-tab-container 834cdbed-a62c-496a-a34a-c3a415d43022"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '834cdbed-a62c-496a-a34a-c3a415d43022', 0)">BUILD.bazel</a></li></ul><ul class="code-tab-switcher 834cdbed-a62c-496a-a34a-c3a415d43022"><li class="code_switcher_container_parent active-tab code_switcher_python 2f2ef28a-a14d-4c7e-adef-540d7b8c0369"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># gazelle related code ...
</span>
<span class="n">go_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit_lib"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_binary</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit"</span><span class="p">,</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":protoc-gen-audit_lib"</span><span class="p">],</span>
  <span class="c1">#...
</span><span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h3 id="running">Running</h3>
<p>We can now build our binaries by running:</p>
<div class="code_switcher_container_parent 377991b7-9a1b-46a3-a6c9-e64564af1e01"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('377991b7-9a1b-46a3-a6c9-e64564af1e01')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel build //:protoc-gen-audit
</code></pre></div></div>
</div>
<p>We also need to have a proto file to test our plugin.</p>
<ul class="code-tab-container 51dbc232-d703-49fb-8329-8a22724c017f"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '51dbc232-d703-49fb-8329-8a22724c017f', 0)">test.proto (Go)</a></li><li class=" code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '51dbc232-d703-49fb-8329-8a22724c017f', 1)">test.proto (C++)</a></li></ul><ul class="code-tab-switcher 51dbc232-d703-49fb-8329-8a22724c017f"><li class="code_switcher_container_parent active-tab code_switcher_proto fdd8d137-372f-4d5d-a749-16ca7f5db1be"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('fdd8d137-372f-4d5d-a749-16ca7f5db1be')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"proto/silent_option.proto"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"another_test.com"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team1"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team1@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
  <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team2"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team2@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_proto dfd67cf3-a05c-4368-a274-cb165dc36e98"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('dfd67cf3-a05c-4368-a274-cb165dc36e98')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"proto/silent_option.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team1"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team1@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
  <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team2"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team2@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now that we have our binaries in the <code>bazel-bin</code> directory, we can use them with protoc as plugins. To do so we use the <code>--plugin</code> option which takes the path of our binary and the option related to our plugin. For example, our plugin is called <code>protoc-gen-audit</code>, so now we can use the <code>--audit_out</code> option.</p>
<blockquote>
<p>Note: we also added a team flag in Go. This lets us use <code>--audit_opt=team=THE_TEAM_NAME</code>.</p>
</blockquote>
<ul class="code-tab-container 19c6e1f7-54b2-479e-b700-e566f86e975c"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '19c6e1f7-54b2-479e-b700-e566f86e975c', 0)">Go</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '19c6e1f7-54b2-479e-b700-e566f86e975c', 1)">C++</a></li></ul><ul class="code-tab-switcher 19c6e1f7-54b2-479e-b700-e566f86e975c"><li class="code_switcher_container_parent active-tab code_switcher_shell d6e6eb03-63e9-496f-95f6-cde8aea44e92"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d6e6eb03-63e9-496f-95f6-cde8aea44e92')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--plugin</span><span class="o">=</span>protoc-gen-audit<span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span>/bazel-bin/protoc-gen-audit_/protoc-gen-audit <span class="nt">--audit_out</span><span class="o">=</span><span class="nb">.</span> <span class="nt">--audit_opt</span><span class="o">=</span><span class="nv">team</span><span class="o">=</span>team1 test.proto
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 6fda9185-c47d-4be2-a28a-9ef7556c1cd1"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('6fda9185-c47d-4be2-a28a-9ef7556c1cd1')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--plugin</span><span class="o">=</span>protoc-gen-audit<span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span>/bazel-bin/protoc-gen-audit <span class="nt">--audit_out</span><span class="o">=</span>team1:. test.proto
</code></pre></div></div>
</li></ul>
<p>You can now play with your plugin and test with other team names.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Obviously, we can improve the solution in this post but the most important is that we saw that we can create custom options and protoc plugins. This can be interesting for compile time analysis or generating code. Finally, we saw that in this auditing use case, but we could use this in more advanced use cases (e.g.: <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a>).</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="C++" /><category term="Go" /><summary type="html"><![CDATA[Recently, I answered a StackOverflow question related to writing protoc plugins and Protobuf custom options. I thought this would be interesting to share how to write one because I believe this is quite an involved process and it fits the context of an article.]]></summary></entry><entry><title type="html">One Character to Save 200 Bytes</title><link href="https://clement-jean.github.io/one_character_to_save_200_bytes/" rel="alternate" type="text/html" title="One Character to Save 200 Bytes" /><published>2023-01-14T00:00:00+08:00</published><updated>2023-01-14T00:00:00+08:00</updated><id>https://clement-jean.github.io/one_character_to_save_200_bytes</id><content type="html" xml:base="https://clement-jean.github.io/one_character_to_save_200_bytes/"><![CDATA[<p>Recently, I've been working with <a href="https://techhub.social/@coderbyheart@chaos.social">Markus Tacker</a> on improving his <a href="https://github.com/coderbyheart/json-protobuf-comparison-wifi-site-survey">comparison of JSON vs. Protobuf for a Wifi Site Survey</a>. This has been a lot of fun and I thought I could do a simple post about what went well and what my mistakes were.</p>
<h2 id="looking-at-the-proto-file">Looking at the proto file</h2>
<p>Here is the proto file at the moment I was looking at it:</p>
<div class="code_switcher_container_parent 71b93ae0-7e00-4e5a-9138-c06c71315f6b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">WiFiSiteSurvey</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="n">AP</span> <span class="na">accesspoints</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">AP</span> <span class="p">{</span>
  <span class="kt">int64</span> <span class="na">mac</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">ssid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">rssi</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">channel</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The first thing that made me think about improving this schema is the use of repeated on a complex object. If you don't know why, I go into more details about why it is less efficient to use complex objects in a repeated field, in the article called <a href="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/">Packed vs. Unpacked Repeated Fields</a>.</p>
<p>Other than that, I didn't have any other idea at that point. I needed to analyze the data.</p>
<h2 id="analyzing-the-data">Analyzing the Data</h2>
<p>The first thing to do when you are dealing with data is to understand it and get a sense of the possible values you can have. One thing that came out directly after running the comparison script and analyzing the <a href="https://github.com/coderbyheart/json-protobuf-comparison-wifi-site-survey/blob/saga/sitesurvey.json">sitesurvey.json</a> is that all <code>rssi</code> properties are negative.</p>
<p>Now, I'm not an expert in wifi protocol but after searching online what <code>rssi</code> meant, I found that it's an acronym for Received Signal Strength Indicator and that it will always be a negative value ranging from -30 to -90 (see <a href="https://corecabling.com/understanding-received-signal-strength-rssi-in-your-wifi-network/">here</a>).</p>
<p>This is interesting because by knowing this range we know that we are dealing with a range that fits in the 32 bytes integers and we know that the numbers are all negative so we will prefer to use a sint instead of an int (TODO: article about sint vs int). And, if you look at the proto file shown above the <code>rssi</code> field has the type <code>int32</code>, which means that we are encoding all the values into 10 bytes (because negative values are encoded as big positive numbers).</p>
<p>OK, so, before applying the change, Markus got the following result:</p>
<div class="code_switcher_container_parent c4600fc3-da15-4eac-b802-c0eef78bba44"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 30
JSON payload length: 1949 bytes
Protobuf payload length: 966 bytes
</code></pre></div></div>
</div>
<p>This is already very nice because we save 50% of bytes in our payload. But, after changing <code>int32 rssi = 3;</code> to <code>sint32 rssi = 3;</code>, we got the following result:</p>
<div class="code_switcher_container_parent 4f4bbdd9-70b5-4e91-a0cf-6ca35be9bc23"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 30
JSON payload length: 1949 bytes
Protobuf payload length: 713 bytes
</code></pre></div></div>
</div>
<p>Two hundred+ bytes gone, with one character added. Pretty cool!</p>
<h2 id="back-to-the-original-idea">Back to the Original Idea</h2>
<p>Even though we saved 200 bytes, that wasn't my original idea on how to improve this proto file. As I mentioned I wanted to see if making the repeated field act on simple data could help.</p>
<p>Now, this is important to note that everything that comes after this wasn't added to the repository since we didn't entirely understand the requirements for the data. So I will show the assumption that we were making at that time and we will see how it was dismissed later. Here are the assumption:</p>
<ul>
<li>None of the fields are optional if an info is missing treat the data as erroneous.</li>
</ul>
<p>This is important because with that assumption we could make multiple repeated fields instead of having the <code>AP</code> message and we would save encoding a complex object. This would be lowering the payload size and then later on because all the lists have the same length we could do a zip between these lists to get the objects back (first object get first element of all the lists). So the proto file changed like so:</p>
<div class="code_switcher_container_parent f218c8ec-41b6-4ea8-a47c-36e1a174e796"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">WiFiSiteSurvey</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int64</span> <span class="na">macs</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">ssids</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">rssis</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">channels</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<blockquote>
<p>Note: <code>string</code> is a complex object so we are still using unpacked repeated field on <code>ssids</code>.</p>
</blockquote>
<p>We first filtered all the erroneous data in the dataset and rerun the comparison. Here is the result:</p>
<div class="code_switcher_container_parent ee2ae0ac-7585-43ce-980c-328fe1810f1d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 24
JSON payload length: 1949 bytes
Protobuf payload length: 510 bytes
</code></pre></div></div>
</div>
<p>Another 200 bytes gone.</p>
<h2 id="why-the-repeated-trick-didnt-work">Why the repeated 'trick' didn't work</h2>
<p>This mostly didn't work because some of the fields in <code>AP</code> are actually optional. This means that either we would have to add empty wrappers into the lists to get the lists have the same length (not worth, the payload size would be bigger than 713 bytes) or we go back to our <code>AP</code> message after the <code>sint32</code> improvement.</p>
<p>The second thing that is not making this approach work is that, if you noticed, we are lowering the payload but we are doing more computation in our code. We need to do a zip afterwards. This might be fine if this is internal to your company and well documented. However, if this is a client facing proto file, this might just make their life harder.</p>
<p><strong>Lesson: Know your data requirements!</strong></p>
<h2 id="other-improvements">Other Improvements</h2>
<p>Here is a list of further improvements, added or not yet added, that are not impacting payload size:</p>
<ul>
<li>Change <code>uint32 timestamp = 1;</code> to <code>uint64 timestamp = 1;</code> for accepting a bigger range of numbers.</li>
<li>Change <code>int32 channel = 4;</code> to <code>uint32 channel = 4;</code> for invalidating negative numbers on the client side.</li>
<li>Change <code>int64 mac = 1;</code> to <code>uint64 mac = 1;</code> for invalidating negative numbers on the client side (I'm not sure yet, but this seems possible).</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>We saw that by knowing your data and knowing the encoding algorithm behind Protobuf, we can get really big payload size improvements. However, we still need to care about the usage of our proto files and be more accurate on the different data requirements; otherwise we will implement obscure 'fixes' and in the end they will not be needed.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[Recently, I've been working with Markus Tacker on improving his comparison of JSON vs. Protobuf for a Wifi Site Survey. This has been a lot of fun and I thought I could do a simple post about what went well and what my mistakes were.]]></summary></entry><entry><title type="html">Packed vs Unpacked Repeated Fields</title><link href="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/" rel="alternate" type="text/html" title="Packed vs Unpacked Repeated Fields" /><published>2023-01-05T00:00:00+08:00</published><updated>2023-01-05T00:00:00+08:00</updated><id>https://clement-jean.github.io/packed_vs_unpacked_repeated_fields</id><content type="html" xml:base="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/"><![CDATA[<p>As this is a common and not well documented mistake that developers are doing, I decided to do a post explaining the problem that you might face when using repeated fields in your Protobuf messages.</p>
<p>Be sure to open any refresher section if you feel like you are not sure about a topic. We are going to use them during this post.</p>
<p>
<details><summary><b>Refresher #1: Repeated Fields</b></summary>
<p>A repeated field is a field that can contain 0 or more values. In other words, this is a list. We can create such a field by simply adding a `repeated` modifier in front of the field. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span></code></pre></figure>
</p>
</details>
</p>
<p>
<details><summary><b>Refresher #2: Field Options</b></summary>
<p>A field option is some additional information that will be affecting the compilation and thus the code generation. These options can be defined as key value pairs between square brackets between the field tag and the semicolon. In this post we are going to use the <code>packed</code> option, which takes a boolean as value and can only be used on repeated field. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-proto" data-lang="proto"><span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">packed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span></code></pre></figure>
</p>
</details>
</p>
<p>
<details><summary><b>Refresher #3: Protobuf Text Format</b></summary>
<p>Protobuf does not exclusively encode to binary. It is possible to encode to JSON or to a format that is close to JSON. This text format is generally used for improving readability/writeability (nobody wants to read/write binary) and enhance your debugging or analysis of your messages. I will not go into too much detail about this here, but to write a repeated field, you can simply repeated the field name as many times as you want to add value to the field, followed by a colon and the value. This looks like this:</p>
<p>
<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">ids</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s">3</span></code></pre></figure>
</p>
</details>
</p>
</p>
<h2 id="packed">Packed</h2>
<p>Let's start with packed repeated fields. In order to see how they are encoded we are going to use <code>protoc --encode</code> and pass it the content of some file defining the values in Protobuf Text Format. In this text file, let's define 3 values:</p>
<ul class="code-tab-container 1694e11a-039e-4ae2-9d1c-19e3172198cd"><li class="active-tab code_switcher_yaml"><a onclick="selectTab('code_switcher_yaml', '1694e11a-039e-4ae2-9d1c-19e3172198cd', 0)">repeated.txt</a></li></ul><ul class="code-tab-switcher 1694e11a-039e-4ae2-9d1c-19e3172198cd"><li class="code_switcher_container_parent active-tab code_switcher_yaml 038f8626-6077-4676-9d2a-c63410f32a3e"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('038f8626-6077-4676-9d2a-c63410f32a3e')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ids</span><span class="pi">:</span> <span class="m">1</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">2</span>
<span class="na">ids</span><span class="pi">:</span> <span class="m">3</span>
</code></pre></div></div>
</li></ul>
<p>Then, for our proto file, we are going to store these values in a message called <code>PackedRepeated</code> that has a field of type <code>repeated int32</code>.</p>
<ul class="code-tab-container 21d048a0-e85d-47dd-a131-aa8abe3a46fb"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '21d048a0-e85d-47dd-a131-aa8abe3a46fb', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher 21d048a0-e85d-47dd-a131-aa8abe3a46fb"><li class="code_switcher_container_parent active-tab code_switcher_proto 58b5ba0c-1213-4e9f-b167-d1d371f24b70"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('58b5ba0c-1213-4e9f-b167-d1d371f24b70')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">PackedRepeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And finally, we need to use the <code>--encode</code> flag from protoc, which let us take some binary content on the standard input and write some protobuf encoded message on the standard output. To take advantage of this we are going to display the content of a file on the standard output, pipe that to the standard input of protoc and finally, pipe the standard output of protoc to a command that displays a hexadecimal dump.</p>
<ul class="code-tab-container b675188f-55db-4fa5-947a-1e2e0e06b5e4"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'b675188f-55db-4fa5-947a-1e2e0e06b5e4', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'b675188f-55db-4fa5-947a-1e2e0e06b5e4', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher b675188f-55db-4fa5-947a-1e2e0e06b5e4"><li class="code_switcher_container_parent active-tab code_switcher_shell 895a8a57-3d16-4d05-9649-d2c3d02a8e5c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 03 01 02 03                                    |.....|
00000005
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell f888d1cb-5b6b-4482-8239-818cef9fdc61"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: /Users/clement/Git/experiment/out.bin

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 03 01 02 03                                  �����
</span></code></pre></div></div>
</li></ul>
<p>So here we can see that the end result of encoding <code>repeated.txt</code> content as <code>PackedRepeated</code> is <code>0A 03 01 02 03</code>. What does that mean? Let's decrypt that.</p>
<p>To do that, we can simply take each hexadecimal number and transform it into binary. While this is pretty simple numbers, let's use the command line to make sure we don't slip up and have wrong binary.</p>
<ul class="code-tab-container 793752f5-9cad-4eea-8d14-f85acfbd44da"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '793752f5-9cad-4eea-8d14-f85acfbd44da', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '793752f5-9cad-4eea-8d14-f85acfbd44da', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 793752f5-9cad-4eea-8d14-f85acfbd44da"><li class="code_switcher_container_parent active-tab code_switcher_shell bd76b51b-1d86-4139-b32a-e53cbfc2114e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 0A"</span> | bc
1010

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 03"</span> | bc
11

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 01"</span> | bc
1

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 02"</span> | bc
10
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 6f87bcdd-05ac-4aad-bdfa-b2eb822d91e8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x0A, 2<span class="o">)</span>
1010

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x03, 2<span class="o">)</span>
11

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x01, 2<span class="o">)</span>
1

<span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x02, 2<span class="o">)</span>
10
</code></pre></div></div>
</li></ul>
<blockquote>
<p>Note: When you are using integers that are not fixed, you are dealing with varints. This means that the bigger the value, the bigger the number of bytes it will be encoded in. In our example, we purposely chose small numbers so that they are encoded into one byte. The following encoding explanation is not correct for all numbers you might use.</p>
</blockquote>
<ul>
<li><code>0A</code> gives us <code>1010</code>. This is a byte that represent both the wire type (type of value) and the field tag. To get the wire type, we simply take the first 3 bits starting from the right. In our case this is <code>010</code> or 2. if you check the <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure">Encoding</a> page of Protobuf Documentation, this means that we have a Length-Delimited type. In other words, we have some kind of data that has a dynamic size. This is exactly what we have, this is a list. Then, we are left with a tag equal to 1.</li>
<li><code>03</code> gives us <code>11</code>. This is the actual length of the list. Here we have 3 values.</li>
<li><code>01</code>, <code>02</code> and <code>03</code> (we omitted it, because we know the result), gives us respectively <code>1</code>, <code>10</code> and <code>11</code>. These are the actual values that we added into the list.</li>
</ul>
<p>In the end, we have 5 bytes, 1 byte for type + tag, 1 byte for the list length, and 3 bytes for the values. Pretty compact.</p>
<h2 id="unpacked">Unpacked</h2>
<p>Let's now see how the same values are encoded in an unpacked repeated field. To do that, we are going to use the <code>packed</code> field option. We are going to set that to false so that protoc skip the packing.</p>
<ul class="code-tab-container 71c1da18-e606-43c2-bbe7-4c6411159e5a"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '71c1da18-e606-43c2-bbe7-4c6411159e5a', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher 71c1da18-e606-43c2-bbe7-4c6411159e5a"><li class="code_switcher_container_parent active-tab code_switcher_proto 0007f309-5466-43d3-a20b-f5737ae6c344"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('0007f309-5466-43d3-a20b-f5737ae6c344')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">UnpackedRepeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span><span class="k">packed</span> <span class="o">=</span> <span class="kc">false</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that done, we can now run similar commands as what we did in the <code>Packed</code> section. The only difference is that, now, we need to specify that we want to encode the data as <code>UnpackedRepeated</code>.</p>
<ul class="code-tab-container 0a0bddda-24d5-47c5-8a43-36adf5aa02c6"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '0a0bddda-24d5-47c5-8a43-36adf5aa02c6', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '0a0bddda-24d5-47c5-8a43-36adf5aa02c6', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 0a0bddda-24d5-47c5-8a43-36adf5aa02c6"><li class="code_switcher_container_parent active-tab code_switcher_shell 878c6123-626e-43f4-b1ad-8fd5dd9ce003"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  08 01 08 02 08 03                                 |......|
00000006
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell e743c218-2fa7-42f8-9f98-97e9c47e6e85"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;01DCACCB&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 08 01 08 02 08 03                               ������
</span></code></pre></div></div>
</li></ul>
<p>And ... We have six bytes.</p>
<p>There are two things we can notice here. The first is that now we don't have any <code>0A</code> byte. And the second one is that we are interleaving <code>08</code> with our values. Let's find out how this was encoded.</p>
<p>As we already know the values for <code>01</code>, <code>02</code> and <code>03</code>, we can just convert <code>08</code>.</p>
<ul class="code-tab-container 61a8687c-25b3-40bc-902c-0ff70acff20e"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '61a8687c-25b3-40bc-902c-0ff70acff20e', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '61a8687c-25b3-40bc-902c-0ff70acff20e', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 61a8687c-25b3-40bc-902c-0ff70acff20e"><li class="code_switcher_container_parent active-tab code_switcher_shell f0850e24-89e5-4f36-99f3-2c7d5fe88bfe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"ibase=16; obase=2; 08"</span> | bc
1000
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell b7c2a3b2-1f4c-496b-b200-4cdac6bb54de"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">[</span>Convert]::ToString<span class="o">(</span>0x08, 2<span class="o">)</span>
1000
</code></pre></div></div>
</li></ul>
<ul>
<li><code>08</code> gives us <code>1000</code>. Once again this is the combination of wire type and field tag. So we have 0 for the wire type, which corresponds to varint. And then the field tag is 1.</li>
</ul>
<p>So in this case, we are basically encoding each value of the list as a separate field. Protobuf will then see that the <code>ids</code> field is repeated and that we are adding multiple values with the same field tag and it will just add these values to the list.</p>
<p>In the end, Protobuf is encoding <code>UnpackedRepeated</code> into six bytes instead of five. This sounds negligible here because we have a simple example but if you run the example on 100 ids:</p>
<blockquote>
<p>You can generate the repeated.txt by running this in your shell:</p>
<ul class="code-tab-container 1c560c46-54b2-4f6e-87b6-e1ef1a9bab4f"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '1c560c46-54b2-4f6e-87b6-e1ef1a9bab4f', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '1c560c46-54b2-4f6e-87b6-e1ef1a9bab4f', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 1c560c46-54b2-4f6e-87b6-e1ef1a9bab4f"><li class="code_switcher_container_parent active-tab code_switcher_shell a7584f46-2f37-44e6-a619-e89f12daa010"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('a7584f46-2f37-44e6-a619-e89f12daa010')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..100<span class="o">}</span>
<span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"ids: </span><span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> repeated.txt
<span class="k">done</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 6cd228ff-b519-48fb-adf0-31f6c736cf49"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('6cd228ff-b519-48fb-adf0-31f6c736cf49')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>foreach <span class="o">(</span><span class="nv">$i</span> <span class="k">in </span>1..100<span class="o">)</span> <span class="o">{</span>
  Add-Content <span class="nt">-Path</span> <span class="s2">"repeated1.txt"</span> <span class="nt">-Value</span> <span class="s2">"ids: </span><span class="nv">$i</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div>
</li></ul></blockquote>
<ul class="code-tab-container 5f0cc511-85bc-479a-be83-83ebb1012da4"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '5f0cc511-85bc-479a-be83-83ebb1012da4', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '5f0cc511-85bc-479a-be83-83ebb1012da4', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 5f0cc511-85bc-479a-be83-83ebb1012da4"><li class="code_switcher_container_parent active-tab code_switcher_shell 82a40cd8-fb41-4ca9-8fe3-b1f7aa4f6f9e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 64 01 02 03 04 05 06  07 08 09 0a 0b 0c 0d 0e  |.d..............|
00000010  0f 10 11 12 13 14 15 16  17 18 19 1a 1b 1c 1d 1e  |................|
00000020  1f 20 21 22 23 24 25 26  27 28 29 2a 2b 2c 2d 2e  |. <span class="o">!</span><span class="s2">"#</span><span class="nv">$%</span><span class="s2">&amp;'()*+,-.|
00000030  2f 30 31 32 33 34 35 36  37 38 39 3a 3b 3c 3d 3e  |/0123456789:;&lt;=&gt;|
00000040  3f 40 41 42 43 44 45 46  47 48 49 4a 4b 4c 4d 4e  |?@ABCDEFGHIJKLMN|
00000050  4f 50 51 52 53 54 55 56  57 58 59 5a 5b 5c 5d 5e  |OPQRSTUVWXYZ[</span><span class="se">\]</span><span class="s2">^|
00000060  5f 60 61 62 63 64                                 |_</span><span class="sb">`</span>abcd|
00000066

<span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>UnpackedRepeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  08 01 08 02 08 03 08 04  08 05 08 06 08 07 08 08  |................|
00000010  08 09 08 0a 08 0b 08 0c  08 0d 08 0e 08 0f 08 10  |................|
00000020  08 11 08 12 08 13 08 14  08 15 08 16 08 17 08 18  |................|
00000030  08 19 08 1a 08 1b 08 1c  08 1d 08 1e 08 1f 08 20  |............... |
00000040  08 21 08 22 08 23 08 24  08 25 08 26 08 27 08 28  |.!.<span class="s2">".#.</span><span class="nv">$.</span><span class="s2">%.&amp;.'.(|
00000050  08 29 08 2a 08 2b 08 2c  08 2d 08 2e 08 2f 08 30  |.).*.+.,.-.../.0|
00000060  08 31 08 32 08 33 08 34  08 35 08 36 08 37 08 38  |.1.2.3.4.5.6.7.8|
00000070  08 39 08 3a 08 3b 08 3c  08 3d 08 3e 08 3f 08 40  |.9.:.;.&lt;.=.&gt;.?.@|
00000080  08 41 08 42 08 43 08 44  08 45 08 46 08 47 08 48  |.A.B.C.D.E.F.G.H|
00000090  08 49 08 4a 08 4b 08 4c  08 4d 08 4e 08 4f 08 50  |.I.J.K.L.M.N.O.P|
000000a0  08 51 08 52 08 53 08 54  08 55 08 56 08 57 08 58  |.Q.R.S.T.U.V.W.X|
000000b0  08 59 08 5a 08 5b 08 5c  08 5d 08 5e 08 5f 08 60  |.Y.Z.[.</span><span class="se">\.</span><span class="s2">].^._.</span><span class="sb">`</span>|
000000c0  08 61 08 62 08 63 08 64                           |.a.b.c.d|
000000c8
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 3019729f-bc7a-4a86-aa42-b140dde6d1e8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>PackedRepeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;470F6C47&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 64 01 02 03 04 05 06 07 08 09 0A 0B 0C 0A 0E �d��������������
0000000000000010 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E ����������������
0000000000000020 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E � !"</span><span class="c">#$%&amp;'()*+,-.</span>
0000000000000030 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E /0123456789:<span class="p">;</span>&lt;<span class="o">=&gt;</span>
0000000000000040 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E ?@ABCDEFGHIJKLMN
0000000000000050 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E OPQRSTUVWXYZ[<span class="se">\]</span>^
0000000000000060 5F 60 61 62 63 64                               _<span class="sb">`</span><span class="s2">abcd

</span><span class="nv">$ </span><span class="s2">(Get-Content ./repeated.txt | protoc --encode=UnpackedRepeated proto/repeated.proto) -join "</span><span class="sb">`</span>n<span class="s2">" | Format-Hex
   Label: String (System.String) &lt;6F5008AF&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 08 01 08 02 08 03 08 04 08 05 08 06 08 07 08 08 ����������������
0000000000000010 08 09 08 0A 08 0B 08 0C 08 0A 08 0E 08 0F 08 10 ����������������
0000000000000020 08 11 08 12 08 13 08 14 08 15 08 16 08 17 08 18 ����������������
0000000000000030 08 19 08 1A 08 1B 08 1C 08 1D 08 1E 08 1F 08 20 ���������������
0000000000000040 08 21 08 22 08 23 08 24 08 25 08 26 08 27 08 28 �!�"</span>�#�<span class="nv">$�</span>%�&amp;�<span class="s1">'�(
0000000000000050 08 29 08 2A 08 2B 08 2C 08 2D 08 2E 08 2F 08 30 �)�*�+�,�-�.�/�0
0000000000000060 08 31 08 32 08 33 08 34 08 35 08 36 08 37 08 38 �1�2�3�4�5�6�7�8
0000000000000070 08 39 08 3A 08 3B 08 3C 08 3D 08 3E 08 3F 08 40 �9�:�;�&lt;�=�&gt;�?�@
0000000000000080 08 41 08 42 08 43 08 44 08 45 08 46 08 47 08 48 �A�B�C�D�E�F�G�H
0000000000000090 08 49 08 4A 08 4B 08 4C 08 4D 08 4E 08 4F 08 50 �I�J�K�L�M�N�O�P
00000000000000A0 08 51 08 52 08 53 08 54 08 55 08 56 08 57 08 58 �Q�R�S�T�U�V�W�X
00000000000000B0 08 59 08 5A 08 5B 08 5C 08 5D 08 5E 08 5F 08 60 �Y�Z�[�\�]�^�_�`
00000000000000C0 08 61 08 62 08 63 08 64                         �a�b�c�d
</span></code></pre></div></div>
</li></ul>
<p>you will get 102 bytes with the packed version and 200 with the unpacked one. Ouch!</p>
<h2 id="ill-never-use-codepacked--falsecode-so-whats-the-problem">I'll never use <code>packed = false</code>, so what's the problem?</h2>
<p>As of now, we were using an example that would probably never appear in real life. So now, it's time to get back in touch with reality. Let's say that instead of storing as <code>int32</code> you want to store your ids as strings. To test that, we can create a Simple message called <code>Repeated</code> with a repeated string field.</p>
<ul class="code-tab-container 2126e0c3-22f3-4b34-b512-1e0445a1af04"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '2126e0c3-22f3-4b34-b512-1e0445a1af04', 0)">repeated.proto</a></li></ul><ul class="code-tab-switcher 2126e0c3-22f3-4b34-b512-1e0445a1af04"><li class="code_switcher_container_parent active-tab code_switcher_proto 553371ee-2513-4b46-bec1-44d8bf5cb08b"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('553371ee-2513-4b46-bec1-44d8bf5cb08b')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Repeated</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">ids</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and change our text file to specify string values.</p>
<ul class="code-tab-container 303da9ee-095a-409d-9e8e-d050a4f70f0a"><li class="active-tab code_switcher_yaml"><a onclick="selectTab('code_switcher_yaml', '303da9ee-095a-409d-9e8e-d050a4f70f0a', 0)">repeated.txt</a></li></ul><ul class="code-tab-switcher 303da9ee-095a-409d-9e8e-d050a4f70f0a"><li class="code_switcher_container_parent active-tab code_switcher_yaml d0cc75f1-ad6f-45dc-aebf-18bae9492004"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d0cc75f1-ad6f-45dc-aebf-18bae9492004')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1"</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
<span class="na">ids</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>
</code></pre></div></div>
</li></ul>
<p>After that, we are familiar how to encode that, we can just change the <code>--encode</code> flag value to <code>Repeated</code>.</p>
<ul class="code-tab-container 70451a4b-ebd4-44f4-914b-57230212a709"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '70451a4b-ebd4-44f4-914b-57230212a709', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '70451a4b-ebd4-44f4-914b-57230212a709', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 70451a4b-ebd4-44f4-914b-57230212a709"><li class="code_switcher_container_parent active-tab code_switcher_shell c3a0c4a2-e6a3-449d-8c9a-93bfbc4016f0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>Repeated proto/repeated.proto | hexdump <span class="nt">-C</span>
00000000  0a 01 31 0a 01 32 0a 01  33                       |..1..2..3|
00000009
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 90a286dd-cbb4-47db-b4ac-e719a8d194c3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span>Get-Content ./repeated.txt | protoc <span class="nt">--encode</span><span class="o">=</span>Repeated proto/repeated.proto<span class="o">)</span> <span class="nt">-join</span> <span class="s2">"</span><span class="sb">`</span>n<span class="s2">" | Format-Hex

   Label: String (System.String) &lt;7AB0A992&gt;

          Offset Bytes                                           Ascii
                 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
          ------ ----------------------------------------------- -----
0000000000000000 0A 01 31 0A 01 32 0A 01 33                      ��1��2��3
</span></code></pre></div></div>
</li></ul>
<p>Does it look familiar to you? Yes, we are interleaving <code>0A</code> (length-delimited type with tag 1) with the values (two bytes, <code>01</code> is the length and <code>31</code>, <code>32</code>, <code>33</code> are the ASCII values for <code>1</code>, <code>2</code>, <code>3</code>).</p>
<p>This is basically showing us that, even though repeated fields are packed by default, some types cannot be packed. This is the case for the following types:</p>
<ul>
<li><code>bytes</code></li>
<li><code>string</code></li>
<li>User defined Types (messages)</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>The overall idea of this post was to explain that some types are not 'packable' when used in repeated fields. Simple types like varints and other numbers can be packed but more complex types cannot. This can cause performance problems and this can even result in poor performance compared to JSON. So the thing to keep in mind when using repeated field is that we should mostly use it with numbers. For other types, use <code>repeated</code> with caution.</p>
<p><strong>If you find this kind of article interesting or you would like me to cover some topic on Protobuf or gRPC, be sure to let me know in the comments.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[As this is a common and not well documented mistake that developers are doing, I decided to do a post explaining the problem that you might face when using repeated fields in your Protobuf messages.]]></summary></entry><entry><title type="html">gRPC Go Server Embeddings</title><link href="https://clement-jean.github.io/grpc_go_embeddings/" rel="alternate" type="text/html" title="gRPC Go Server Embeddings" /><published>2022-12-10T00:00:00+08:00</published><updated>2022-12-10T00:00:00+08:00</updated><id>https://clement-jean.github.io/grpc_go_embeddings</id><content type="html" xml:base="https://clement-jean.github.io/grpc_go_embeddings/"><![CDATA[<p>One of the common thing that my students are asking about recently is the difference between 2 Type Embeddings when your are defining a Server type for Service Registration. While this is an important topic, the gRPC doc seems to only mention that the <code>Unimplemented</code> version is for Forward Compatibility, and my course, up until now, uses the name of the generated Service Server directly. As such, I thought I would give an explanation on why I now recommend to use <code>Unimplemented</code> and some examples of the 3 Type Embeddings that you can use.</p>
<h2 id="type-embedding">Type Embedding</h2>
<p>One thing that might not be clear for everyone is what is a Type Embedding and why we need it in gRPC. The first thing to understand is that Go is a language that uses composition instead of inheritance. And if you don't know about Composition or you just want a refresher, you friend Wikipedia is here: <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Composition over Inheritance</a>.</p>
<p>On top of composition, Go allows anonymous fields in a struct. While I think anonymous field is a misnomer because the field can be referenced by the type name, these provide a shorter way (no need for Identifier) of writing composition. Let's take an example:</p>
<div class="code_switcher_container_parent 85235874-c1e0-4ed5-9a1f-9e8405a94f0e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">A</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">s</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">B</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">s</span> <span class="kt">string</span>
	<span class="n">A</span> <span class="c">// no identifier here, just a type</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">b</span> <span class="n">B</span>

	<span class="n">b</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">"Test"</span>
	<span class="n">b</span><span class="o">.</span><span class="n">A</span><span class="o">.</span><span class="n">s</span> <span class="o">=</span> <span class="s">"Another Test"</span> <span class="c">// notice that we can access A even if it's 'anonymous'</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>In this example, we augmented <code>B</code> with the fields defined in <code>A</code>. The ouput of this program should be something like: <code>{Test {Another Test}}</code> where the outter object is <code>B</code> and the inner object is <code>A</code>.</p>
<p>So in the end this is just a convenient way of writing composition.</p>
<h2 id="grpc-go">gRPC Go</h2>
<p>Now, that we are clear on what is a Type Embedding, we can talk about its role in gRPC. As we know the protoc compiler will generate some code for our services, and we also know that services are contracts between a server and client. So basically, because we have a contract we need to make sure that this is implemented on both side of the wire.</p>
<p>So if we define a dummy service:</p>
<div class="code_switcher_container_parent 26ec1386-9c2a-4409-b974-6c717e9787cf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">DummyService</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
</div>
<p>And we generate our code:</p>
<div class="code_switcher_container_parent b93054af-da3a-4356-a341-d4648d46ca0e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--grpc-go_out</span><span class="o">=</span><span class="nb">.</span> dummy.proto 
</code></pre></div></div>
</div>
<p>We have the following generated server code (simplified):</p>
<div class="code_switcher_container_parent 4a11f20b-6b6c-49cb-9840-f536bd1f5e43"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// DummyServiceServer is the server API for DummyService service.</span>
<span class="c">// All implementations must embed UnimplementedDummyServiceServer</span>
<span class="c">// for foward compatibility</span>
<span class="k">type</span> <span class="n">DummyServiceServer</span> <span class="k">interface</span> <span class="p">{</span>
	<span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span>
<span class="p">}</span>

<span class="c">// UnimplementedDummyServiceServer must be embedded to have forward compatible implementations.</span>
<span class="k">type</span> <span class="n">UnimplementedDummyServiceServer</span> <span class="k">struct</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">UnimplementedDummyServiceServer</span><span class="p">)</span> <span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span> <span class="p">{}</span>

<span class="c">// UnsafeDummyServiceServer may be embedded to opt out of forward compatibility for this service.</span>
<span class="c">// Use of this interface is not recommended, as added methods to DummyServiceServer will</span>
<span class="c">// result in compilation errors.</span>
<span class="k">type</span> <span class="n">UnsafeDummyServiceServer</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">mustEmbedUnimplementedDummyServiceServer</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>First, we can notice a <code>mustEmbedUnimplementedDummyServiceServer</code> function. While I'm not entirely sure what this is doing since I can still compile without the <code>Unimplemented</code> embedding, I read on <a href="https://github.com/grpc/grpc-go/issues/3794">Issue 3794</a> that <code>RegisterDummyService</code> will require (probrably in the future) the Server to embed the <code>UnimplementedDummyServiceServer</code>.</p>
<p>Then, as mentionned in the <code>DummyServiceServer</code> documentation, this is the server API. This means that when we add rpc endpoints to our service in the .proto file, methods will be generated into that interface.</p>
<p>The second type will always be empty. However, once we add rpc endpoints, a method will be added to this type and this method will simply return a gRPC error.</p>
<p>And finally, the last type will stay as is and no methods will be added to it.</p>
<h2 id="servicenameserver">${ServiceName}Server</h2>
<p>This is the type embedding I used in my course. However, this is a mistake to use this directly. Let's see why.</p>
<p>Let's first add a rpc endpoint to our DummyService, this will help when we actually want to see the difference between the type embeddings by calling an endpoint.</p>
<div class="code_switcher_container_parent cff2f12e-1353-42db-8768-3a3a08eaee59"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google/protobuf/empty.proto"</span><span class="p">;</span>

<span class="kd">service</span> <span class="n">DummyService</span> <span class="p">{</span>
	<span class="k">rpc</span> <span class="n">GetDummy</span><span class="p">(</span><span class="n">google.protobuf.Empty</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">google.protobuf.Empty</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Then our Server type will look like this:</p>
<div class="code_switcher_container_parent 3cfa0430-939b-448e-a6b2-0b8645fa9304"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="k">struct</span> <span class="n">Server</span> <span class="p">{</span>
	<span class="n">DummyServiceServer</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>So, right now, we didn't implement <code>GetDummy</code> rpc endpoint. What happens if we try to call it ? The server runs perfectly, no compilation error, but once you call the rpc endpoint it will panic. This is where this type embedding is not Forward Compatible because an service which doesn't have a complete implementation of our service might cause a panic when comunicating with one that has the implementation.</p>
<h2 id="unsafeservicenameserver">Unsafe${ServiceName}Server</h2>
<p>Let's skip the <code>Unimplemented</code> for now and let's take a look at the <code>Unsafe</code> type emdeding. Before explaining it though, I want to mention two things:</p>
<ul>
<li><code>Unsafe</code> sounds really bad. However in some specific cases, this embedding might actually be useful.</li>
<li>The type documentation says that this type is not recommended, but once again, be aware that it might be useful.</li>
</ul>
<p>With that said, let's get started. Let's replace our type embedding:</p>
<div class="code_switcher_container_parent beb540bd-1900-4f0c-9be9-ea41c663e004"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="k">struct</span> <span class="n">Server</span> <span class="p">{</span>
	<span class="n">UnsafeDummyServiceServer</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>In this case, calling an unimplemented endpoint will also result in a panic at runtime, but the main difference here is that this types embedding will help you to catch the unimplemented endpoints at compile time. This means that each time you add a rpc endpoint it will force you to implement it in your Go code. I actually like that approach more but the problem of panic at runtime is still here.</p>
<p>So in most of cases this is something you will not use because this is similar to the previous type embedding we showed. It will panic at runtime if a rpc endpoint is not defined. However, if you can control all your clients and servers, meaning that you can update all of them at the same time (and for eternity), this type embedding is actually safer (ironic, right ?) because it helps you to discover all the unimplemented rpc endpoint in your service at compile time.</p>
<h2 id="unimplementedservicenameserver">Unimplemented${ServiceName}Server</h2>
<p>And now, here is the one that you should use in most of the cases. This type embedding, as mentionned earlier will get a default implementation for all rpc endpoint added in the service. This means that for the service that we defined earlier, we are going to have the following method generated:</p>
<div class="code_switcher_container_parent dd2a4022-decd-429c-a759-5476e5b73295"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">UnimplementedDummyServiceServer</span><span class="p">)</span> <span class="n">GetDummy</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="o">*</span><span class="n">emptypb</span><span class="o">.</span><span class="n">Empty</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">emptypb</span><span class="o">.</span><span class="n">Empty</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">status</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Unimplemented</span><span class="p">,</span> <span class="s">"method GetDummy not implemented"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>And now we basically have Forward Compatibility because if a service without full implementation is called, it will just return a gRPC error and will not panic.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In conclusion, you might have use cases where you actually need <code>Unsafe</code> type embedding but most of the time use the <code>Unimplemented</code> one. As for the other type embedding, forget it, there is no advantage in using it, only disadvantages. I hope this was helpful and see you in the next post.</p>]]></content><author><name>Clement</name></author><category term="gRPC" /><category term="Go" /><summary type="html"><![CDATA[One of the common thing that my students are asking about recently is the difference between 2 Type Embeddings when your are defining a Server type for Service Registration. While this is an important topic, the gRPC doc seems to only mention that the Unimplemented version is for Forward Compatibility, and my course, up until now, uses the name of the generated Service Server directly. As such, I thought I would give an explanation on why I now recommend to use Unimplemented and some examples of the 3 Type Embeddings that you can use.]]></summary></entry><entry><title type="html">Protocol Buffers varint vs fixed</title><link href="https://clement-jean.github.io/protobuf-varint-vs-fixed/" rel="alternate" type="text/html" title="Protocol Buffers varint vs fixed" /><published>2022-10-02T00:00:00+08:00</published><updated>2022-10-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/protobuf-varint-vs-fixed</id><content type="html" xml:base="https://clement-jean.github.io/protobuf-varint-vs-fixed/"><![CDATA[<p>This article is much more a note to myself than something else but this might be interesting for people out there.</p>
<p>I wanted to calculate the thresholds at which it is better it is to use a <code>fixed</code> rather than a varint. <!--desc--> Now, knowing that the varint are encoded in base 128, this basically means that we are dealing with power of 128. This gives us the following table:</p>
<div class="table-responsive">
<table class="table table-striped table-borderless">
  <thead>
    <tr>
      <th scope="col" class="text-center">Threshold value</th>
      <th scope="col" class="text-center">Bytes size (without tag)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row" class="text-center">0</th>
      <td class="text-center">0</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">1</th>
      <td class="text-center">1</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">128</th>
      <td class="text-center">2</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">16,384</th>
      <td class="text-center">3</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">2,097,152</th>
      <td class="text-center">4</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">268,435,456</th>
      <td class="text-center">5</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">34,359,738,368</th>
      <td class="text-center">6</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">4,398,046,511,104</th>
      <td class="text-center">7</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">562,949,953,421,312</th>
      <td class="text-center">8</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">72,057,594,037,927,936</th>
      <td class="text-center">9</td>
    </tr>
  </tbody>
</table>
</div>
<p>In summary:</p>
<ul>
<li>From 268,435,456 to whatever limit you 32 bits type has, it is better to use a <code>fixed32</code>.</li>
<li>From 72,057,594,037,927,936 to whatever limit you 64 bits type has, it is better to use a <code>fixed64</code>.</li>
</ul>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[This article is much more a note to myself than something else but this might be interesting for people out there. I wanted to calculate the thresholds at which it is better it is to use a fixed rather than a varint.]]></summary></entry><entry><title type="html">Storing Colors in Protocol Buffers</title><link href="https://clement-jean.github.io/storing_color_in_pb/" rel="alternate" type="text/html" title="Storing Colors in Protocol Buffers" /><published>2022-06-02T00:00:00+08:00</published><updated>2022-06-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/storing_color_in_pb</id><content type="html" xml:base="https://clement-jean.github.io/storing_color_in_pb/"><![CDATA[<p>While working on a new course, I was looking for an example to store a Color in Protocol Buffers. At first this seemed like an easy task but it turned out to be an interesting example of optimization. Let's work through it.</p>
<h2 id="quick-requirements">Quick Requirements</h2>
<p>In order to define what's the most optimal message definition that we come with, we need a way to calculate the serialized size of that message. Fortunately, doing so is pretty easy with Protocol Buffers.</p>
<ul class="code-tab-container b4f6bff6-63a5-437a-9737-e1c9dbf295fa"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 0)">Python</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 1)">Java</a></li><li class=" code_switcher_kotlin"><a onclick="selectTab('code_switcher_kotlin', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 2)">Kotlin</a></li><li class=" code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 3)">Go</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 4)">C#</a></li><li class=" code_switcher_js"><a onclick="selectTab('code_switcher_js', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 5)">JS</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'b4f6bff6-63a5-437a-9737-e1c9dbf295fa', 6)">C++</a></li></ul><ul class="code-tab-switcher b4f6bff6-63a5-437a-9737-e1c9dbf295fa"><li class="code_switcher_container_parent active-tab code_switcher_python 8dfd3042-9ace-4232-82ac-16410afefdeb"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('8dfd3042-9ace-4232-82ac-16410afefdeb')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calculate_size</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">SerializeToString</span><span class="p">())</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 61b2a164-be63-49d4-8150-13b22b56796a"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('61b2a164-be63-49d4-8150-13b22b56796a')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.Message</span><span class="o">;</span>

<span class="kt">int</span> <span class="nf">calculateSize</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="na">getSerializedSize</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_kotlin bdbad1d3-f5b9-47e1-a3e2-9d56701e9465"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('bdbad1d3-f5b9-47e1-a3e2-9d56701e9465')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">com.google.protobuf.Message</span>

<span class="k">fun</span> <span class="nf">calculateSize</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="nc">Message</span><span class="p">)</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">serializedSize</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_go 2f658e8d-5589-4634-a304-6f67111b371f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2f658e8d-5589-4634-a304-6f67111b371f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google.golang.org/protobuf/proto"</span>

<span class="k">func</span> <span class="n">calculateSize</span><span class="p">(</span><span class="n">message</span> <span class="n">proto</span><span class="o">.</span><span class="n">Message</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
  <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Failed to encode:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 3ec21dc6-2072-4a40-98b8-dd8e20044781"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('3ec21dc6-2072-4a40-98b8-dd8e20044781')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Google.Protobuf</span>

<span class="kt">int</span> <span class="nf">CalculateSize</span><span class="p">(</span><span class="n">IMessage</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">message</span><span class="p">.</span><span class="nf">CalculateSize</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_js 20d5e1a4-43a2-4ebd-955a-ac0f534ff502"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('20d5e1a4-43a2-4ebd-955a-ac0f534ff502')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">calculateSize</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">message</span><span class="p">.</span><span class="nx">serializeBinary</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 91f8a3fb-008c-44bd-962d-01d3725c0235"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('91f8a3fb-008c-44bd-962d-01d3725c0235')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;google/protobuf/message.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">calculate_size</span><span class="p">(</span><span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">Message</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">out</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="n">serialized</span> <span class="o">=</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">SerializeToString</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">serialized</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

  <span class="k">return</span> <span class="n">out</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="a-primitive-implementation">A primitive implementation</h2>
<p>When I see something like <code>#FFFFFFFF</code> or <code>#00000000</code> (RGBA), I directly think about two things:</p>
<ul>
<li>The human readable solution: <code>string</code></li>
<li>The non human readable solution: <code>int32</code> or <code>int64</code></li>
</ul>
<p>Let's try with the string and work our way through, here is the proto file we are gonna use:</p>
<div class="code_switcher_container_parent ef5bb1bb-f326-42d6-b5eb-10cdf2caa15b"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('ef5bb1bb-f326-42d6-b5eb-10cdf2caa15b')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">java_package</span> <span class="o">=</span> <span class="s">"com.example"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">java_multiple_files</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"example.com/m"</span><span class="p">;</span>
<span class="k">option</span> <span class="na">csharp_namespace</span> <span class="o">=</span> <span class="s">"Example"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>and here is the code that calculates the size for <code>Color</code> with value <code>#FFFFFFFF</code> (max color value):</p>
<ul class="code-tab-container 795361a8-3551-41f3-a3e1-d043328ad6e4"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '795361a8-3551-41f3-a3e1-d043328ad6e4', 0)">Python</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '795361a8-3551-41f3-a3e1-d043328ad6e4', 1)">Java</a></li><li class=" code_switcher_kotlin"><a onclick="selectTab('code_switcher_kotlin', '795361a8-3551-41f3-a3e1-d043328ad6e4', 2)">Kotlin</a></li><li class=" code_switcher_go"><a onclick="selectTab('code_switcher_go', '795361a8-3551-41f3-a3e1-d043328ad6e4', 3)">Go</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '795361a8-3551-41f3-a3e1-d043328ad6e4', 4)">C#</a></li><li class=" code_switcher_js"><a onclick="selectTab('code_switcher_js', '795361a8-3551-41f3-a3e1-d043328ad6e4', 5)">JS</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '795361a8-3551-41f3-a3e1-d043328ad6e4', 6)">C++</a></li></ul><ul class="code-tab-switcher 795361a8-3551-41f3-a3e1-d043328ad6e4"><li class="code_switcher_container_parent active-tab code_switcher_python e30dfab1-85ea-4e82-ac66-3cd61277588c"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('e30dfab1-85ea-4e82-ac66-3cd61277588c')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">proto.color_pb2</span> <span class="k">as</span> <span class="n">pb</span>

<span class="k">print</span><span class="p">(</span><span class="n">calculate_size</span><span class="p">(</span><span class="n">pb</span><span class="p">.</span><span class="n">Color</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"FFFFFFFF"</span><span class="p">)))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java f9d036c1-2d7c-41bb-9cf6-de23933e1400"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('f9d036c1-2d7c-41bb-9cf6-de23933e1400')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.example.Color</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calculateSize</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setValue</span><span class="o">(</span><span class="s">"FFFFFFFF"</span><span class="o">).</span><span class="na">build</span><span class="o">()));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_kotlin 0b83dd00-b489-48d9-acbf-ceed11146449"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('0b83dd00-b489-48d9-acbf-ceed11146449')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">com.example.color</span>

<span class="nf">println</span><span class="p">(</span><span class="nf">calculateSize</span><span class="p">(</span><span class="nf">color</span> <span class="p">{</span> <span class="n">value</span> <span class="p">=</span> <span class="s">"FFFFFFFF"</span> <span class="p">}))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_go 96aee934-c2f3-4178-953a-414ca30489bf"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('96aee934-c2f3-4178-953a-414ca30489bf')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="n">pb</span> <span class="s">"example.com/m"</span>

<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">calculateSize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">Color</span><span class="p">{</span><span class="n">Value</span><span class="o">:</span> <span class="s">"FFFFFFFF"</span><span class="p">}))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp e84a6cee-c9b1-4ee4-8fb1-a7fc54995803"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('e84a6cee-c9b1-4ee4-8fb1-a7fc54995803')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Example</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="nf">CalculateSize</span><span class="p">(</span><span class="k">new</span> <span class="n">Color</span> <span class="p">{</span> <span class="n">Value</span> <span class="p">=</span> <span class="s">"FFFFFFFF"</span> <span class="p">}));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_js 1275b9c4-d414-4a14-96f1-00aea97fb9bf"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('1275b9c4-d414-4a14-96f1-00aea97fb9bf')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">Color</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./proto/color_pb</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">calculateSize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Color</span><span class="p">().</span><span class="nx">setValue</span><span class="p">(</span><span class="dl">"</span><span class="s2">FFFFFFFF</span><span class="dl">"</span><span class="p">)));</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 330d54a6-a37e-4204-90aa-fc46553197f7"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('330d54a6-a37e-4204-90aa-fc46553197f7')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"color.pb.h"</span><span class="cp">
</span>
<span class="n">Color</span> <span class="n">color</span><span class="p">;</span>

<span class="n">color</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">"FFFFFFFF"</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">calculate_size</span><span class="p">(</span><span class="n">color</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div></div>
</li></ul>
<p>And that should give us a 10 bytes serialization, because this will be encoded as the following:</p>
<p class="text-center h4">
  <span style="color: blue">0a</span>
  <span style="color: red">08</span>
  <span style="color: green">46 46 46 46 46 46 46 46</span>
</p>
<p>where:</p>
<p>🔵 blue: is the combinaison between field tag and field type in one byte (read more <a href="https://developers.google.com/protocol-buffers/docs/encoding#structure">here</a>). In our case our tag is 1 and the type is what's called <code>Length-delimited</code>.</p>
<p>🔴 red: is the size of the <code>Length-delimited</code> field, here 8.</p>
<p>🟢 green: is the <code>Length-delimited</code> field value. Here 46 is F (you can type <code>man ascii</code> and have a look at the Hexadecimal set).</p>
<h2 id="lets-optimize-that">Let's optimize that</h2>
<p>As mentioned earlier, the other way to solve that is to store the value in an integer. So let's check the decimal value of the biggest color that we can get, which is <code>FFFFFFFF</code>.</p>
<ul class="code-tab-container f9501029-5830-432b-96e6-56b33db404dd"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'f9501029-5830-432b-96e6-56b33db404dd', 0)">Linux/Mac</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', 'f9501029-5830-432b-96e6-56b33db404dd', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher f9501029-5830-432b-96e6-56b33db404dd"><li class="code_switcher_container_parent active-tab code_switcher_shell d5e62729-f56b-4ed8-bca2-f6eec57aec5f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d5e62729-f56b-4ed8-bca2-f6eec57aec5f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"ibase=16; FFFFFFFF"</span> | bc
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 0a5fb56c-27aa-4464-80f7-a63258c3453f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('0a5fb56c-27aa-4464-80f7-a63258c3453f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>convert]::toint64<span class="o">(</span><span class="s2">"FFFFFFFF"</span>, 16<span class="o">)</span>
</code></pre></div></div>
</li></ul>
<p>and this gives us: <strong>4,294,967,295</strong>. Sounds like this gonna fit inside an <code>int32</code> or even an <code>uint32</code> if we wanted to make class instantiation safer (not letting user enter negative value). So we now have:</p>
<div class="code_switcher_container_parent d8aa26ba-f47b-4903-b658-fb37f3bd79d2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>and by using the same code for calculating the size we obtain: <strong>6 bytes</strong>.</p>
<h2 id="a-step-further">A step further</h2>
<p>Let's take a look at a table that I made for another post.</p>
<div class="table-responsive">
<table class="table table-striped table-borderless">
  <thead>
    <tr>
      <th scope="col" class="text-center">Threshold value</th>
      <th scope="col" class="text-center">Bytes size (without tag)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row" class="text-center">0</th>
      <td class="text-center">0</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">1</th>
      <td class="text-center">1</td>
    </tr>
    <tr>
      <th scope="row" class="text-center">128</th>
      <td class="text-center">2</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">16,384</th>
      <td class="text-center">3</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">2,097,152</th>
      <td class="text-center">4</td>
    </tr>
		<tr>
      <th scope="row" class="text-center">268,435,456</th>
      <td class="text-center">5</td>
    </tr>
  </tbody>
</table>
</div>
<p>This table presents the field value thresholds and the bytes size for serialization of <code>uint32</code>. Can you see the problem here ? <strong>4,294,967,295</strong> is simply bigger than <strong>268,435,456</strong> and what it means is that, our value of <code>FFFFFFFF</code> will be serialized to 5 bytes.</p>
<p>Do we know another type that could help us serialize in less bytes? Sure we do! We know that <code>fixed32</code> is an unsigned integer and it will always be serialized to 4 bytes. So we if change to:</p>
<div class="code_switcher_container_parent 7e03d739-ce75-4c9e-b12a-d67f603d8c88"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Color</span> <span class="p">{</span>
  <span class="kt">fixed32</span> <span class="na">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>the value <code>FFFFFFFF</code> will be serialized into:</p>
<p class="text-center h4">
  <span style="color: blue">0d</span>
  <span style="color: green">ff ff ff ff</span>
</p>
<p>and we are done!</p>
<h2 id="wait-a-minute-">Wait a minute ...</h2>
<p>This seems to vary with our data/color distribution, isn't it ?</p>
<div class="text-center">
  <img src="/images/threshold_color.png" alt="Threshold color between uint32 and fixed32">
</div>
<p>It varies. However you can see the number of colors that can be efficiently serialized with a <code>uint32</code> is pretty small. The dots here represent the threshold that I showed in the table presented in &quot;A step further&quot; and here we can see that the threshold at <strong>2,097,152</strong> or <code>001FFFFF</code> is where it becomes efficient to store with a <code>fixed32</code>.</p>
<p>Let's calculate the percentage of colors that can be efficiently stored with an <code>uint32</code>.</p>
<p class="text-center h4">
  (<span style="color: blue">2097152</span> / <span style="color: red">4294967295</span>) * 100 ~= 0.05
</p>
<p>where:</p>
<p>🔵 blue: is the threshold at which it becomes more optimal to save with <code>fixed32</code>.</p>
<p>🔴 red: biggest number that we can have (<code>FFFFFFFF</code>).</p>
<p>So in conclusion only 0.05% of the possible numbers will be not optimally serialized. I think we can agree on the fact that is acceptable.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Protocol Buffers are providing us with a lot of types for numbers, and choosing the right one is important for optimizing you payload or serialized data size. If you want to know more about how to choose between them, you might consider joining <a href="https://www.udemy.com/course/protocol-buffers/?referralCode=CB382B4ED9936D6C6193">my Udemy course</a> on Protocol Buffers.</p>
<p>Hope you enjoyed this article, I will be glad to get some feedback on this. Especially if you find a more efficient way to serialize this data. Check the about page to find all the ways you can us for reaching to me.</p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[While working on a new course, I was looking for an example to store a Color in Protocol Buffers. At first this seemed like an easy task but it turned out to be an interesting example of optimization. Let's work through it.]]></summary></entry></feed>