<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://clement-jean.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://clement-jean.github.io/" rel="alternate" type="text/html" /><updated>2024-09-29T14:36:35+08:00</updated><id>https://clement-jean.github.io/feed.xml</id><title type="html">Clément Jean</title><subtitle>Eternal learner and challenges lover</subtitle><author><name>Clément Jean</name></author><entry><title type="html">Binary Search Tree with SIMD</title><link href="https://clement-jean.github.io/simd_binary_search_tree/" rel="alternate" type="text/html" title="Binary Search Tree with SIMD" /><published>2024-07-09T00:00:00+08:00</published><updated>2024-07-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/simd_binary_search_tree</id><content type="html" xml:base="https://clement-jean.github.io/simd_binary_search_tree/"><![CDATA[<div class="alert alert-warning" role="alert">
  <h4 class="alert-heading">Warning!</h4>
  <p>The code (ASM) part of this article is not fully correct and doesn't scale to more layers of the tree. While I solved this problem offline, I did not update this article. Once I do, this warning will be off.</p>
</div>
<p>Recently, I've been looking at cache friendly algorithm for common data structures like trees, tries, ... One such algorithm kept coming up to mind and that's why I decided to implement it in Go. You can find the paper describing the algorithm <a href="https://dl.acm.org/doi/10.1145/1807167.1807206">here</a>.</p>
<h2 id="the-intuition">The Intuition</h2>
<p>Let's assume that we have a binary tree:</p>
<div class="code_switcher_container_parent 5ced3bc7-31ee-47db-bcb7-df0e474f41df"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>      ┌────── 41 ──────┐
      │                │
   ┌──23──┐       ┌───61───┐
   │      │       │        │
┌─11─┐  ┌─31─┐  ┌─47─┐  ┌─73─┐
│    │  │    │  │    │  │    │
2   19  29  37  43  53  67  79
</code></pre></div>
<p>A normal way of representing a binary tree into an array is by representing it like so:</p>
<div class="code_switcher_container_parent b36f7d09-a40f-4bb4-ae35-dabc6b599b8c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┬────┬────┬────┬────┬───┬────┬────┬────┬────┬────┬────┬────┐
│ 41 │ 23 │ 61 │ 11 │ 31 │ 47 │ 73 │ 2 │ 19 │ 29 │ 37 │ 43 │ 53 │ 67 │ 79 │
└────┴────┴────┴────┴────┴────┴────┴───┴────┴────┴────┴────┴────┴────┴────┘
</code></pre></div>
<p>or, in other words, we have the level nodes layed out consecutively.</p>
<p>This approach however, is not that cache friendly. While the locality of the data for a level is good, in a binary search, we actually care more about the parent-children locality. This is because, by keeping the children next to the parent, we wouldn't need to jump far ahead in the array.</p>
<p>The paper mentionned at the beginning, propose to have a binary tree layed out like the following:</p>
<div class="code_switcher_container_parent a3f3921c-0b26-4a22-badd-9a1683e7e583"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┬────┬───┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┐
│ 41 │ 23 │ 61 │ 11 │ 2 │ 19 │ 31 │ 29 │ 37 │ 47 │ 43 │ 53 │ 73 │ 67 │ 79 │
└────┴────┴────┴────┴───┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┘
</code></pre></div>
<p>And if you take time to understand how this maps back to the binary tree, you will notice that we are storing parent-children triangles. With this, we can now apply SIMD operations on both the parent and the children in order to either dtermine if the data we are looking for is in the triangle, or if we should continue our search.</p>
<p>The next important thing to understand is how we do the search of elements.</p>
<p>Let's take an example to make things clearer. Let's say that we are looking for the number 62. We will start by loading 41, 23, 61 into a vector.</p>
<div class="code_switcher_container_parent d03b2978-89b3-4f00-aede-97f53c876559"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 41 │ 23 │ 61 │
└────┴────┴────┘
</code></pre></div>
<p>Then, we will compare (smaller than) each number with the element we are looking for:</p>
<div class="code_switcher_container_parent 81b1ecd1-63ef-4864-874a-b0043d911dac"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 41 │ 23 │ 61 │
└────┴────┴────┘
        &lt;
┌────┬────┬────┐
│ 62 │ 62 │ 62 │
└────┴────┴────┘
        =
┌────┬────┬────┐
│  1 │  1 │  1 │
└────┴────┴────┘
</code></pre></div>
<p>and with the mask we get, we can map to an index in the following subtrees. Here is the full mapping:</p>
<div class="code_switcher_container_parent 9afdf813-1540-49ae-b7c5-863e3c262018"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code> 0 0 0 -&gt; 0
 0 1 0 -&gt; 1
 1 1 0 -&gt; 2
 1 1 1 -&gt; 3
</code></pre></div>
<p>It's actually a popcount.</p>
<p>So, with our <code>[1, 1, 1]</code>, we should access the 4th child (mapping is 0 indexed).</p>
<p>If you look at the binary tree, this means that we need to go to the number 73 and we now have the vector:</p>
<div class="code_switcher_container_parent 6a1f660e-9ca7-466a-97d8-7c273d450cbf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 73 │ 67 │ 79 │
└────┴────┴────┘
</code></pre></div>
<p>Now, we can obviously repeat the process.</p>
<p>On top of the lookup for index, we also need to be able to check the equality of the search vector and the curr loaded vector. This is as simple as:</p>
<div class="code_switcher_container_parent 575b51ac-c505-41a1-8d78-90203ec2bf2a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 41 │ 23 │ 61 │
└────┴────┴────┘
       ==
┌────┬────┬────┐
│ 62 │ 62 │ 62 │
└────┴────┴────┘
        =
┌────┬────┬────┐
│  0 │  0 │  0 │
└────┴────┴────┘
</code></pre></div>
<p>If we found a 1, it would mean that the element is in the tree. Otherwise, we keep running as long as we are within the boundaries of the array.</p>
<p>Hopefully, this all makes sense. Let us move to the code.</p>
<h2 id="the-code">The Code</h2>
<p>As <a href="https://github.com/golang/go/issues/67520">my proposal for adding SIMD intrinsics</a> is still not evaluated/accepted, we will need to write Go assembly (ARM64) to make use of SIMD instructions. I'll try to be as clear as possible on what each instruction is doing but you should know at least basics of assembly.</p>
<p>Let's start by defining the function definition in our <code>main.go</code>:</p>
<ul class="code-tab-container f232af70-99f9-4e28-bf94-5b30253a3db1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f232af70-99f9-4e28-bf94-5b30253a3db1', 0)">main.go</a></li></ul><ul class="code-tab-switcher f232af70-99f9-4e28-bf94-5b30253a3db1"><li class="code_switcher_container_parent active-tab code_switcher_go 89f79453-2f5a-4794-a13c-45f8b96ef2d9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">func</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">,</span> <span class="n">n</span> <span class="kt">uint32</span><span class="p">)</span> <span class="kt">bool</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>You can see that we are working with uint32s. This is because on ARM64 Neon, we only have 128 bits, and as we need to load at least 3 elements per triangle, uint32 is our best choice.</p>
<p>Next, we will jump to our <code>main.s</code> file and start defining our function:</p>
<ul class="code-tab-container e541499a-578b-4223-85b7-b58d46b48a55"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'e541499a-578b-4223-85b7-b58d46b48a55', 0)">main.s</a></li></ul><ul class="code-tab-switcher e541499a-578b-4223-85b7-b58d46b48a55"><li class="code_switcher_container_parent active-tab code_switcher_c ba6aa4bf-e805-4f6c-88e6-c137c8eb61aa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"textflag.h"</span><span class="cp">
</span>
<span class="c1">//func binarySearch(arr []int, n int) bool</span>
<span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>The most important thing here is the <code>$0-33</code> part. We are saying that we do not have local variables (0) and that our arguments/return value take 33 bytes (24 for the slice, 8 for the int, and 1 for the bool).</p>
<p>Next, as part of my function, I generally like to define some names for the register. It helps me remember what each register is supposed to contain. This looks like this:</p>
<ul class="code-tab-container 5ab38a85-9be6-42dc-9191-58cace8fcc1c"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', '5ab38a85-9be6-42dc-9191-58cace8fcc1c', 0)">main.s</a></li></ul><ul class="code-tab-switcher 5ab38a85-9be6-42dc-9191-58cace8fcc1c"><li class="code_switcher_container_parent active-tab code_switcher_c e9432522-c98d-456e-9ab0-41e2abe026cf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="cp">#define data R0
#define dataLen R1
#define toFind R2
#define curr R3
#define tmp R4
#define child_idx R5
#define nb_subtree R6
#define level R7
#define searchKey V0
#define mask V1
#define idx V2
#define one V3
#define equalMask V4
</span></code></pre></div></div>
</li></ul>
<p>With that, we can initialize the registers and check the base cases:</p>
<ul class="code-tab-container f20e40d9-acd3-4b76-bba1-cc9b2985f9fb"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'f20e40d9-acd3-4b76-bba1-cc9b2985f9fb', 0)">main.s</a></li></ul><ul class="code-tab-switcher f20e40d9-acd3-4b76-bba1-cc9b2985f9fb"><li class="code_switcher_container_parent active-tab code_switcher_c b14182da-f103-40d8-8d0a-0d206445bde0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

  <span class="c1">// initialize registers</span>
  <span class="n">MOVD</span> <span class="n">arr</span><span class="o">+</span><span class="mi">0</span><span class="p">(</span><span class="n">FP</span><span class="p">),</span> <span class="n">data</span>
  <span class="n">MOVD</span> <span class="n">arr_len</span><span class="o">+</span><span class="mi">8</span><span class="p">(</span><span class="n">FP</span><span class="p">),</span> <span class="n">dataLen</span>
  <span class="n">MOVD</span> <span class="n">n</span><span class="o">+</span><span class="mi">24</span><span class="p">(</span><span class="n">FP</span><span class="p">),</span> <span class="n">toFind</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">level</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">nb_subtree</span>
  <span class="n">VDUP</span> <span class="n">level</span><span class="p">,</span> <span class="n">one</span><span class="p">.</span><span class="n">S4</span>

  <span class="c1">// if array len is 0 return false</span>
  <span class="n">CMP</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">dataLen</span>
  <span class="n">BEQ</span> <span class="n">not_found</span>

  <span class="c1">// if array len &gt; 1 start the work</span>
  <span class="c1">// otherwise check if the first element is equal</span>
  <span class="c1">//  to the one we are looking for</span>
  <span class="n">CMP</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">dataLen</span>
  <span class="n">BGT</span> <span class="n">load</span>
  <span class="n">MOVD</span> <span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">tmp</span>
  <span class="n">CMP</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">toFind</span>
  <span class="n">BEQ</span> <span class="n">found</span>
  <span class="n">B</span> <span class="n">not_found</span>

  <span class="c1">//...</span>

<span class="n">not_found</span><span class="o">:</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">R19</span> <span class="c1">// false</span>
  <span class="n">MOVD</span> <span class="n">R19</span><span class="p">,</span> <span class="n">ret</span><span class="o">+</span><span class="mi">32</span><span class="p">(</span><span class="n">FP</span><span class="p">)</span>
  <span class="n">RET</span>

<span class="n">found</span><span class="o">:</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">R19</span> <span class="c1">// true</span>
  <span class="n">MOVD</span> <span class="n">R19</span><span class="p">,</span> <span class="n">ret</span><span class="o">+</span><span class="mi">32</span><span class="p">(</span><span class="n">FP</span><span class="p">)</span>
  <span class="n">RET</span>
</code></pre></div></div>
</li></ul>
<p>Now, we can start the real work. We will have a simple loop which we load 4 elements at the <code>curr</code> position in <code>data</code>:</p>
<ul class="code-tab-container f69e1386-54b6-4214-857a-2506330d8005"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'f69e1386-54b6-4214-857a-2506330d8005', 0)">main.s</a></li></ul><ul class="code-tab-switcher f69e1386-54b6-4214-857a-2506330d8005"><li class="code_switcher_container_parent active-tab code_switcher_c 36462758-6b03-4596-af70-32decf87dd92"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">load</span><span class="o">:</span>
  <span class="n">VDUP</span> <span class="n">toFind</span><span class="p">,</span> <span class="n">searchKey</span><span class="p">.</span><span class="n">S4</span>

<span class="n">check</span><span class="o">:</span>
  <span class="n">CMP</span> <span class="n">dataLen</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">BGE</span> <span class="n">not_found</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">4</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">MUL</span> <span class="n">R19</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">ADD</span> <span class="n">curr</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">VLD1</span> <span class="p">(</span><span class="n">R19</span><span class="p">),</span> <span class="p">[</span><span class="n">mask</span><span class="p">.</span><span class="n">S4</span><span class="p">]</span>

  <span class="c1">//TODO update curr</span>

  <span class="n">B</span> <span class="n">check</span>
</code></pre></div></div>
</li></ul>
<p>Notice that we are multiplying <code>curr</code> by 4. This is because we are working with uint32s (4 bytes) so our index (<code>curr</code>) need to be moved by <code>curr * 4</code> bytes.</p>
<p>Then, inside the loop, we will check for equality between the four loaded elements and the search vector:</p>
<ul class="code-tab-container b0bce97d-62fb-4a86-8323-f62ede7de129"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'b0bce97d-62fb-4a86-8323-f62ede7de129', 0)">main.s</a></li></ul><ul class="code-tab-switcher b0bce97d-62fb-4a86-8323-f62ede7de129"><li class="code_switcher_container_parent active-tab code_switcher_c 46218393-5033-4801-ac66-199b7b1b0407"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="c1">//...</span>

  <span class="n">VCMEQ</span> <span class="n">mask</span><span class="p">.</span><span class="n">S4</span><span class="p">,</span> <span class="n">searchKey</span><span class="p">.</span><span class="n">S4</span><span class="p">,</span> <span class="n">equalMask</span><span class="p">.</span><span class="n">S4</span>
  <span class="n">WORD</span> <span class="err">$</span><span class="mh">0x6eb0a893</span> <span class="c1">//umaxv.4s s19, v4</span>
  <span class="n">FMOVS</span> <span class="n">F19</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">CMP</span> <span class="err">$</span><span class="mi">4294967295</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">BEQ</span> <span class="n">found</span>

  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>You can notice that if the maximum value inside <code>equalMask</code> is <code>math.MaxUint32</code> (4294967295), it means that we found the element and thus we can return.</p>
<p>After that, we fall into the binary search algorithm. We will first start by looking for the index:</p>
<ul class="code-tab-container b45d7464-eb29-422e-9bd1-8d0366b9340c"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'b45d7464-eb29-422e-9bd1-8d0366b9340c', 0)">main.s</a></li></ul><ul class="code-tab-switcher b45d7464-eb29-422e-9bd1-8d0366b9340c"><li class="code_switcher_container_parent active-tab code_switcher_c 6a2f1cc7-3e15-4100-a765-484f6c4ae416"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="c1">//...</span>

  <span class="n">WORD</span> <span class="err">$</span><span class="mh">0x6ea13401</span> <span class="c1">//cmhi.4s v1, v0, v1</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">VMOV</span> <span class="n">R19</span><span class="p">,</span> <span class="n">mask</span><span class="p">.</span><span class="n">S</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">VAND</span> <span class="n">mask</span><span class="p">.</span><span class="n">B16</span><span class="p">,</span> <span class="n">one</span><span class="p">.</span><span class="n">B16</span><span class="p">,</span> <span class="n">idx</span><span class="p">.</span><span class="n">B16</span>
  <span class="n">WORD</span> <span class="err">$</span><span class="mh">0x6eb0384f</span> <span class="c1">//uaddlv.4s d15, v2</span>
  <span class="n">FMOVD</span> <span class="n">F15</span><span class="p">,</span> <span class="n">child_idx</span>

  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>The <code>cmhi</code> checks whether the data we are looking for is bigger that the data we loaded. Then, we bitwise AND the loaded vector with ones and finally, we do a basic popcount to determine the <code>child_idx</code>.</p>
<p>Finally, we need to update the <code>curr</code>, <code>level</code>, and the <code>nb_subtree</code>. As mentionned, the former is telling us from where to read the data in the array. The two last ones actually help us calculate the <code>curr</code> by running the following formula: <code>curr = nb_subtree * 3 + (3 * (child_idx + 1))</code>.</p>
<ul class="code-tab-container c980b95d-741e-4114-b1e9-50fa769ca44e"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'c980b95d-741e-4114-b1e9-50fa769ca44e', 0)">main.s</a></li></ul><ul class="code-tab-switcher c980b95d-741e-4114-b1e9-50fa769ca44e"><li class="code_switcher_container_parent active-tab code_switcher_c d75eed70-bb44-420c-b171-9b06553d73f0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="c1">//...</span>

  <span class="c1">//curr = nb_subtree * 3 + (3 * (child_idx + 1))</span>
  <span class="n">MOVD</span> <span class="n">child_idx</span><span class="p">,</span> <span class="n">tmp</span>
  <span class="n">ADD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">tmp</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">3</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">MUL</span> <span class="n">R19</span><span class="p">,</span> <span class="n">tmp</span>
  <span class="n">MOVD</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">MUL</span> <span class="n">R19</span><span class="p">,</span> <span class="n">nb_subtree</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">ADD</span> <span class="n">R19</span><span class="p">,</span> <span class="n">curr</span>

  <span class="c1">//nb_subtree = level &lt;&lt; 2</span>
  <span class="n">LSL</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">nb_subtree</span>

  <span class="c1">//level++</span>
  <span class="n">ADD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">level</span>

  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>And that actually is all for the binary search algorithm.</p>
<h2 id="a-demo">A Demo</h2>
<p>We can now go back to our <code>main.go</code> and try it.</p>
<ul class="code-tab-container b0c61856-0666-4894-9cf9-1e9156332b44"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b0c61856-0666-4894-9cf9-1e9156332b44', 0)">main.go</a></li></ul><ul class="code-tab-switcher b0c61856-0666-4894-9cf9-1e9156332b44"><li class="code_switcher_container_parent active-tab code_switcher_go 06dcad7b-bb2c-4658-9807-d290df931a4c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">,</span> <span class="n">n</span> <span class="kt">uint32</span><span class="p">)</span> <span class="kt">bool</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">{</span><span class="m">41</span><span class="p">,</span> <span class="m">23</span><span class="p">,</span> <span class="m">61</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">37</span><span class="p">,</span> <span class="m">47</span><span class="p">,</span> <span class="m">43</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">73</span><span class="p">,</span> <span class="m">67</span><span class="p">,</span> <span class="m">79</span><span class="p">}</span>

  <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="m">19</span><span class="p">))</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="m">100</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and if we run, we should have:</p>
<div class="code_switcher_container_parent 0df413a0-fde3-4afc-902a-8bebaaa13d19"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run <span class="nb">.</span>
<span class="nb">true
false</span>
</code></pre></div></div>
</div>
<h2 id="benchmark">Benchmark</h2>
<ul class="code-tab-container 70dde4de-50aa-4204-9eaa-d5d2f7080609"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '70dde4de-50aa-4204-9eaa-d5d2f7080609', 0)">main_test.go</a></li><li class=" code_switcher_sh"><a onclick="selectTab('code_switcher_sh', '70dde4de-50aa-4204-9eaa-d5d2f7080609', 1)">result</a></li></ul><ul class="code-tab-switcher 70dde4de-50aa-4204-9eaa-d5d2f7080609"><li class="code_switcher_container_parent active-tab code_switcher_go 2377908e-a0a7-461c-8a71-b49306813624"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>
  <span class="s">"slices"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">ok</span> <span class="kt">bool</span>

<span class="k">func</span> <span class="n">BenchmarkBinarySearchSIMD</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">nbs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">{</span><span class="m">41</span><span class="p">,</span> <span class="m">23</span><span class="p">,</span> <span class="m">61</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">37</span><span class="p">,</span> <span class="m">47</span><span class="p">,</span> <span class="m">43</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">73</span><span class="p">,</span> <span class="m">67</span><span class="p">,</span> <span class="m">79</span><span class="p">}</span>

  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">nbs</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">nbs</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
        <span class="n">b</span><span class="o">.</span><span class="n">Fail</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkBinarySearch</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">{</span><span class="m">41</span><span class="p">,</span> <span class="m">23</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">37</span><span class="p">,</span> <span class="m">61</span><span class="p">,</span> <span class="m">47</span><span class="p">,</span> <span class="m">43</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">73</span><span class="p">,</span> <span class="m">67</span><span class="p">,</span> <span class="m">79</span><span class="p">}</span>
  <span class="n">slices</span><span class="o">.</span><span class="n">Sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">arr</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">slices</span><span class="o">.</span><span class="n">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
        <span class="n">b</span><span class="o">.</span><span class="n">Fail</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_sh 5b662fae-b0fa-4225-84c9-f85b52a5d7a9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> <span class="nt">-run</span><span class="o">=</span>Benchmark <span class="nt">-bench</span><span class="o">=</span><span class="nb">.</span> <span class="nt">-count</span><span class="o">=</span>10 <span class="nb">.</span>
goos: darwin
goarch: arm64
BenchmarkBinarySearchSIMD-10            29052963                40.82 ns/op
BenchmarkBinarySearchSIMD-10            29059149                40.80 ns/op
BenchmarkBinarySearchSIMD-10            29166654                40.83 ns/op
BenchmarkBinarySearchSIMD-10            29083417                40.83 ns/op
BenchmarkBinarySearchSIMD-10            29022134                40.84 ns/op
BenchmarkBinarySearchSIMD-10            29075196                40.83 ns/op
BenchmarkBinarySearchSIMD-10            28986556                40.81 ns/op
BenchmarkBinarySearchSIMD-10            29005532                40.81 ns/op
BenchmarkBinarySearchSIMD-10            29118674                40.79 ns/op
BenchmarkBinarySearchSIMD-10            28919640                40.79 ns/op
BenchmarkBinarySearch-10                12682536                94.19 ns/op
BenchmarkBinarySearch-10                12656307                94.20 ns/op
BenchmarkBinarySearch-10                12666488                94.19 ns/op
BenchmarkBinarySearch-10                12660024                94.68 ns/op
BenchmarkBinarySearch-10                12671432                94.22 ns/op
BenchmarkBinarySearch-10                12671989                94.25 ns/op
BenchmarkBinarySearch-10                12659746                94.19 ns/op
BenchmarkBinarySearch-10                12688084                94.23 ns/op
BenchmarkBinarySearch-10                12639111                94.21 ns/op
BenchmarkBinarySearch-10                12664016                94.24 ns/op
PASS
</code></pre></div></div>
</li></ul>
<h2 id="conclusion">Conclusion</h2>
<p>In this article we saw a cache friendly version of the binary search using SIMD. While, we focused on the algorithm itself, I worked on this as part of a data structure. It is an AVL Tree that can be frozen at any point, and once frozen, it will let you do the binary search described in this article.</p>
<p>If you would like to have more details on the data structure implemented, or if you have feedback on this article, let me know in the comments section!</p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="SIMD" /><summary type="html"><![CDATA[Warning! The code (ASM) part of this article is not fully correct and doesn't scale to more layers of the tree. While I solved this problem offline, I did not update this article. Once I do, this warning will be off.]]></summary></entry><entry><title type="html">Pagination in gRPC</title><link href="https://clement-jean.github.io/pagination_in_grpc/" rel="alternate" type="text/html" title="Pagination in gRPC" /><published>2023-08-24T00:00:00+08:00</published><updated>2023-08-24T00:00:00+08:00</updated><id>https://clement-jean.github.io/pagination_in_grpc</id><content type="html" xml:base="https://clement-jean.github.io/pagination_in_grpc/"><![CDATA[<p>Looking into optimizing one of my APIs, I recently stumbled upon the following resource: <a href="https://cloud.google.com/apis/design/design_patterns">Common design patterns</a>. This contains a lot of insights on how to design proto files in order to make gRPC APIs more idiomatic or more efficient. Within this document, I found the pagination part interesting and decided to write an article on how to implement it.</p>
<h2 id="a-disclaimer">A disclaimer</h2>
<p>In this article I assume that you already know how to create a simple server in gRPC. <strong>I will not show all the boilerplate, you can check it in <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-08-24-pagination_in_grpc">here</a></strong>.</p>
<p>Finally, this article contains data from <a href="https://subscription.packtpub.com/search">Packt</a>. They do not sponsor this article in any way. I'm not getting any money promoting these books (except mine), I simply needed some interesting data for this article.</p>
<h2 id="an-explanation">An explanation</h2>
<p>Before starting the implementation, let's first understand what we are implementing.</p>
<h3 id="what">What</h3>
<p>Pagination is a mechanism which allows the consumer of the API to get a subset of the available resources. This is done in order to limit the payload size returned by the API and thus make the API response faster.</p>
<p>This is generally implemented with the combination of <code>page_size</code> and <code>page_token</code> fields. The former tells how big is the subset we want, and the latter act as an index from which we are going to get the next subset.</p>
<p>Let's see an example of such a pagination. We have the following data:</p>
<div class="code_switcher_container_parent a65e3909-941b-47c5-914d-379edd4531aa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"books"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gRPC Go for Professionals"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"In recent years, the popularity of microservice architecture has surged, bringing forth a new set of requirements."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Clément Jean"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-07-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">260</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781837638840"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Full-Stack Web Development with Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Go is a modern programming language with capabilities to enable high-performance app development."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Nanik Tolaram"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"Nick Glynn"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-02-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">302</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781803234199"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Domain-Driven Design with Golang"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Domain-driven design (DDD) is one of the most sought-after skills in the industry."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Matthew Boyle"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-12-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">204</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804613450"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Building Modern CLI Applications in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Although graphical user interfaces (GUIs) are intuitive and user-friendly, nothing beats a command-line interface"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Marian Montagnino"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-03-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">406</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804611654"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Functional Programming in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"While Go is a multi-paradigm language that gives you the option to choose whichever paradigm works best"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Dylan Meeus"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-03-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">248</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781801811163"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Event-Driven Architecture in Golang"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Event-driven architecture in Golang is an approach used to develop applications that shares state changes asynchronously, internally, and externally using messages."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Michael Stack"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-11-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">384</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781803238012"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Test-Driven Development in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Experienced developers understand the importance of designing a comprehensive testing strategy to ensure efficient shipping and maintaining services in production."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Adelina Simion"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-04-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">342</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781803247878"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mastering Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mastering Go is the essential guide to putting Go to work on real production systems."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Mihalis Tsoukalos"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-08-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">682</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781801079310"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Network Automation with Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Go’s built-in first-class concurrency mechanisms make it an ideal choice for long-lived low-bandwidth I/O operations, which are typical requirements of network automation and network operations applications."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Nicolas Leiva"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-01-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">442</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781800560925"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Microservices with Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"This book covers the key benefits and common issues of microservices, helping you understand the problems microservice architecture helps to solve, the issues it usually introduces, and the ways to tackle them."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Alexander Shuiskov"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-11-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">328</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804617007"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Effective Concurrency in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The Go language has been gaining momentum due to its treatment of concurrency as a core language feature, making concurrent programming more accessible than ever."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Burak Serdar"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-04-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">212</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804619070"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
</div>
<p>As expected, if we start by requesting subset of size 2, we will get the first two books (<code>gRPC Go for Professionals</code> and <code>Full-Stack Web Development with Go</code>). On top of that result, a page token will be returned to us. If we now use this token and request a subset of size 2 we will get the 2 following books (<code>Domain-Driven Design with Golang</code> and <code>Building Modern CLI Applications in Go</code>).</p>
<p>This is pretty much it. It is simple to grasp and also simple to implement.</p>
<h2 id="the-setup">The setup</h2>
<p>In this article:</p>
<ul>
<li>I will be using Postgres to store our books' data. You can find the initialization script <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-08-24-pagination_in_grpc/db">here</a></li>
<li>I will run Postgres and the gRPC with Docker Compose. You can find the YAML file <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-08-24-pagination_in_grpc/docker-compose.yml">here</a></li>
</ul>
<h2 id="protobuf">Protobuf</h2>
<p>If you check the <a href="https://cloud.google.com/apis/design/design_patterns#list_pagination">List Pagination</a> section, you will see that we have the following protobuf schema:</p>
<div class="code_switcher_container_parent 4c304eb8-78d2-44a3-82c9-ca99e9085925"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">rpc</span> <span class="n">ListBooks</span><span class="p">(</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">ListBooksResponse</span><span class="p">);</span>

<span class="kd">message</span> <span class="nc">ListBooksRequest</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">parent</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">page_size</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">page_token</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ListBooksResponse</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="n">Book</span> <span class="na">books</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">next_page_token</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This code is mostly correct but we are going to remove the <code>parent</code> field. If you are interested in knowing what this is used for, check the <a href="https://cloud.google.com/apis/design/design_patterns#list_sub-collections">List Sub-Collections</a> section.</p>
<p>So we now have:</p>
<div class="code_switcher_container_parent 9c1a4c14-26f7-4b27-a5f5-0173186bc3a7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">ListBooksRequest</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">page_size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">page_token</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ListBooksResponse</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="n">Book</span> <span class="na">books</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">next_page_token</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">service</span> <span class="n">BookStoreService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">ListBooks</span><span class="p">(</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">ListBooksResponse</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The last thing that we need to do is defining the <code>Book</code> message:</p>
<div class="code_switcher_container_parent 4c5083f3-2973-40cd-b92b-6768413097ec"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google/protobuf/timestamp.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Book</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">description</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">authors</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="n">google.protobuf.Timestamp</span> <span class="na">published</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="kt">uint32</span> <span class="na">pages</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">isbn</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>There is nothing fancy here. We simply laid out all the information needed to represent our books.</p>
<h2 id="listbooks">ListBooks</h2>
<p>Let's get started with an empty implementation for <code>ListBooks</code>:</p>
<div class="code_switcher_container_parent 06d83f0c-240c-4362-953c-e22efa3cc3ad"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">server</span><span class="p">)</span> <span class="n">ListBooks</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The first step in every endpoint implementation is to validate arguments. In our case we will validate the <code>page_size</code>. We mostly need to check that the <code>page_size</code> is not too big because it defeats the purpose of pagination, and if no <code>page_size</code> is provided we are going to set it to a default value.</p>
<div class="code_switcher_container_parent fc460e7d-b8f3-454d-af26-49229b5774a7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="p">(</span>
  <span class="n">defaultPageSize</span> <span class="o">=</span> <span class="m">10</span>
  <span class="n">maxPageSize</span>     <span class="o">=</span> <span class="m">30</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">validatePageSize</span><span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span> <span class="o">&gt;</span> <span class="n">maxPageSize</span> <span class="p">{</span>
    <span class="n">msg</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span>
      <span class="s">"expected page size between 0 and %d, got %d"</span><span class="p">,</span>
      <span class="n">maxPageSize</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span> <span class="c">// no page_size provided</span>
    <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span> <span class="o">=</span> <span class="n">defaultPageSize</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This means that we can now do the following in <code>ListBooks</code>:</p>
<div class="code_switcher_container_parent 41d8e150-2e33-4e75-ac6d-1e45c7ad5251"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">validatePageSize</span><span class="p">(</span><span class="n">req</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">status</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">InvalidArgument</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span><span class="o">.</span><span class="n">Err</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Next, we need to validate <code>page_token</code>. In this implementation, I decided to use <a href="https://github.com/ulid/spec">ULIDs</a>. This is because they are short ids and they are lexicographically sortable. The sortability part is interesting because we will sort the books by their IDs which are ULIDs.</p>
<p>Fortunately for us oklog provides an <a href="https://github.com/oklog/ulid">ULID implementation</a> for us to verify if a ULID is valid or not. In <code>ListBooks</code>, we can simply do:</p>
<div class="code_switcher_container_parent 7639f226-6979-4b8f-b90f-55d88c95c33a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ulid</span><span class="o">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">);</span> <span class="nb">len</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="n">msg</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"expected valid ULID, got error %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
  <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">status</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">InvalidArgument</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span><span class="o">.</span><span class="n">Err</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Notice that the <code>page_token</code> is optional (<code>len(req.PageToken) != 0</code>). When we do not provide one we will start from the beginning of the dataset.</p>
<p>Then, we need to generate the SQL query in order to get the subsets. We need to create the following SQL:</p>
<div class="code_switcher_container_parent 3fa17abe-b7d1-4072-a574-74d3687addaf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">book</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="n">page_token</span>
<span class="k">LIMIT</span> <span class="n">page_size</span>
<span class="k">ORDER</span> <span class="n">id</span> <span class="k">ASC</span>
</code></pre></div></div>
</div>
<p>Obviously, because the page_token is optional, the where clause is optional too.</p>
<p>Using <a href="https://gorm.io/">GORM</a>, we can easily create the request by writing the following:</p>
<div class="code_switcher_container_parent 19a3d511-40fe-4820-9f7c-78b260a0d0d3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="s">"book"</span><span class="p">)</span><span class="o">.</span><span class="n">Limit</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageSize</span><span class="p">))</span><span class="o">.</span><span class="n">Order</span><span class="p">(</span><span class="s">"id ASC"</span><span class="p">)</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
  <span class="n">query</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">Where</span><span class="p">(</span><span class="s">"id &gt; ?"</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Now that we have the query, we can simply execute it and map the result into our Protobuf <code>Book</code> model:</p>
<div class="code_switcher_container_parent fb8fb0e8-3af4-46b0-a7e8-e1b43168a2e0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">queryRes</span> <span class="o">=</span> <span class="p">[]</span><span class="n">Book</span><span class="p">{}</span>
<span class="n">query</span><span class="o">.</span><span class="n">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="n">queryRes</span><span class="p">)</span> <span class="c">// execute query</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queryRes</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
  <span class="c">// short circuit if not results</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksResponse</span><span class="p">{},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="n">books</span> <span class="o">:=</span> <span class="n">utils</span><span class="o">.</span><span class="n">Map</span><span class="p">(</span><span class="n">queryRes</span><span class="p">,</span> <span class="n">mapBookToBookPb</span><span class="p">)</span>
</code></pre></div></div>
</div>
<p>Finally, we can get the ID (ULID) of the last item in subset (<code>queryRes</code>) and this will represent the <code>page_token</code> from where a subsequent request need to start getting new result.</p>
<div class="code_switcher_container_parent bf3d0a60-6e28-4b92-85e9-76d006ca2c27"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lastItemIdx</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">queryRes</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span>
<span class="n">nextPageToken</span> <span class="o">:=</span> <span class="n">queryRes</span><span class="p">[</span><span class="n">lastItemIdx</span><span class="p">]</span><span class="o">.</span><span class="n">ID</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queryRes</span><span class="p">)</span> <span class="o">&lt;</span> <span class="kt">int</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageSize</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// no more pages</span>
  <span class="n">nextPageToken</span> <span class="o">=</span> <span class="s">""</span>
<span class="p">}</span>

<span class="k">return</span> <span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksResponse</span><span class="p">{</span>
  <span class="n">Books</span><span class="o">:</span>         <span class="n">books</span><span class="p">,</span>
  <span class="n">NextPageToken</span><span class="o">:</span> <span class="n">nextPageToken</span><span class="p">,</span>
<span class="p">},</span> <span class="no">nil</span>
</code></pre></div></div>
</div>
<p>And we now have pagination! Let's go ahead and test it.</p>
<h2 id="testing">Testing</h2>
<p>The first thing we can test is the case where the consumer doesn't provide a <code>page_token</code> and <code>page_size</code>. This should return 10 results (see <code>defaultPageSize</code>) from the beginning of the data.</p>
<div class="code_switcher_container_parent 22d0b72c-58c8-484b-8cfe-9dbe04905aac"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Full-Stack Web Development with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Domain-Driven Design with Golang"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Building Modern CLI Applications in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Functional Programming in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Event-Driven Architecture in Golang"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Test-Driven Development in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Mastering Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Network Automation with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Microservices with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Effective Concurrency in Go"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"nextPageToken"</span>: <span class="s2">"01H8EH4VYYCS6M4BFVZ90RP7FS"</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>First, you can notice that we had 11 datum and that because we asked for 10 we didn't get &quot;gRPC Go for Professionals&quot;. And secondly, we can see that we got the <code>nextPageToken</code> field.</p>
<p>Let's now use the <code>nextPageToken</code> as <code>page_token</code>:</p>
<div class="code_switcher_container_parent de669b44-4165-4eea-bb18-82f6fe5e250d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{"page_token": "01H8EH4VYYCS6M4BFVZ90RP7FS"}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"gRPC Go for Professionals"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>And here we get our 11th datum!</p>
<p>Finally, we can try mixing the <code>page_token</code> and <code>page_size</code> fields. Let's say that we are going to have a <code>page_size</code> of 2. We will do the first request without <code>page_token</code> to get the 2 first elements:</p>
<div class="code_switcher_container_parent 9d1dba1e-b20d-42da-85a5-4b1c6a12ce55"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{"page_size": 2}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Full-Stack Web Development with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Domain-Driven Design with Golang"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"nextPageToken"</span>: <span class="s2">"01H8EH2RM7HVFJG4HYA4XTV0R5"</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>and then we can use the <code>nextPageToken</code> to get the 3rd and 4th elements:</p>
<div class="code_switcher_container_parent 568375b0-b154-49a5-a2ba-1065a1069220"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{"page_size": 2, "page_token": "01H8EH2RM7HVFJG4HYA4XTV0R5"}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Building Modern CLI Applications in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Functional Programming in Go"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"nextPageToken"</span>: <span class="s2">"01H8EH3CKPT5BX263G0NGGKQCQ"</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>Here we go! Everything workks as expected!</p>
<h2 id="conclusion">Conclusion</h2>
<p>We saw that we can implement pagination quite easily in gRPC with the combination of <code>page_token</code> and <code>page_size</code> fields in the request. We also saw that the API endpoint will return a <code>next_page_token</code> that we can later use as an index for the next page we want to get.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="gRPC" /><summary type="html"><![CDATA[Looking into optimizing one of my APIs, I recently stumbled upon the following resource: Common design patterns. This contains a lot of insights on how to design proto files in order to make gRPC APIs more idiomatic or more efficient. Within this document, I found the pagination part interesting and decided to write an article on how to implement it.]]></summary></entry><entry><title type="html">Authorization with gRPC and Envoy</title><link href="https://clement-jean.github.io/grpc_authz_envoy/" rel="alternate" type="text/html" title="Authorization with gRPC and Envoy" /><published>2023-06-07T00:00:00+08:00</published><updated>2023-06-07T00:00:00+08:00</updated><id>https://clement-jean.github.io/grpc_authz_envoy</id><content type="html" xml:base="https://clement-jean.github.io/grpc_authz_envoy/"><![CDATA[<p>Recently, I've been looking for a good alternative to <a href="https://traefik.io/traefik/">Traefik</a> as Reverse Proxy for gRPC services. Traefik has great support for gRPC and other common features, but Envoy comes with Protobuf-backed configuration and even greater support for gRPC services. In the article, I want to show how you can make Envoy use your custom authorization logic before redirecting (or not) the request to other services.</p>
<h2 id="the-code">The code</h2>
<p>The code is available <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-06-07-grpc_authz_envoy">here</a>.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>This post has been inspired from this <a href="https://ekhabarov.com/post/envoy-as-an-api-gateway-authentication-and-authorization/">article</a>. I thought it would be nice to have a little bit more details and explain how to run the whole thing.</p>
<h2 id="envoy">Envoy</h2>
<p>If you don't know Envoy, it is a <a href="https://en.wikipedia.org/wiki/Reverse_proxy">Reverse Proxy</a>. This is basically a server relaying client requests to other servers (your services). It is generally used to protect the services from direct access and potential abuse. As such, Reverse Proxies can load balance, rate limit, and much more.</p>
<p>Envoy is a project originally designed by Lyft and it is described as &quot;a high performance C++ distributed proxy designed for single services and applications, as well as a communication bus and “universal data plane” designed for large microservice “service mesh” architectures&quot;. That's a lot of buzz words! But for us, the most important is this feature:</p>
<blockquote>
<p>HTTP/2 AND GRPC SUPPORT</p>
<p>Envoy has first class support for HTTP/2 and gRPC for both incoming and outgoing connections. It is a transparent HTTP/1.1 to HTTP/2 proxy.</p>
</blockquote>
<p>One of the interesting features coming out of this support is the fact that Envoy can use custom gRPC services you develop. An example of this is the authorization service that I want to show you here.</p>
<h2 id="protobuf">Protobuf</h2>
<p>Before everything else, let us start by defining the service that we want to protect. Nothing fancy, we are going to use a simple GreetService:</p>
<div class="code_switcher_container_parent 2af38bbf-e4ea-4d26-ab83-ff3780774e52"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">greet</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/Clement-Jean/clement-jean.github.io/proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">GreetRequest</span> <span class="p">{}</span>
<span class="kd">message</span> <span class="nc">GreetResponse</span> <span class="p">{}</span>

<span class="kd">service</span> <span class="n">GreetService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">Greet</span> <span class="p">(</span><span class="n">GreetRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">GreetResponse</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>After that, Envoy provides us with its own protobuf definition for authorization. We can take a look at <a href="https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/external_auth.proto">external_auth.proto</a> which contains the following:</p>
<div class="code_switcher_container_parent e8bdaf04-b5f2-4350-b060-ad36fb1d8638"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A generic interface for performing authorization check on incoming</span>
<span class="c1">// requests to a networked service.</span>
<span class="kd">service</span> <span class="n">Authorization</span> <span class="p">{</span>
  <span class="c1">// Performs authorization check based on the attributes associated with the</span>
  <span class="c1">// incoming request, and returns status `OK` or not `OK`.</span>
  <span class="k">rpc</span> <span class="n">Check</span><span class="p">(</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">CheckResponse</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This means that we need to implement the Check unary endpoint and register the Authorization service.</p>
<h2 id="go-control-plane">go-control-plane</h2>
<p>Envoy provides us with a project called go-control-plane. This contains a collection of services such as Authorization that we can implement in our project.</p>
<p>To get it, we simply execute:</p>
<div class="code_switcher_container_parent dabd26e0-37b0-4ed2-967f-e7994abb9feb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go get github.com/envoyproxy/go-control-plane
</code></pre></div></div>
</div>
<p>This gives us access to <code>github.com/envoyproxy/go-control-plane/envoy/service/auth/v3</code> which contains the following structs:</p>
<ul>
<li>CheckRequest</li>
<li>CheckResponse</li>
<li>AutorizationServer (which is an interface containing <code>Check</code>)</li>
</ul>
<p>In our code we can now implement the <code>Check</code> function for our server type. This looks like this:</p>
<div class="code_switcher_container_parent d2e71d14-3e5f-416d-81b3-1153e33ab830"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="n">auth</span> <span class="s">"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"</span>

<span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Check</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>If you are familiar with gRPC, this should look familiar.</p>
<p>And to register the Authorization service we can simply register like we normally would:</p>
<div class="code_switcher_container_parent 848d745c-871f-4860-be63-d5a6b3baf950"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="n">auth</span> <span class="s">"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"</span>
  <span class="n">pb</span> <span class="s">"github.com/Clement-Jean/clement-jean.github.io/proto"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Server</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">pb</span><span class="o">.</span><span class="n">UnimplementedGreetServiceServer</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="n">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Server</span><span class="p">{}</span>
  <span class="n">auth</span><span class="o">.</span><span class="n">RegisterAuthorizationServer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">srv</span><span class="p">)</span>
  <span class="n">pb</span><span class="o">.</span><span class="n">RegisterGreetServiceServer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">srv</span><span class="p">)</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Notice that we are registering both services on the server here. This is not necessary. You could have a microservice specifically dedicated to authorization and the other one to greeting people.</p>
<h2 id="envoy-configuration">Envoy Configuration</h2>
<p>Now, in order to make Envoy do what we want, we need to create some YAML configuration. This configuration generally contains the ports on which Envoy listens, filters for filtering requests based on some properties, and clusters which are a collection of one or more endpoints.</p>
<p>In our case we are going to create two clusters. One for the authorization service and the other service. This is in fact not necessary since we registered both services on the same server, but I wanted to show you that you can split clusters for different microservices.</p>
<p>The clusters definition looks like the following:</p>
<div class="code_switcher_container_parent f3cdc18b-7467-453a-a0cd-76bf11379106"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">clusters</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">grpc_auth</span>
    <span class="na">http2_protocol_options</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">lb_policy</span><span class="pi">:</span> <span class="s">round_robin</span>
    <span class="na">load_assignment</span><span class="pi">:</span>
      <span class="na">cluster_name</span><span class="pi">:</span> <span class="s">grpc_auth</span>
      <span class="na">endpoints</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">lb_endpoints</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">endpoint</span><span class="pi">:</span>
            <span class="na">address</span><span class="pi">:</span>
              <span class="na">socket_address</span><span class="pi">:</span>
                <span class="na">address</span><span class="pi">:</span> <span class="s">0.0.0.0</span>
                <span class="na">port_value</span><span class="pi">:</span> <span class="m">50051</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">grpc_greet</span>
    <span class="na">http2_protocol_options</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">lb_policy</span><span class="pi">:</span> <span class="s">round_robin</span>
    <span class="na">load_assignment</span><span class="pi">:</span>
      <span class="na">cluster_name</span><span class="pi">:</span> <span class="s">grpc_greet</span>
      <span class="na">endpoints</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">lb_endpoints</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">endpoint</span><span class="pi">:</span>
            <span class="na">address</span><span class="pi">:</span>
              <span class="na">socket_address</span><span class="pi">:</span>
                <span class="na">address</span><span class="pi">:</span> <span class="s">0.0.0.0</span>
                <span class="na">port_value</span><span class="pi">:</span> <span class="m">50051</span>
</code></pre></div></div>
</div>
<p>I hope we can agree on the fact that they are very similar so let's only dissect the authorization one.</p>
<p><code>http2_protocol_options: {}</code> simply means that we are enabling HTTP/2 for this cluster. This is required for gRPC services since gRPC is basically Protobuf over HTTP/2.</p>
<p>Then we have <code>lb_policy: round_robin</code>. This is not required for us since we will have only one instance of each service but in the case you scale things up, you will have to balance the load across the multiple services.</p>
<p>And finally, all the rest is basically defining a cluster with the name <code>grpc_auth</code> which can be reached at the address <code>0.0.0.0:50051</code>.</p>
<p>Now that we have that, we can take a look at the listener. Let's see the first part of the listener which is simply defining on which address and port Envoy will listen.</p>
<div class="code_switcher_container_parent 9a3ba8cc-90b0-4182-b7b4-581fac8509c2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
  <span class="na">address</span><span class="pi">:</span>
    <span class="na">socket_address</span><span class="pi">:</span>
      <span class="na">address</span><span class="pi">:</span> <span class="s">0.0.0.0</span>
      <span class="na">port_value</span><span class="pi">:</span> <span class="m">50050</span>
</code></pre></div></div>
</div>
<p>Once again Envoy will listen on <code>0.0.0.0:50050</code>. Now, note that even if you had <code>0.0.0.0:50051</code> there will be no conflict with the <code>0.0.0.0:50051</code> address set in the cluster. This is because generally the gRPC server will be containerized separately from Envoy and thus will listen on its own 50051 port.</p>
<p>Finally, things get a little bit more interesting when we talk about the filters. We need to start with a <code>http_connection_manager</code> that defines the route that we want to protect with authorization.</p>
<div class="code_switcher_container_parent dd12040f-3c5e-415e-b023-6b6e8072cc4a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
    <span class="c1"># address</span>
    <span class="na">filter_chains</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">filters</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.network.http_connection_manager</span>
        <span class="na">typed_config</span><span class="pi">:</span>
          <span class="s2">"</span><span class="s">@type"</span><span class="err">:</span> <span class="s">type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager</span>
          <span class="s">stat_prefix</span><span class="err">:</span> <span class="s">grpc_json</span>
          <span class="s">codec_type</span><span class="err">:</span> <span class="s">AUTO</span>
          <span class="s">route_config</span><span class="err">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">route</span>
            <span class="na">virtual_hosts</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">vh</span>
              <span class="na">domains</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">*"</span><span class="pi">]</span>
              <span class="na">routes</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">prefix</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/greet.GreetService/"</span><span class="pi">,</span> <span class="nv">grpc</span><span class="pi">:</span> <span class="pi">{}</span> <span class="pi">}</span>
                <span class="na">route</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">cluster</span><span class="pi">:</span> <span class="nv">grpc_greet</span><span class="pi">,</span> <span class="nv">timeout</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">seconds</span><span class="pi">:</span> <span class="nv">60</span> <span class="pi">}</span> <span class="pi">}</span>
</code></pre></div></div>
</div>
<p>The most important part is the virtual_hosts one. We say that we will accept requests from any domain (not recommended in prod), and then we basically that every request made on route matching <code>/greet.GreetService/</code> will be redirected to the <code>grpc_greet</code> cluster</p>
<p>After that, we will configure the external authorization.</p>
<div class="code_switcher_container_parent 7a0c739e-75da-409c-a6b2-7c9965aeea1b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
    <span class="c1"># address</span>
    <span class="na">filter_chains</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">filters</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.network.http_connection_manager</span>
        <span class="na">typed_config</span><span class="pi">:</span>
          <span class="c1"># route matching</span>
          <span class="na">http_filters</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.http.ext_authz</span>
            <span class="na">typed_config</span><span class="pi">:</span>
              <span class="s2">"</span><span class="s">@type"</span><span class="err">:</span> <span class="s">type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz</span>
              <span class="s">grpc_service</span><span class="err">:</span>
                <span class="na">envoy_grpc</span><span class="pi">:</span>
                  <span class="na">cluster_name</span><span class="pi">:</span> <span class="s">grpc_auth</span>
                <span class="na">timeout</span><span class="pi">:</span> <span class="s">0.5s</span>
              <span class="na">transport_api_version</span><span class="pi">:</span> <span class="s">V3</span>
              <span class="na">failure_mode_allow</span><span class="pi">:</span> <span class="no">false</span>
              <span class="na">with_request_body</span><span class="pi">:</span>
                <span class="na">max_request_bytes</span><span class="pi">:</span> <span class="m">8192</span>
                <span class="na">allow_partial_message</span><span class="pi">:</span> <span class="no">true</span>
                <span class="na">pack_as_bytes</span><span class="pi">:</span> <span class="no">true</span>
              <span class="na">status_on_error</span><span class="pi">:</span>
                <span class="na">code</span><span class="pi">:</span> <span class="m">503</span>
</code></pre></div></div>
</div>
<p>The most important things in this part of the config are:</p>
<ul>
<li><code>cluster_name: grpc_auth</code>. We are specifying that the Authorization service can be found in the <code>grpc_auth</code> cluster.</li>
<li><code>code: 503</code>. If any error happens such as not finding the <code>Check</code> endpoint, Envoy will return a 503 error code.</li>
<li><code>with_request_body</code> forwards HTTP body to the Authorization service.</li>
</ul>
<p>Finally, we need to tell Envoy to actually route the requests. We simply do that by adding a <code>envoy.filters.http.router</code> at the end of the <code>http_filters</code>.</p>
<div class="code_switcher_container_parent 024809b4-a010-4c7f-807f-467cbbaabd3c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
    <span class="c1"># address</span>
    <span class="na">filter_chains</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">filters</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.network.http_connection_manager</span>
        <span class="na">typed_config</span><span class="pi">:</span>
          <span class="c1"># route matching</span>
          <span class="na">http_filters</span><span class="pi">:</span>
          <span class="c1"># ext_authz</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.http.router</span>
            <span class="na">typed_config</span><span class="pi">:</span>
              <span class="s1">'</span><span class="s">@type'</span><span class="err">:</span> <span class="s">type.googleapis.com/envoy.extensions.filters.http.router.v3.Router</span>
</code></pre></div></div>
</div>
<h2 id="lets-codecheckcode">Let's <code>Check</code></h2>
<p>Now that we have our Envoy config ready, it is time to implement the <code>Check</code> endpoint. We will first create a small demo environment where we will receive a token as header. We will check:</p>
<ul>
<li>If the token is empty/doesn't exist -&gt; Deny</li>
<li>If the token value is different from 'authz' -&gt; Deny</li>
<li>Otherwise -&gt; Allow</li>
</ul>
<p>Token checks would normally involve a database of some sort but here, as this is a small demo, let's create a simple function.</p>
<div class="code_switcher_container_parent 785d6060-c1b6-4a5d-af2e-992ffa2fcd4e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">containsToken</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">false</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"empty key"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="s">"authz"</span><span class="p">),</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Nothing fancy.</p>
<p>Now, in <code>Check</code> we will be receiving headers, not as metadata, but as part of the request. I will let you check <a href="https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/external_auth.proto">external_auth.proto</a> and <a href="https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/attribute_context.proto">attribute_context.proto</a> to understand a little bit more about the data that we will receive as part of <code>CheckRequest</code>.</p>
<p>So we now get the token from the headers and pass it through <code>containsToken</code>.</p>
<div class="code_switcher_container_parent 2b7f9215-3b61-46e9-a3c6-55b747d22923"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Check</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">headers</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">Attributes</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">Http</span><span class="o">.</span><span class="n">Headers</span>
  <span class="n">ok</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">containsToken</span><span class="p">(</span><span class="n">headers</span><span class="p">[</span><span class="s">"token"</span><span class="p">])</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Finally, we still have to do error handling. <code>ok</code> will tell us whether the key is in the 'database' and the <code>err</code> will be errors like <code>empty key</code>. Now, returning an error with <code>go-control-plane</code> and Envoy is a little bit different that what you might expect. This is because instead of returning the error as status like we normally do in gRPC is not compatible with Envoy. Instead, we need to return the status as part of the <code>CheckResponse</code>.</p>
<p>Two helpers functions aiming at creating a <code>Allow</code> and <code>Deny</code> response, that I found <a href="https://ekhabarov.com/post/envoy-as-an-api-gateway-authentication-and-authorization/">here</a>, are pretty self describing:</p>
<div class="code_switcher_container_parent 38a8711f-ee2d-42fa-9df9-cc14d8de50ee"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="c">//...</span>
  <span class="s">"google.golang.org/genproto/googleapis/rpc/status"</span>
  <span class="s">"google.golang.org/grpc/codes"</span>

  <span class="n">envoy_type</span> <span class="s">"github.com/envoyproxy/go-control-plane/envoy/type/v3"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">denied</span><span class="p">(</span><span class="n">code</span> <span class="kt">int32</span><span class="p">,</span> <span class="n">body</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">{</span>
    <span class="n">Status</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">status</span><span class="o">.</span><span class="n">Status</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="n">code</span><span class="p">},</span>
    <span class="n">HttpResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse_DeniedResponse</span><span class="p">{</span>
      <span class="n">DeniedResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">DeniedHttpResponse</span><span class="p">{</span>
        <span class="n">Status</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">envoy_type</span><span class="o">.</span><span class="n">HttpStatus</span><span class="p">{</span>
          <span class="n">Code</span><span class="o">:</span> <span class="n">envoy_type</span><span class="o">.</span><span class="n">StatusCode</span><span class="p">(</span><span class="n">code</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="n">Body</span><span class="o">:</span> <span class="n">body</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">allowed</span><span class="p">()</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">{</span>
    <span class="n">Status</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">status</span><span class="o">.</span><span class="n">Status</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="kt">int32</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">OK</span><span class="p">)},</span>
    <span class="n">HttpResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse_OkResponse</span><span class="p">{</span>
      <span class="n">OkResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">OkHttpResponse</span><span class="p">{</span>
        <span class="n">HeadersToRemove</span><span class="o">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"token"</span><span class="p">},</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Notice that we are not using the traditional <code>google.golang.org/grpc/status</code> here. We are using <code>google.golang.org/genproto/googleapis/rpc/status</code>. <strong>As of the time of writing this, I'm not aware of why this is the case. I might come back and update that when I learned why.</strong></p>
<p>Finally, we can finish the implementation of both <code>Check</code> and <code>Greet</code>. We will make <code>Greet</code> return an empty response. And we will make <code>Check</code> return the result of <code>denied</code> in case of error and wrong token, or return the result of <code>allowed</code> if everything goes well.</p>
<div class="code_switcher_container_parent e06baf32-fc9c-406a-a107-dc7400f58371"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="s">"net/http"</span>
  <span class="c">//...</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Check</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">headers</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">Attributes</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">Http</span><span class="o">.</span><span class="n">Headers</span>
  <span class="n">ok</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">containsToken</span><span class="p">(</span><span class="n">headers</span><span class="p">[</span><span class="s">"token"</span><span class="p">])</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">denied</span><span class="p">(</span>
      <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span>
      <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"failed retrieving the api key: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">),</span>
    <span class="p">),</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">denied</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusUnauthorized</span><span class="p">,</span> <span class="s">"unauthorized"</span><span class="p">),</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">allowed</span><span class="p">(),</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Greet</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">GreetRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">GreetResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">GreetResponse</span><span class="p">{},</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<h2 id="demo-time">Demo Time!</h2>
<p>Here we are! It's demo time baby!</p>
<p>To test all of this, we will run our server:</p>
<div class="code_switcher_container_parent eddfa9a7-eff2-49e1-b7f2-416f9676e24e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run server/<span class="k">*</span>.go
listening at 0.0.0.0:50051
</code></pre></div></div>
</div>
<p>After that, let's use <a href="https://func-e.io/">func-e</a> to run our Envoy instance:</p>
<div class="code_switcher_container_parent 0499caa3-502b-4c8a-a89a-7fa7bbebf0aa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>func-e run <span class="nt">-c</span> envoy/config.yaml
</code></pre></div></div>
</div>
<p>And finally, I will use <a href="https://github.com/fullstorydev/grpcurl">grpcurl</a> to query the Greet endpoint on <code>0.0.0.0:50050</code> (Envoy listener). Let's start with the happy path scenario:</p>
<div class="code_switcher_container_parent fa2504f1-a9ce-42e6-92e5-0e386c57f4c2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/greet.proto <span class="se">\</span>
          <span class="nt">-rpc-header</span><span class="o">=</span><span class="s2">"token: authz"</span> <span class="se">\</span>
          0.0.0.0:50050 greet.GreetService/Greet
<span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>
</div>
<p>We get an empty <code>GreetResponse</code>, as expected.</p>
<p>Now, we can try without token:</p>
<div class="code_switcher_container_parent c0647adf-a547-41cf-92ce-004a8300bf63"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/greet.proto <span class="se">\</span>
          0.0.0.0:50050 greet.GreetService/Greet
ERROR:
  Code: Internal
  Message: failed retrieving the api key: empty key
</code></pre></div></div>
</div>
<p>We get an Internal error with the message &quot;empty key&quot;.</p>
<p>And finally, we test with a wrong token:</p>
<div class="code_switcher_container_parent 16902e86-23b2-4248-86fd-8b524158e545"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/greet.proto <span class="se">\</span>
          <span class="nt">-rpc-header</span><span class="o">=</span><span class="s2">"token: authd"</span> <span class="se">\</span>
          0.0.0.0:50050 greet.GreetService/Greet
ERROR:
  Code: Unauthenticated
  Message: unauthorized
</code></pre></div></div>
</div>
<p>Unauthorized! Great everything is working as expected.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post we saw that we can use Envoy to sit between our services and call an Authorization service to decide whether or not to forward the request to a given route. In our case, we worked on a simple token checking logic but this should look similar for your real-life scenario. I hope this was interesting, thank you for reading!</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="gRPC" /><category term="Envoy" /><summary type="html"><![CDATA[Recently, I've been looking for a good alternative to Traefik as Reverse Proxy for gRPC services. Traefik has great support for gRPC and other common features, but Envoy comes with Protobuf-backed configuration and even greater support for gRPC services. In the article, I want to show how you can make Envoy use your custom authorization logic before redirecting (or not) the request to other services.]]></summary></entry><entry><title type="html">Range Testing in Strings</title><link href="https://clement-jean.github.io/range_testing_in_strings/" rel="alternate" type="text/html" title="Range Testing in Strings" /><published>2023-06-02T00:00:00+08:00</published><updated>2023-06-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/range_testing_in_strings</id><content type="html" xml:base="https://clement-jean.github.io/range_testing_in_strings/"><![CDATA[<p>Recently, I've been working on adding support for <code>SourceCodeInfo</code> into <a href="https://github.com/Clement-Jean/protein">Protein</a>. This required checking a lot of Column/Line ranges in string. An example of this is the following. Given a oneof like this:</p>
<div class="code_switcher_container_parent be8f71f4-bf33-4dd7-977d-6994c1ef66ea"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">oneof</span> <span class="n">Test</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>we should come up with the following ranges:</p>
<div class="code_switcher_container_parent 8aaae2a3-b70b-4cd1-b934-4434bed84017"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>
  // line,column
  <span class="o">{</span>0, 0, 2, 1<span class="o">}</span> // oneof - from 0,0 to 2, 1
  <span class="o">{</span>1, 2, 15<span class="o">}</span>   // oneof field - from 1,2 to 1,15 <span class="o">(</span>same lines get ommited<span class="o">)</span>
  <span class="o">{</span>1, 2, 7<span class="o">}</span>    // oneof field <span class="nb">type</span> - from 1,2 to 1,7
  <span class="o">{</span>1, 8, 10<span class="o">}</span>   // oneof field name - from 1,8 to 1,10
  <span class="o">{</span>1, 13, 14<span class="o">}</span>  // oneof field tage - from 1,13 to 1,14
<span class="o">]</span>
</code></pre></div></div>
</div>
<p>This might seem like a daunting and it was until I found out how to test ranges correctly for these kind of situations.</p>
<h2 id="sourcecodeinfo">SourceCodeInfo</h2>
<p>Before starting with the whole testing thing. It is important to get a sense of what a Protobuf's <code>SourceCodeInfo</code> is. As its name suggests this is information about the source code. This information is basically lines and columns for tokens (called spans) and some tags sequence starting from <code>FileDescriptorProto</code> (called path). This info is mostly important for tools like what Protein will be: linters, LSPs, ... It gives us a way to find elements both in terms of position (line 1, column 10) in code and in terms of context (a oneof inside a message).</p>
<p>While the second part is pretty interesting, we are not going to cover that. We will focus on testing the spans correctly. However, if you are interested in learning more about paths, I'd be happy to write an article on it. Leave a comment if you are.</p>
<h2 id="naive-testing">Naive Testing</h2>
<p>Now that we know what are <code>SourceCodeInfo</code> we can start with the testing. A naive and rather manual solution to solve this is probably writing every span by hand. This is pretty much what I did in the introduction of this article. This could mean something like this:</p>
<div class="code_switcher_container_parent 67282221-f83f-4985-973d-f631ab2a7cfa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
  <span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span>
  <span class="n">info</span> <span class="p">[]</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">SourceCodeInfo_Location</span><span class="p">,</span>
  <span class="n">expectedSpans</span> <span class="p">[][]</span><span class="kt">int32</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"expected info"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">expectedSpans</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"expected %v, got: %v"</span><span class="p">,</span> <span class="n">expectedSpans</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">expectedSpan</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">expectedSpans</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Span</span><span class="p">,</span> <span class="n">expectedSpan</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"path %d wrong. expected %v, got: %v"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">expectedSpan</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Span</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestOneofSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// Arrange</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">)</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

  <span class="c">// Act</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="no">nil</span><span class="p">)</span>

  <span class="c">// Assert</span>
  <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
    <span class="n">t</span><span class="p">,</span>
    <span class="n">info</span><span class="p">,</span>
    <span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">45</span><span class="p">},</span>  <span class="c">// oneof - from 0,0 to 0, 45</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">26</span><span class="p">},</span> <span class="c">// oneof field - from 0,13 to 0,26</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">18</span><span class="p">},</span> <span class="c">// oneof field type - from 0,13 to 0,18</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">21</span><span class="p">},</span> <span class="c">// oneof field name - from 0,19 to 0,21</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">24</span><span class="p">,</span> <span class="m">25</span><span class="p">},</span> <span class="c">// oneof field tage - from 0,24 to 0,25</span>
      <span class="c">// etc...</span>
    <span class="p">},</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This looks rather simple and if we stick to testing small pieces of code, it is feasible to get our way through. However, as you might expect, this is tiring and very repetitive work. Imagine doing that for every single concept in Protobuf...</p>
<h2 id="a-better-way">A Better Way</h2>
<p>For full disclosure, this idea for testing ranges in strings is not my idea. This is an idea I discovered after reading Protobuf documentation and unit tests. An example of this is the documentation for <code>SourceCodeInfo</code> in the descriptor.proto file:</p>
<div class="code_switcher_container_parent 7224b386-b124-4cfb-b614-f2e2b1a10541"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Let's look at just the field definition:</span>
<span class="c">//   optional string foo = 1;</span>
<span class="c">//   ^       ^^     ^^  ^  ^^^</span>
<span class="c">//   a       bc     de  f  ghi</span>
<span class="c">// We have the following locations:</span>
<span class="c">//   span   path               represents</span>
<span class="c">//   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.</span>
<span class="c">//   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).</span>
<span class="c">//   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).</span>
<span class="c">//   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).</span>
<span class="c">//   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).</span>
</code></pre></div></div>
</div>
<p>We can just focus on the span and how they mark the beginning and end of them with letters. <code>optional</code> as a span of [a, b) (from a to b non-inclusive). Meaning that we go from column 0 to column 8 (length of the work optional) but you can see that <code>b</code> is marking the space character so we do not include that.</p>
<p>Now, even I didn't get the original idea, I believe that implementing it in Go (original in C++) and adding line support is quite interesting. Let us start by the v1 which didn't support multiline code.</p>
<p>The idea is that we are going to have function calculating indices from a string full of separator characters and letters. For example, if we say that the separator is '-', we could have a string like this:</p>
<div class="code_switcher_container_parent abcab176-7193-485f-a710-8b8b0270e905"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a------------b----cd-e--fghi-----jk---l--mno-p
</code></pre></div></div>
</div>
<p>that would match a oneof like this one:</p>
<div class="code_switcher_container_parent 2e87de7e-f10e-4ffa-b0e0-f38173f053cc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">oneof</span> <span class="n">Test</span> <span class="p">{</span> <span class="kt">int32</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kt">string</span> <span class="na">uuid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>
</div>
<p>To better see it we will have a function that takes both the original Protobuf code and the reference string (that is what I called the separator-full string) as parameters:</p>
<div class="code_switcher_container_parent ab79da11-b2d5-4726-9bf4-420407fc9b06"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">referenceString</span><span class="p">(</span>
  <span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
  <span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>This nicely matches and it is easier to visually see where the span starts and ends when we know the letter. If I told you there should be a span [b, h), you can clearly understand that these references to the id field definition.</p>
<p>Now, how should we represent all of this in terms of data structure? The naive approach is to create a <code>map[rune]int32</code>. The <code>rune</code> will be the letterm and we are return <code>int32</code> instead of <code>int</code> simply because <code>SourceCodeInfo</code> is expecting <code>int32</code>s. Then, when we will want to check the value of <code>a</code>, we can simply do:</p>
<div class="code_switcher_container_parent c0ca2061-4ac6-4ef9-86ee-ce4db69ae4a5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">:=</span> <span class="n">refs</span><span class="p">[</span><span class="sc">'a'</span><span class="p">]</span>
</code></pre></div></div>
</div>
<p>This doesn't seem that bad right? Well, what if you need to access letters a to z? You basically have 26 of these variables around. Feasible but not that ergonomic.</p>
<h2 id="an-even-better-way">An Even Better Way</h2>
<p>My second thought on how to improve this comes from my early interest in reflection. I find it amazing that we take a look at the guts of our program and manipulate it programmatically. An example of that is listing all the fields in a struct and/or set values to them. I don't know what you think but for me this is just so powerful (and dangerous!).</p>
<p>Enough about my geekiness on reflection. What if we could simply have an object into which we will set the values of our spans. This would let us write something like following for accessing values:</p>
<div class="code_switcher_container_parent 1fdc48f6-247c-478c-ad69-fb80c62bf04b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ref</span><span class="o">.</span><span class="n">A</span>
</code></pre></div></div>
</div>
<p>How nice would that be? We would only have one variable (ref) and we could access the fields.</p>
<p>It turns out that we can do it pretty easily. Think about a <code>struct</code> like the following:</p>
<div class="code_switcher_container_parent 80a2a371-7a4a-48ea-bd2f-2f13fd6a05ab"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Ref</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">O</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span> <span class="kt">int32</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>I agree that this definition is not that beautiful but it will make our test code easier to read.</p>
<p>With that <code>Ref</code>, we will now use reflection to set <code>A</code> (uppercase because reflection require exported fields) when we see a <code>a</code> in the string. This will look like this:</p>
<div class="code_switcher_container_parent e396af4e-ef68-4623-990c-50277c271e0a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// referenceString returns the original string and the newly created Ref</span>
<span class="c">// the sep argument is the separator we skip (e.g `-`)</span>
<span class="k">func</span> <span class="n">referenceString</span><span class="p">(</span><span class="n">src</span> <span class="kt">string</span><span class="p">,</span> <span class="n">indices</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sep</span> <span class="kt">rune</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">Ref</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// indices should always be longer than src by 1 rune</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">+</span><span class="m">1</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="s">"wrong indices"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">ref</span> <span class="o">:=</span> <span class="n">Ref</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">indices</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="n">sep</span> <span class="p">{</span>
      <span class="c">// checks valid characters (lowercase letter)</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLower</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v is not a lowercase letter"</span><span class="p">,</span> <span class="n">index</span><span class="p">))</span>
      <span class="p">}</span>

      <span class="c">// this is the index of the letter in our Ref struct!</span>
      <span class="c">// e.g A is at index 0 and Z is at index 25</span>
      <span class="n">idx</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="kt">byte</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span> <span class="c">// ASCII trick to get index of letter in alphabet</span>

      <span class="c">// set the value of i to the field at index idx</span>
      <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">src</span><span class="p">,</span> <span class="n">ref</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>with that we can simply write the following:</p>
<div class="code_switcher_container_parent bd169d2e-006e-49ef-a6da-618e4048aebb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
  <span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
  <span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>and if we print <code>ref</code> we get:</p>
<div class="code_switcher_container_parent 9b7975eb-3766-4ea0-88f0-8de3a4169858"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Ref</span> <span class="p">{</span><span class="n">A</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">B</span><span class="o">:</span> <span class="m">13</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="m">18</span><span class="p">,</span> <span class="n">D</span><span class="o">:</span> <span class="m">19</span><span class="p">,</span> <span class="n">E</span><span class="o">:</span> <span class="m">21</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="m">24</span><span class="p">,</span> <span class="n">G</span><span class="o">:</span> <span class="m">25</span><span class="p">,</span> <span class="n">H</span><span class="o">:</span> <span class="m">26</span><span class="p">,</span> <span class="n">I</span><span class="o">:</span> <span class="m">27</span><span class="p">,</span> <span class="n">J</span><span class="o">:</span> <span class="m">33</span><span class="p">,</span> <span class="n">K</span><span class="o">:</span> <span class="m">34</span><span class="p">,</span> <span class="n">L</span><span class="o">:</span> <span class="m">38</span><span class="p">,</span> <span class="n">M</span><span class="o">:</span> <span class="m">41</span><span class="p">,</span> <span class="n">N</span><span class="o">:</span> <span class="m">42</span><span class="p">,</span> <span class="n">O</span><span class="o">:</span> <span class="m">43</span><span class="p">,</span> <span class="n">P</span><span class="o">:</span> <span class="m">45</span><span class="p">,</span> <span class="n">Q</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">R</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">S</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">T</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">U</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">V</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">W</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">X</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">Y</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">Z</span><span class="o">:</span> <span class="m">0</span><span class="p">}</span>
</code></pre></div></div>
</div>
<p>If we check at the span [b, h), we can see that we have [13, 26). This is quite powerful and way more readable. If we rewrite the <code>TestOneofSourceCodeInfo</code> function with the use of <code>Ref</code>, we have:</p>
<div class="code_switcher_container_parent 1a6ea2d8-d88f-41d0-9796-37281bba02a1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOneofSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// Arrange</span>
  <span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
    <span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
    <span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
    <span class="sc">'-'</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

  <span class="c">// Act</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="no">nil</span><span class="p">)</span>

  <span class="c">// Assert</span>
  <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
    <span class="n">t</span><span class="p">,</span>
    <span class="n">info</span><span class="p">,</span>
    <span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">P</span><span class="p">},</span>  <span class="c">// oneof - from 0,0 to 0, 45</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">H</span><span class="p">},</span> <span class="c">// oneof field - from 0,13 to 0,26</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">C</span><span class="p">},</span> <span class="c">// oneof field type - from 0,13 to 0,18</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">E</span><span class="p">},</span> <span class="c">// oneof field name - from 0,19 to 0,21</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">F</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">G</span><span class="p">},</span> <span class="c">// oneof field tage - from 0,24 to 0,25</span>
      <span class="c">// etc...</span>
    <span class="p">},</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This now look a little bit less magic than before with all these numbers everywhere.</p>
<h2 id="supporting-lines">Supporting lines</h2>
<p>As you can see, we still have these 0s for each line. They actually represent lines. Could we also support multiline code? This would let us write something like:</p>
<div class="code_switcher_container_parent bbd41d17-ecf3-4ec8-b309-6594509eee54"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
  <span class="s">`oneof Test {
int32 id = 1;
string uuid = 2;
}`</span><span class="p">,</span>
  <span class="s">`a------------
b----cd-e--fgh
i-----jk---l--mno
-p`</span><span class="p">,</span>
  <span class="sc">'-'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>Without indentation that looks a little bit weird but this is already letting us testing a little bit more in depth.</p>
<p>The first thing that we are going to do is adding fields in <code>Ref</code> for lines. This looks like:</p>
<div class="code_switcher_container_parent 22bf15d0-2f0d-4ead-8154-362f6114aa46"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Ref</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="n">LA</span><span class="p">,</span> <span class="n">LB</span><span class="p">,</span> <span class="n">LC</span><span class="p">,</span> <span class="n">LD</span><span class="p">,</span> <span class="n">LE</span><span class="p">,</span> <span class="n">LF</span><span class="p">,</span> <span class="n">LG</span><span class="p">,</span> <span class="n">LH</span><span class="p">,</span> <span class="n">LI</span><span class="p">,</span> <span class="n">LJ</span><span class="p">,</span> <span class="n">LK</span><span class="p">,</span> <span class="n">LL</span><span class="p">,</span> <span class="n">LM</span><span class="p">,</span> <span class="n">LN</span><span class="p">,</span> <span class="n">LO</span><span class="p">,</span> <span class="n">LP</span><span class="p">,</span> <span class="n">LQ</span><span class="p">,</span> <span class="n">LR</span><span class="p">,</span> <span class="n">LS</span><span class="p">,</span> <span class="n">LT</span><span class="p">,</span> <span class="n">LU</span><span class="p">,</span> <span class="n">LV</span><span class="p">,</span> <span class="n">LW</span><span class="p">,</span> <span class="n">LX</span><span class="p">,</span> <span class="n">LY</span><span class="p">,</span> <span class="n">LZ</span> <span class="kt">int32</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Cringing a little? It's fine! Keep in mind that this is for the sake of having more expressive tests.</p>
<p>Now, in referenceString we will keep track of columns and lines and, for <code>a</code>, we are going to set <code>A</code> to the column and <code>LA</code> to the line. We now have:</p>
<div class="code_switcher_container_parent 89f1f906-a79c-4563-a3c4-79c91dcb5bec"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">referenceString</span><span class="p">(</span><span class="n">src</span> <span class="kt">string</span><span class="p">,</span> <span class="n">indices</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sep</span> <span class="kt">rune</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">Ref</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">ReplaceAll</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">""</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">+</span><span class="m">1</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="s">"wrong indices"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">ref</span> <span class="o">:=</span> <span class="n">Ref</span><span class="p">{}</span>
  <span class="n">line</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c">// the line</span>
  <span class="n">column</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c">// the column - do not use i anymore</span>

  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">indices</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="n">sep</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">!=</span> <span class="sc">'\n'</span> <span class="p">{</span> <span class="c">// also check '\n'</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLower</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v is not a lowercase letter"</span><span class="p">,</span> <span class="n">index</span><span class="p">))</span>
      <span class="p">}</span>

      <span class="n">idx</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="kt">byte</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span>

      <span class="c">// set the column</span>
      <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">column</span><span class="p">))</span>

      <span class="c">// set the line</span>
      <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="m">26</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="n">column</span> <span class="o">+=</span> <span class="m">1</span>

    <span class="c">// on newline reset column and increase line</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
      <span class="n">line</span><span class="o">++</span>
      <span class="n">column</span> <span class="o">=</span> <span class="m">0</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">src</span><span class="p">,</span> <span class="n">ref</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>With that we can now write a test for multiline like this:</p>
<div class="code_switcher_container_parent c9aa631f-08b9-4e5c-98bb-833bdbd7621d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOneofMultilineSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
    <span class="s">`oneof Test {
int32 id = 1;
string uuid = 2;
}`</span><span class="p">,</span>
    <span class="s">`a------------
b----cd-e--fgh
i-----jk---l--mno
-p`</span><span class="p">,</span>
    <span class="sc">'-'</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
  <span class="n">ctx</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">oneofContext</span><span class="p">{}</span>

  <span class="c">// Act</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseOneof</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="n">ctx</span><span class="p">)</span>

  <span class="c">// Assert</span>
  <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
    <span class="n">t</span><span class="p">,</span>
    <span class="n">info</span><span class="p">,</span>
    <span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
      <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LA</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">LP</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">P</span><span class="p">},</span>
      <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LB</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">H</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LB</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">C</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LD</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">E</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LF</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">F</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">G</span><span class="p">},</span>
      <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LI</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">I</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">O</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LI</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">I</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">J</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LK</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">K</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">L</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LM</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">M</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">N</span><span class="p">},</span>
    <span class="p">},</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Take your time to wrap your mind around it. We just made the all things look a little bit more verbose but less magical and frightening.</p>
<h2 id="advantages">Advantages</h2>
<ul>
<li>New developers looking at these tests will probably be less afraid of writing a new test.</li>
<li>Fewer places where we can make typos. Most typos will be in the reference string.</li>
<li>Changing the spans or separators requires us to only update the reference strings, not all the numbers in int32 arrays.</li>
<li>Reflection is letting us create a map out of a struct and have fewer variables.</li>
</ul>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>More verbose.</li>
<li>Reflection is kind of magical too. However, magic is only happening in <code>referenceString</code>. Not everywhere like before.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I hope this makes you as interested as I am on how to improve testing code. I already loved creating readable and deterministic tests but now with this other tool in my tool belt, I'm interested in thinking more about readability and developer onboarding.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="Protobuf" /><summary type="html"><![CDATA[Recently, I've been working on adding support for SourceCodeInfo into Protein. This required checking a lot of Column/Line ranges in string. An example of this is the following. Given a oneof like this:]]></summary></entry><entry><title type="html">Custom RPC Options in Protobuf</title><link href="https://clement-jean.github.io/custom_rpc_options/" rel="alternate" type="text/html" title="Custom RPC Options in Protobuf" /><published>2023-04-17T00:00:00+08:00</published><updated>2023-04-17T00:00:00+08:00</updated><id>https://clement-jean.github.io/custom_rpc_options</id><content type="html" xml:base="https://clement-jean.github.io/custom_rpc_options/"><![CDATA[<p>Recently I had to design authentication for a Blazor Application. After finishing implementing, I soon faced the need to know which RPC endpoint needs authentication and which doesn't. And while part of the problem is a solved one, I still needed a mechanism to let me define this. Let's see how.</p>
<blockquote>
<p>All the code (<strong>only running through Bazel right now</strong>) is available <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-04-17-custom_rpc_options">here</a></p>
</blockquote>
<h2 id="custom-options">Custom Options</h2>
<p>Before explaining what my solution to the problem is, I'd like to make sure you understand what are custom options in Protobuf and how to define one. If you are confident about this skill, feel free to skip to the next section.</p>
<p><strong>A custom option is a way to define metadata for a proto file, message, enum, fields, service and rpc</strong>. Generally, we are used to these:</p>
<div class="code_switcher_container_parent 5126ea5b-ff8c-463e-bc39-550c0a235d8e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/Clement-Jean/test"</span><span class="p">;</span>
</code></pre></div></div>
</div>
<p>being placed at the top of the proto file. But it is important to know that you can make a field or message deprecated like so:</p>
<div class="code_switcher_container_parent 2f97ed7b-bbb5-44a7-84f9-f3b274d6ad41"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Test</span> <span class="p">{</span>
  <span class="k">option</span> <span class="na">deprecated</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="kt">int32</span> <span class="na">field</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span> <span class="na">deprecated</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Now, I agree that, in most of the cases, these option are more informational than anything else. They do not necessarily impact the code generation but they are here to document the code. Also, knowing that Protobuf has reflection, we can use them in our code. This means that we could have a tool checking for deprecated messages, fields, ... and give us warnings when we use them in our code base.</p>
<p>How do we define one, though? Well, it turns out that this is pretty simple. We need to use the <code>extend</code> concept and define which kind of option we want to extend. Let's first take a look at what kind of options we have:</p>
<ul class="code-tab-container 54fdc791-a9a7-4f50-8a34-6640d702de79"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '54fdc791-a9a7-4f50-8a34-6640d702de79', 0)">descriptor.proto</a></li></ul><ul class="code-tab-switcher 54fdc791-a9a7-4f50-8a34-6640d702de79"><li class="code_switcher_container_parent active-tab code_switcher_proto ab44de44-8bde-43f3-acaf-378c47e29685"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">FileOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>

  <span class="c1">// Clients can define custom options in extensions of this message. See above.</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">MessageOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">FieldOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">OneofOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">EnumOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">EnumValueOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ServiceOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">MethodOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That's actually every concept that we have in Protobuf! So let's define a simple option now. We will define an option called <code>hello</code> of type string. And for making this related to the problem that I'm trying to solve, let's define that option in <code>MethodOptions</code> which represents the options for RPC endpoints.</p>
<p>So we will extend <code>MethodOptions</code>:</p>
<ul class="code-tab-container 9812dedb-92d1-426e-9256-b8dbcf1700b4"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '9812dedb-92d1-426e-9256-b8dbcf1700b4', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher 9812dedb-92d1-426e-9256-b8dbcf1700b4"><li class="code_switcher_container_parent active-tab code_switcher_proto 85abeb27-4ee9-408a-87a0-55d2285718b7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And then inside this <code>extend</code> we can just write the hello field:</p>
<ul class="code-tab-container d8396715-16de-4904-951e-167d2a9f552f"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'd8396715-16de-4904-951e-167d2a9f552f', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher d8396715-16de-4904-951e-167d2a9f552f"><li class="code_switcher_container_parent active-tab code_switcher_proto e00f3819-86c7-4076-8227-7a9abefcbb16"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">hello</span> <span class="o">=</span> <span class="err">??</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But what is the tag that we need to use? Well, if you noticed in the <code>descriptor.proto</code> we have an extension range. These are the numbers we can use for tag. For now, we will use 1000, however, be aware that some of these tags are reserved by some already defined options. <strong>So if you were to use a tool that defines options that have the same tag number, there would be conflicts</strong>.</p>
<p>We now have:</p>
<ul class="code-tab-container 7e66fb3f-5a26-4bb7-a0d9-4a8f4eedf967"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '7e66fb3f-5a26-4bb7-a0d9-4a8f4eedf967', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher 7e66fb3f-5a26-4bb7-a0d9-4a8f4eedf967"><li class="code_switcher_container_parent active-tab code_switcher_proto a3056116-72c7-416d-b49e-350321e6f9f2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">hello</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="reflection">Reflection</h2>
<p>Let us now use that option and read the value in code.</p>
<p>To use it, this is pretty simple, we just need to import the file in which we wrote the <code>extend</code> and make sure we use the option on an RPC endpoint.</p>
<ul class="code-tab-container 91f72d49-70fb-4078-87cb-a7a8f0ba0917"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '91f72d49-70fb-4078-87cb-a7a8f0ba0917', 0)">world.proto</a></li></ul><ul class="code-tab-switcher 91f72d49-70fb-4078-87cb-a7a8f0ba0917"><li class="code_switcher_container_parent active-tab code_switcher_proto 4f057654-1f5e-4293-8384-ed2976358ec2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"hello.proto"</span><span class="p">;</span>

<span class="c1">//...</span>

<span class="kd">service</span> <span class="n">HelloWorldService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">HelloWorld</span> <span class="p">(</span><span class="n">HelloWorldRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloWorldResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">hello</span><span class="p">)</span> <span class="o">=</span> <span class="s">"world"</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We can generate the proto files out of world.proto and hello.proto. And after that we can take a bottom-up approach to read this value through reflection. By bottom up, I mean that we are going to first see how to read the value of a <code>MethodOptions</code>, then we will go to getting a <code>MethodDescriptor</code> out of a <code>ServiceDescriptor</code>, and finally getting a <code>ServiceDescriptor</code> out a <code>FileDescriptor</code>.</p>
<h3 id="getting-an-option-value">Getting an Option Value</h3>
<p>The first thing we are going to deal with is <code>MethodOptions</code>. These represent the options set on an RPC endpoint. In most of the implementations, we can check the existence of an option so this is as simple as &quot;check if there is the option with a given id on this method, if yes return the value, otherwise return null&quot;.</p>
<ul class="code-tab-container e870c9b3-7a13-4233-a0fe-acaefa6b96af"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e870c9b3-7a13-4233-a0fe-acaefa6b96af', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'e870c9b3-7a13-4233-a0fe-acaefa6b96af', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'e870c9b3-7a13-4233-a0fe-acaefa6b96af', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'e870c9b3-7a13-4233-a0fe-acaefa6b96af', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'e870c9b3-7a13-4233-a0fe-acaefa6b96af', 4)">main.cs</a></li></ul><ul class="code-tab-switcher e870c9b3-7a13-4233-a0fe-acaefa6b96af"><li class="code_switcher_container_parent active-tab code_switcher_go 696dfb67-84f7-4c42-a00d-5519118025f4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="s">"google.golang.org/protobuf/proto"</span>
  <span class="s">"google.golang.org/protobuf/reflect/protoreflect"</span>
  <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">getOptionValue</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span> <span class="c">// T is not covering all types...</span>
  <span class="n">opts</span> <span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">MethodOptions</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="n">value</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">ok</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">value</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp e4c7ec74-1c76-45de-9a39-9e42e96d0dd9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">OPT_T</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">OPT_T</span><span class="o">&gt;</span> <span class="n">get_option_value</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">MethodOptions</span> <span class="o">&amp;</span><span class="n">opts</span><span class="p">,</span>
  <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">id</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">opts</span><span class="p">.</span><span class="n">HasExtension</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="o">?</span>
    <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java b94a9682-80f0-4da9-8299-e57281175a77"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.DescriptorProtos</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.protobuf.GeneratedMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getOptionValue</span><span class="o">(</span>
  <span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span> <span class="n">opts</span><span class="o">,</span>
  <span class="nc">GeneratedMessage</span><span class="o">.</span><span class="na">GeneratedExtension</span><span class="o">&lt;</span><span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">id</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">opts</span><span class="o">.</span><span class="na">hasExtension</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">?</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">((</span><span class="no">T</span><span class="o">)</span><span class="n">opts</span><span class="o">.</span><span class="na">getExtension</span><span class="o">(</span><span class="n">id</span><span class="o">))</span> <span class="o">:</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 8f61d98d-25f0-45ba-ab62-4633bd92f6bb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_option_value</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">.</span><span class="n">ListFields</span><span class="p">():</span>
    <span class="p">(</span><span class="n">desc</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="o">=</span> <span class="n">field</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s">""</span> <span class="ow">and</span> <span class="n">desc</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="nb">id</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp dcf5f85f-a8fd-4fee-b48e-973ac4d130ea"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">pb</span> <span class="p">=</span> <span class="k">global</span><span class="p">::</span><span class="n">Google</span><span class="p">.</span><span class="n">Protobuf</span><span class="p">;</span>

<span class="k">static</span> <span class="k">private</span> <span class="n">T</span> <span class="n">GetOptionValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
  <span class="k">this</span> <span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span> <span class="n">md</span><span class="p">,</span> <span class="c1">// MethodDescriptor and not MethodOptions as promised (sorry!)</span>
  <span class="n">pb</span><span class="p">::</span><span class="n">Extension</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodOptions</span><span class="p">,</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">id</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="n">md</span><span class="p">.</span><span class="nf">GetOptions</span><span class="p">().</span><span class="nf">GetExtension</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</code></pre></div></div>
</li></ul>
<h3 id="getting-a-method">Getting a Method</h3>
<p>The next step is to get a <code>MethodDescriptor</code> out of a <code>ServiceDescriptor</code>. This is done so that we can later call the GetOptionValue function on the options of that method (if any). We will basically loop over all the methods of a service and check for a predicate on each. If the predicate returns true, we &quot;select&quot; that method.</p>
<ul class="code-tab-container a011ed90-00fa-4bd1-b2d1-5e62e629c2f8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a011ed90-00fa-4bd1-b2d1-5e62e629c2f8', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'a011ed90-00fa-4bd1-b2d1-5e62e629c2f8', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'a011ed90-00fa-4bd1-b2d1-5e62e629c2f8', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'a011ed90-00fa-4bd1-b2d1-5e62e629c2f8', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'a011ed90-00fa-4bd1-b2d1-5e62e629c2f8', 4)">main.cs</a></li></ul><ul class="code-tab-switcher a011ed90-00fa-4bd1-b2d1-5e62e629c2f8"><li class="code_switcher_container_parent active-tab code_switcher_go 2dfaefe0-f600-4603-9e4c-fee04a96331a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">getServiceMethod</span><span class="p">(</span>
  <span class="n">sd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ServiceDescriptor</span><span class="p">,</span>
  <span class="n">fn</span> <span class="k">func</span><span class="p">(</span><span class="n">md</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">.</span><span class="n">Methods</span><span class="p">()</span><span class="o">.</span><span class="n">Len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="n">md</span> <span class="o">:=</span> <span class="n">sd</span><span class="o">.</span><span class="n">Methods</span><span class="p">()</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">fn</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">&amp;</span><span class="n">md</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 7cacc0b9-5bb4-421c-882d-ab0c110e5abe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*&gt;</span> <span class="n">get_service_method</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">ServiceDescriptor</span> <span class="o">*</span><span class="n">sd</span><span class="p">,</span>
  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">predicate</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">-&gt;</span><span class="n">method_count</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">md</span> <span class="o">=</span> <span class="n">sd</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">predicate</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
      <span class="k">return</span> <span class="n">md</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 39c0e282-a478-49c1-ad47-34c47b00223a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.Descriptors</span><span class="o">;</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span><span class="o">&gt;</span> <span class="nf">getServiceMethod</span><span class="o">(</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">ServiceDescriptor</span> <span class="n">sd</span><span class="o">,</span>
  <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">&gt;</span> <span class="n">predicate</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">.</span><span class="na">getMethods</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span> <span class="n">method</span> <span class="o">=</span> <span class="n">sd</span><span class="o">.</span><span class="na">getMethods</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">predicate</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">method</span><span class="o">))</span>
      <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python a28064ac-f706-41db-a26f-af4c89ddbc4d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="n">predicate</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">method_name</span> <span class="ow">in</span> <span class="n">sd</span><span class="p">.</span><span class="n">methods_by_name</span><span class="p">:</span>
    <span class="n">md</span> <span class="o">=</span> <span class="n">sd</span><span class="p">.</span><span class="n">methods_by_name</span><span class="p">[</span><span class="n">method_name</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">predicate</span><span class="p">(</span><span class="n">md</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">md</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp cb214182-1378-43f3-8d7c-8f6ec609c2e0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span><span class="p">&gt;</span> <span class="nf">GetServiceMethod</span><span class="p">(</span>
  <span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">ServiceDescriptor</span><span class="p">&gt;</span> <span class="n">services</span><span class="p">,</span>
  <span class="n">Func</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">predicate</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="k">from</span> <span class="n">svc</span> <span class="k">in</span> <span class="n">services</span>
     <span class="k">from</span> <span class="n">method</span> <span class="k">in</span> <span class="n">svc</span><span class="p">.</span><span class="n">Methods</span>
     <span class="k">where</span> <span class="nf">predicate</span><span class="p">(</span><span class="n">method</span><span class="p">)</span>
     <span class="k">select</span> <span class="n">method</span><span class="p">;</span>
</code></pre></div></div>
</li></ul>
<h3 id="putting-everything-together">Putting Everything Together</h3>
<p>And finally the idea is to call <code>GetServiceMethod</code> on all the <code>ServiceDescriptor</code>s and with the predicate is true we can call <code>GetOptionValue</code> on the method selected.</p>
<ul class="code-tab-container 30a31acf-0fd7-41ff-9cf1-b8731f9ccae1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '30a31acf-0fd7-41ff-9cf1-b8731f9ccae1', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '30a31acf-0fd7-41ff-9cf1-b8731f9ccae1', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '30a31acf-0fd7-41ff-9cf1-b8731f9ccae1', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '30a31acf-0fd7-41ff-9cf1-b8731f9ccae1', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '30a31acf-0fd7-41ff-9cf1-b8731f9ccae1', 4)">main.cs</a></li></ul><ul class="code-tab-switcher 30a31acf-0fd7-41ff-9cf1-b8731f9ccae1"><li class="code_switcher_container_parent active-tab code_switcher_go e98b2afb-0876-485a-b448-08306a0d9921"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">getMethodOptionValue</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span>
  <span class="n">sd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ServiceDescriptor</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">value</span> <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="no">nil</span>

  <span class="n">getServiceMethod</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">md</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="n">opts</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">md</span><span class="o">.</span><span class="n">Options</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">MethodOptions</span><span class="p">)</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">false</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tmp</span> <span class="o">:=</span> <span class="n">getOptionValue</span><span class="p">[</span><span class="n">T</span><span class="p">](</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span> <span class="n">tmp</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">tmp</span>
      <span class="k">return</span> <span class="no">true</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">false</span>
  <span class="p">})</span>

  <span class="k">return</span> <span class="n">value</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">getMethodExtension</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span>
  <span class="n">fd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">FileDescriptor</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fd</span><span class="o">.</span><span class="n">Services</span><span class="p">()</span><span class="o">.</span><span class="n">Len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="n">sd</span> <span class="o">:=</span> <span class="n">fd</span><span class="o">.</span><span class="n">Services</span><span class="p">()</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">:=</span> <span class="n">getMethodOptionValue</span><span class="p">[</span><span class="n">T</span><span class="p">](</span><span class="n">sd</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span> <span class="n">value</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">value</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 7704d635-c8e0-428b-ab6a-5571aad06e51"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">U</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">get_method_option_value</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">ServiceDescriptor</span> <span class="o">*</span><span class="n">sd</span><span class="p">,</span> <span class="c1">// in C++ we can access the ServiceDescriptor directly</span>
  <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">id</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">;</span>

  <span class="n">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">id</span><span class="p">](</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*</span><span class="n">md</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">opts</span> <span class="o">=</span> <span class="n">md</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">get_option_value</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">))</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">value</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 5a43ee07-28bc-41c2-b5ec-7b7a88cff394"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getMethodExtension</span><span class="o">(</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span>
  <span class="nc">GeneratedMessage</span><span class="o">.</span><span class="na">GeneratedExtension</span><span class="o">&lt;</span><span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">id</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fd</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Descriptors</span><span class="o">.</span><span class="na">ServiceDescriptor</span> <span class="n">sd</span> <span class="o">=</span> <span class="n">fd</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">world</span> <span class="o">=</span> <span class="n">getMethodOptionValue</span><span class="o">(</span><span class="n">sd</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">hello</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">world</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
      <span class="k">return</span> <span class="n">world</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 2690e951-b15e-497d-89a4-9a22f7d003f8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_method_option_value</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="n">md</span> <span class="o">=</span> <span class="n">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">md</span><span class="p">:</span> <span class="n">get_option_value</span><span class="p">(</span><span class="n">md</span><span class="p">.</span><span class="n">GetOptions</span><span class="p">(),</span> <span class="nb">id</span><span class="p">)</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">get_option_value</span><span class="p">(</span><span class="n">md</span><span class="p">.</span><span class="n">GetOptions</span><span class="p">(),</span> <span class="nb">id</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_method_extension</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">svc_name</span> <span class="ow">in</span> <span class="n">fd</span><span class="p">.</span><span class="n">services_by_name</span><span class="p">:</span>
    <span class="n">sd</span> <span class="o">=</span> <span class="n">fd</span><span class="p">.</span><span class="n">services_by_name</span><span class="p">[</span><span class="n">svc_name</span><span class="p">]</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">get_method_option_value</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 21747471-d8fc-484c-9f55-da35a20c7452"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">private</span> <span class="n">T</span> <span class="n">GetMethodOptionValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
  <span class="k">this</span> <span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">FileDescriptor</span> <span class="n">fd</span><span class="p">,</span>
  <span class="n">pb</span><span class="p">::</span><span class="n">Extension</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodOptions</span><span class="p">,</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">id</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="n">fd</span><span class="p">.</span><span class="n">Services</span>
       <span class="p">.</span><span class="nf">GetServiceMethod</span><span class="p">(</span><span class="n">md</span> <span class="p">=&gt;</span> <span class="n">md</span><span class="p">.</span><span class="nf">GetOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
       <span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">()</span>
       <span class="p">.</span><span class="nf">GetOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</code></pre></div></div>
</li></ul>
<h3 id="usage">Usage</h3>
<p>Let's see how to use that in our main function.</p>
<ul class="code-tab-container b5c078c7-0c3b-45a4-b92d-66324cdbdef3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b5c078c7-0c3b-45a4-b92d-66324cdbdef3', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'b5c078c7-0c3b-45a4-b92d-66324cdbdef3', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'b5c078c7-0c3b-45a4-b92d-66324cdbdef3', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'b5c078c7-0c3b-45a4-b92d-66324cdbdef3', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'b5c078c7-0c3b-45a4-b92d-66324cdbdef3', 4)">main.cs</a></li></ul><ul class="code-tab-switcher b5c078c7-0c3b-45a4-b92d-66324cdbdef3"><li class="code_switcher_container_parent active-tab code_switcher_go 61c3e8e5-d6bd-4391-b45e-39364f3030f9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">// pb.File_proto_world_proto is the generated FileDescriptor</span>
  <span class="c">// and pb.E_Hello the generated custom option</span>
  <span class="n">world</span> <span class="o">:=</span> <span class="n">getMethodExtension</span><span class="p">[</span><span class="kt">string</span><span class="p">](</span><span class="n">pb</span><span class="o">.</span><span class="n">File_proto_world_proto</span><span class="p">,</span> <span class="n">pb</span><span class="o">.</span><span class="n">E_Hello</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">world</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">world</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 95f68fc8-1ba5-436c-8d68-1b002ec10dba"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// HelloWorldService is the generated service</span>
  <span class="k">auto</span> <span class="n">sd</span> <span class="o">=</span> <span class="n">HelloWorldService</span><span class="o">::</span><span class="n">descriptor</span><span class="p">();</span>
  <span class="c1">// hello is the generated custom option</span>
  <span class="k">auto</span> <span class="n">world</span> <span class="o">=</span> <span class="n">get_method_option_value</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="n">hello</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">world</span><span class="p">)</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">world</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java d1ba66d6-264c-4e25-9bc8-be801602c0f3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// World is the FileDescriptor for the file world.proto</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">FileDescriptor</span> <span class="n">fd</span> <span class="o">=</span> <span class="nc">World</span><span class="o">.</span><span class="na">getDescriptor</span><span class="o">();</span>
  <span class="c1">// Hello.hello is the generated custom option</span>
  <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">world</span> <span class="o">=</span> <span class="n">getMethodExtension</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">hello</span><span class="o">);</span>

  <span class="n">world</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">w</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">w</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python c23b5e60-bbaf-430c-8726-ebedd318b559"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">proto.world_pb2</span> <span class="kn">import</span> <span class="n">DESCRIPTOR</span> <span class="c1"># FileDescriptor for world.proto
</span>
<span class="k">print</span><span class="p">(</span><span class="n">get_method_extension</span><span class="p">(</span><span class="n">DESCRIPTOR</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp e58a206b-f20c-4545-88ae-3f40d62f42d6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">public</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// HelloExtensions.Hello is the generated custom option</span>
  <span class="kt">var</span> <span class="n">id</span> <span class="p">=</span> <span class="n">HelloExtensions</span><span class="p">.</span><span class="n">Hello</span><span class="p">;</span>
  <span class="c1">// WorldReflection.Descriptor is the FileDescriptor for the file world.proto</span>
  <span class="kt">string</span> <span class="n">world</span> <span class="p">=</span> <span class="n">WorldReflection</span><span class="p">.</span><span class="n">Descriptor</span><span class="p">.</span><span class="nf">GetMethodOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">world</span><span class="p">.</span><span class="n">Length</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">world</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="back-to-the-problem">Back to the Problem</h2>
<p>Now, as I mentioned I was trying to detect which routes need authentication with the help of such a custom option. It is not that hard to imagine the code we saw in the previous section work for an extension like the following:</p>
<div class="code_switcher_container_parent a35fdaed-c9fb-4745-a301-c6564e141e78"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="na">is_authenticated</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Then, we can use it like so:</p>
<div class="code_switcher_container_parent 6d2e142e-8322-4d29-83be-1b0e38d74061"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">CheckoutService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">Checkout</span> <span class="p">(</span><span class="n">CheckoutRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">CheckoutResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">is_authenticated</span><span class="p">)</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>And with that we can get the value from the code we wrote earlier. We just need to be requesting the methods with Option having the id &quot;is_authenticated&quot; and make sure that we are asking for a boolean instead of a string.</p>
<h2 id="conclusion">Conclusion</h2>
<p>While this is a little bit hard to work directly with the Protobuf library, automating simple tasks like checking which routes need authentication save a lot of effort. I hope that you will find this content interesting and that you will share some of the extensions that you wrote.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protobuf" /><summary type="html"><![CDATA[Recently I had to design authentication for a Blazor Application. After finishing implementing, I soon faced the need to know which RPC endpoint needs authentication and which doesn't. And while part of the problem is a solved one, I still needed a mechanism to let me define this. Let's see how.]]></summary></entry><entry><title type="html">Parse go module files</title><link href="https://clement-jean.github.io/parse_go_module_files/" rel="alternate" type="text/html" title="Parse go module files" /><published>2023-03-30T00:00:00+08:00</published><updated>2023-03-30T00:00:00+08:00</updated><id>https://clement-jean.github.io/parse_go_module_files</id><content type="html" xml:base="https://clement-jean.github.io/parse_go_module_files/"><![CDATA[<p>Did you ever need to know, inside your program, on which go version you are running? That's what we are going to solve today. The most common use case for this is logging. We want to be able to debug by reproducing the environment of where the binary is running as close as possible. This starts by knowing which version of go we are using.</p>
<h1 id="setup">Setup</h1>
<p>To get started doing that, we will need a go module. Let's create that:</p>
<div class="code_switcher_container_parent 4c777ce7-cc2e-478e-87c1-21bae9c601a8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go mod init test.com
</code></pre></div></div>
</div>
<p>We should now have a go.mod file in our folder. If you inspect this file, we can get the go version which will be used for compiling the project. It looks like this:</p>
<ul class="code-tab-container 76433760-39fe-423c-ab27-d0a2ea36c6ad"><li class="active-tab code_switcher_text"><a onclick="selectTab('code_switcher_text', '76433760-39fe-423c-ab27-d0a2ea36c6ad', 0)">go.mod</a></li></ul><ul class="code-tab-switcher 76433760-39fe-423c-ab27-d0a2ea36c6ad"><li class="code_switcher_container_parent active-tab code_switcher_text fc7eed8f-b4ae-48a1-8778-fd0064df8473"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module test.com

go 1.20
</code></pre></div></div>
</li></ul>
<p>That's pretty much it. We will use this file to get the info we want.</p>
<h1 id="go-command">Go Command</h1>
<p>One thing that I learned recently is that we can actually get a JSON representation of or modules, workspaces, ... via the command line. To do that, we can run the following command:</p>
<div class="code_switcher_container_parent 36bf8c24-caf8-4f4c-bf88-c89906eebe6c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go mod edit <span class="nt">-json</span>
<span class="o">{</span>
  <span class="s2">"Module"</span>: <span class="o">{</span>
    <span class="s2">"Path"</span>: <span class="s2">"test.com"</span>
  <span class="o">}</span>,
  <span class="s2">"Go"</span>: <span class="s2">"1.20"</span>,
  <span class="s2">"Require"</span>: null,
  <span class="s2">"Exclude"</span>: null,
  <span class="s2">"Replace"</span>: null,
  <span class="s2">"Retract"</span>: null
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>And we have our JSON!</p>
<h1 id="parsing-json">Parsing JSON</h1>
<p>The only thing left to do is execute this command in our main, Unmarshal the JSON result and we should be able to get the version.</p>
<p>First, let's define the structs into which we will Unmarshal to.</p>
<ul class="code-tab-container b02814f3-8d7c-49a3-b19d-1bd09650f825"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b02814f3-8d7c-49a3-b19d-1bd09650f825', 0)">main.go</a></li></ul><ul class="code-tab-switcher b02814f3-8d7c-49a3-b19d-1bd09650f825"><li class="code_switcher_container_parent active-tab code_switcher_go 630572c6-118c-44e3-a91b-dd63e4c09b1d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Module</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Path</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">GoMod</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Module</span> <span class="n">Module</span>
  <span class="n">Go</span>     <span class="kt">string</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Notice here that I'm not taking Require, Exclude, ... into account. We only want the Go string.</p>
<p>After that, the rest is pretty easy. We can execute a command line and get its stdout result like so:</p>
<div class="code_switcher_container_parent f42393d4-6662-4e40-9e4a-72e7bbdec208"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"mod"</span><span class="p">,</span> <span class="s">"edit"</span><span class="p">,</span> <span class="s">"-json"</span><span class="p">)</span><span class="o">.</span><span class="n">Output</span><span class="p">()</span>
</code></pre></div></div>
</div>
<p>I'm skipping the err handling here by dropping the error with _ but make sure to handle this for production-grade scripts.</p>
<p>And finally, we use <code>json.Unmarshal</code> function which takes the ouput of the command line, and the destination of where we want to populate the data. In our case, this is an instance of GoMod.</p>
<p>In the end, the main function looks like:</p>
<ul class="code-tab-container 54181d5a-0d89-44dc-89b1-46784a6b6e23"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '54181d5a-0d89-44dc-89b1-46784a6b6e23', 0)">main.go</a></li></ul><ul class="code-tab-switcher 54181d5a-0d89-44dc-89b1-46784a6b6e23"><li class="code_switcher_container_parent active-tab code_switcher_go 34c2cbd9-10fc-4abc-9a7f-ed74d7d0aeea"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"encoding/json"</span>
  <span class="s">"fmt"</span>
  <span class="s">"os/exec"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Module</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Path</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">GoMod</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Module</span> <span class="n">Module</span>
  <span class="n">Go</span>     <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">mod</span> <span class="n">GoMod</span>
  <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"mod"</span><span class="p">,</span> <span class="s">"edit"</span><span class="p">,</span> <span class="s">"-json"</span><span class="p">)</span><span class="o">.</span><span class="n">Output</span><span class="p">()</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mod</span><span class="p">);</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">mod</span><span class="o">.</span><span class="n">Go</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We can run that, and we get:</p>
<div class="code_switcher_container_parent fc1d6039-36f2-48fc-ac1d-494dc5eb2925"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run main.go
1.20
</code></pre></div></div>
</div>
<p>We now have our Go version at runtime and we can use it for logging, selecting features, ...</p>
<h1 id="the-problem">The Problem</h1>
<p>Obviously, what we saw is far from great. What if we compile our go project to binary and the go.mod is not around anymore. Well, basically it doesn't work.</p>
<p>I'm presenting to you this idea because combined with the right tool to build your project, you can actually embed the version inside your binary. This can be done with ldflags (check <a href="https://blog.alexellis.io/inject-build-time-vars-golang/">Alex Ellis blog post</a> on the subject). But this can also be done with Bazel and <a href="https://bazel.build/docs/user-manual#workspace-status">stamping</a>. If you are interested in knowing how to do that, let me know.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In this short post, we saw how to get the go version on which a go project is compiled at runtime. This can be used in multiple ways, but the use case that has come to me is mostly logging. I hope this is interesting for you.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><summary type="html"><![CDATA[Did you ever need to know, inside your program, on which go version you are running? That's what we are going to solve today. The most common use case for this is logging. We want to be able to debug by reproducing the environment of where the binary is running as close as possible. This starts by knowing which version of go we are using.]]></summary></entry><entry><title type="html">Go Monorepos - Intro</title><link href="https://clement-jean.github.io/go-monorepos-intro/" rel="alternate" type="text/html" title="Go Monorepos - Intro" /><published>2023-03-16T00:00:00+08:00</published><updated>2023-03-16T00:00:00+08:00</updated><id>https://clement-jean.github.io/go-monorepos-intro</id><content type="html" xml:base="https://clement-jean.github.io/go-monorepos-intro/"><![CDATA[<p>Recently I've discovered two interesting was in creating monorepos for go projects. In this article we are going to talk about the advantages and disadvantages of each of these techniques.</p>
<p>This article is an introduction. I will skip over details here because the setup is generally dependent on the technologies you use. <strong>If this article makes you want to know more about the subject, I invite you to tell me with which technology I should set a monorepo for (e.g. gRPC)</strong>.</p>
<h1 id="go-workspaces">Go Workspaces</h1>
<p>The first of these techniques are using Go workspaces. This is nice to be able to do that without any other technology than Go. The goal here is basically to create submodules and link them to the workspace. Let's see an example.</p>
<p>Let's say that we have a server and a client. We will then have the following file architecture:</p>
<div class="code_switcher_container_parent 7017d586-c2e8-4b7e-bebe-57d565b689d7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>.
├── client
└── server
</code></pre></div>
<p>with that we can start initializing our modules. You can either go into each folder and run <code>go mod init &lt;module_name&gt;</code>, or you can automatize the process and run something like:</p>
<ul class="code-tab-container 2c4a3744-1529-4893-a5df-1c4a8af7f978"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '2c4a3744-1529-4893-a5df-1c4a8af7f978', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '2c4a3744-1529-4893-a5df-1c4a8af7f978', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 2c4a3744-1529-4893-a5df-1c4a8af7f978"><li class="code_switcher_container_parent active-tab code_switcher_shell 95639c94-b648-407b-ba58-dc6dc2f23d5f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d <span class="nt">-not</span> <span class="nt">-path</span> <span class="nb">.</span> <span class="nt">-execdir</span> sh <span class="nt">-c</span> <span class="s2">"pushd {}; go mod init '&lt;module_name&gt;/{}'; popd"</span> <span class="s2">";"</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell 2883c384-b0ad-4d0b-999b-c5261d9cc340"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-ChildItem <span class="nb">.</span> <span class="nt">-Name</span> <span class="nt">-Directory</span> | ForEach-Object <span class="o">{</span> Push-Location <span class="nv">$_</span><span class="p">;</span> go mod init <span class="s2">"&lt;module_name&gt;/</span><span class="nv">$_</span><span class="s2">"</span> <span class="p">;</span> Pop-Location <span class="o">}</span>
</code></pre></div></div>
</li></ul>
<p>These commands will enter each directory, run <code>go mod init</code>, and get out of the directories. <strong>Be careful though, if you have other folders that you don't want to use as modules, you will have to create more complex commands</strong>.</p>
<p>Once we have this, we can create our workspace. To do that, we simply run:</p>
<div class="code_switcher_container_parent 68c17ed6-7eda-4aeb-8021-5b8bb2df22d8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go work init client server
</code></pre></div></div>
</div>
<p>And that's basically it. Client and Server and individual projects that can have their own set of dependencies and you can run each of them at the root folder by running:</p>
<div class="code_switcher_container_parent f9653efc-1538-45a2-95b5-c0b3adfb9cee"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run ./server
</code></pre></div></div>
</div>
<p>and</p>
<div class="code_switcher_container_parent dabcf6d4-6939-4f8a-a423-ab4af9ea6884"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run ./client
</code></pre></div></div>
</div>
<h2 id="advantages">Advantages</h2>
<ul>
<li>This is pretty low-tech. We only need Go.</li>
<li>Pretty quick setup for new projects.</li>
<li>Each of the module can get their own dependencies and they can also share some.</li>
</ul>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>All the subprojects need to be written in Go for it to work as intended.</li>
<li>Setup for already existing and complex projects might be hard.</li>
</ul>
<h1 id="bazel">Bazel</h1>
<p>Because setting up a project in Bazel is highly dependent on which technology you want to use, I will not go into to much details here. But the idea with Bazel is that we can have the same kind of monorepo as we saw but we can do this is multi-languages.</p>
<p>If we have a client written in JS and a backend written in Go, we will have a BUILD.bazel file for each subprojects defining how to build each part of the projects. And at the root level we will have a WORKSPACE.bazel file which describes all the build dependencies.</p>
<p>Finally, if you are working with Go modules, <a href="https://github.com/bazelbuild/bazel-gazelle">Gazelle</a> (a BUILD.bazel file generator) can help you write all the build boilerplate for you and let you focus on your code.</p>
<h2 id="advantages-1">Advantages</h2>
<ul>
<li>Once it is set up, it is very efficient to run commands.</li>
<li>Multi-language monorepos.</li>
<li>Setup for already existing and complex projects is easier with Gazelle. Note that this is only for Go.</li>
</ul>
<h2 id="disadvantages-1">Disadvantages</h2>
<ul>
<li>Harder upfront cost for setup.</li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we got an overview of two ways of building monorepos in Go or in multi-language setups. We saw that when we have a newer project we can use Go Workspaces as this is a low-tech way of starting building a monorepo. However, if we decide to have a multi-language setup we will have to move to Bazel. <strong>There are obviously more choices to be made depending on the kind of project you are making and that's why I want your feedback on what I should build</strong>.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="Bazel" /><summary type="html"><![CDATA[Recently I've discovered two interesting was in creating monorepos for go projects. In this article we are going to talk about the advantages and disadvantages of each of these techniques.]]></summary></entry><entry><title type="html">Protein: Parser (Part 1)</title><link href="https://clement-jean.github.io/protein_parser_part_1/" rel="alternate" type="text/html" title="Protein: Parser (Part 1)" /><published>2023-03-09T00:00:00+08:00</published><updated>2023-03-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_parser_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_parser_part_1/"><![CDATA[<p>In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!</p>
<h2 id="boilerplate">Boilerplate</h2>
<p>As always, we need to think a little bit before to actually write the features themselves. The first thing that we can do to get us started is to write the Parser interface.</p>
<ul class="code-tab-container dc02069b-6181-4af6-8a16-e2e3952fbd58"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'dc02069b-6181-4af6-8a16-e2e3952fbd58', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher dc02069b-6181-4af6-8a16-e2e3952fbd58"><li class="code_switcher_container_parent active-tab code_switcher_go 020b7736-b41d-47fb-b915-88d656a2208b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns ???</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="err">???</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This doesn't seem like a fancy interface but we do have a problem. What is our parser returning when finished? Well, it should return an AST, right? But how do we represent this AST. It turns out, we have two good possibilities:</p>
<ul>
<li>We roll our own serializable AST where each object is a Protobuf Message.</li>
<li>We use the descriptor.proto file which defines Messages for describing elements in a Protobuf file.</li>
</ul>
<p>Both have pros and cons. If we go with the first one we have more control over our serialization. It means that we can optimize some elements' serialized data. However, it also means that we are not compatible with the official way and that's not good.
For the &quot;using the official serialization&quot;, I think you get the idea. We have the pros being the cons of the other implementation, and the cons being the pros of the other implementation.</p>
<p>In the end, for the sake of compatibility, I will be sacrificing some performance. However, these performances are only saving a few bytes and having compatibility with programs serialized by protoc far overweights them.</p>
<h3 id="depending-on-protobuf">Depending on Protobuf</h3>
<p>To use the descriptor, we are going to depend on Protobuf's library. To do that we are going to add in our dependency:</p>
<div class="code_switcher_container_parent 30c4b231-6278-4ccd-a9ac-0048a74fb534"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go get google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>This will let us access <code>descriptorpb</code> package, which contains the <code>FileDescriptorProto</code> struct. If you look at the definition of that struct, you will see the following comment:</p>
<div class="code_switcher_container_parent 0d177129-60e7-43d3-9036-b7a0b87280a5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Describes a complete .proto file.</span>
<span class="k">type</span> <span class="n">FileDescriptorProto</span> <span class="k">struct</span>
</code></pre></div></div>
</div>
<p>That's exactly what we are trying to do.</p>
<h3 id="back-to-interface">Back to interface</h3>
<p>With that dependency on Protobuf, we can now finish our interface:</p>
<ul class="code-tab-container ec87acd4-9c9b-468b-9598-113850b7bd0f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ec87acd4-9c9b-468b-9598-113850b7bd0f', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher ec87acd4-9c9b-468b-9598-113850b7bd0f"><li class="code_switcher_container_parent active-tab code_switcher_go e8611a6b-348b-45bd-b1f2-f53f0ba2caa5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns the representation of a file in Protobuf Descriptor</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementation">Implementation</h2>
<p>Let's now implement the interface. But by now you know the drill. We are going to create a minimal implementation so that our first test fails. So what we need is an <code>Impl</code> struct and we need to implement <code>Parser</code> by writing the <code>Parse</code> function.</p>
<p>For now, the <code>Parse</code> function will simply return an empty <code>FileDescriptorProto</code>.</p>
<ul class="code-tab-container b5847f50-c075-4116-af12-2cc305b7d3ed"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b5847f50-c075-4116-af12-2cc305b7d3ed', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher b5847f50-c075-4116-af12-2cc305b7d3ed"><li class="code_switcher_container_parent active-tab code_switcher_go 30bb3370-7d86-4fc3-aa87-59f2df72e0dd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="c">// Impl is the implementation for the Parser interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
<span class="p">}</span>

<span class="c">// New creates a new instance of the Parser</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>

<span class="c">// Parse populates a FileDescriptorProto</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>
  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="first-test">First test</h3>
<p>As our first test we are going to create the test for a syntax statement. This test will take advantage of the fact that <code>Lexer</code> is an interface by creating a <code>FakeLexer</code>. This fake lexer will simply iterate over an array of tokens and return them one by one.</p>
<ul class="code-tab-container 52fe1139-a357-4145-b740-7134581f7785"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '52fe1139-a357-4145-b740-7134581f7785', 0)">parser/parser_test.go</a></li></ul><ul class="code-tab-switcher 52fe1139-a357-4145-b740-7134581f7785"><li class="code_switcher_container_parent active-tab code_switcher_go 3bb7116b-4352-415f-b398-b7a22ee9ea51"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">FakeLexer</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">i</span>      <span class="kt">int</span>
  <span class="n">tokens</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">FakeLexer</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}}</span>
  <span class="p">}</span>

  <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="o">++</span>
  <span class="k">return</span> <span class="n">token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This basically means that each time we are running a test in the parser, we are not going to run the lexer code. We are going to simply focus on our current features. So, if we encounter a bug, it means that it is in the parser, not anywhere else.</p>
<p>With that, we can write our first test for <code>syntax = &quot;proto3&quot;;</code>.</p>
<ul class="code-tab-container 0aaff72f-5cf4-4fea-86b5-8dbfe104c74a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '0aaff72f-5cf4-4fea-86b5-8dbfe104c74a', 0)">parser/parser_syntax_test.go</a></li></ul><ul class="code-tab-switcher 0aaff72f-5cf4-4fea-86b5-8dbfe104c74a"><li class="code_switcher_container_parent active-tab code_switcher_go d81dc000-df1e-4733-9065-c7c72b563d74"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseSyntaxProto3</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"syntax"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"="</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">proto3</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"proto3"</span>

  <span class="k">if</span> <span class="n">syntax</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetSyntax</span><span class="p">();</span> <span class="n">syntax</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"syntax wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">syntax</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent 5a4bb54b-68e6-4370-8e68-a96b16af77d5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseSyntaxProto3 <span class="o">(</span>0.00s<span class="o">)</span>
    parser_syntax_test.go:22: syntax wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'proto3'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<h3 id="parsing">Parsing</h3>
<p>We should now improve the <code>Parse</code> function to consume the <code>Lexer</code>'s tokens and do things with that. Here is the pseudo code:</p>
<div class="code_switcher_container_parent fe463b6a-9465-4caa-b379-26aabeef1ce4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">Identifier</span> <span class="p">{</span>
    <span class="n">fn</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span> <span class="c">// find the function depending on keyword</span>
    <span class="n">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">descriptor</span><span class="p">)</span> <span class="c">// populate the descriptor</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>You notice that we need a <code>currToken</code> representing the current token being parsed. We will also need the peek token for parsing syntax and other statements. This is because we are going to make sure each time that the peek token is correct, otherwise we will return an error. So <code>Impl</code> now has a <code>currToken</code> and <code>peekToken</code>:</p>
<ul class="code-tab-container 63735155-3f4c-4781-b080-7f0e1f514ddf"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '63735155-3f4c-4781-b080-7f0e1f514ddf', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 63735155-3f4c-4781-b080-7f0e1f514ddf"><li class="code_switcher_container_parent active-tab code_switcher_go 411d50d3-c428-4364-80d0-239fb437a4ce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
  <span class="n">curToken</span>  <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
  <span class="n">peekToken</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now, we need to populate these tokens before being able to use them. The first time we need to initialize them is in the <code>New</code> function.</p>
<ul class="code-tab-container 5bc48282-9eb2-4a7b-8a76-7a0cecc58ad3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '5bc48282-9eb2-4a7b-8a76-7a0cecc58ad3', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 5bc48282-9eb2-4a7b-8a76-7a0cecc58ad3"><li class="code_switcher_container_parent active-tab code_switcher_go c7d283fc-958c-43cd-944f-b5747f186a12"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But <code>nextToken</code> is not the <code>Lexer.NextToken</code>, this is a private function in <code>Parser</code>. This is a function that looks for the next non-space token.</p>
<ul class="code-tab-container 491f36da-7a60-46e2-9ca6-efa6784d1106"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '491f36da-7a60-46e2-9ca6-efa6784d1106', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 491f36da-7a60-46e2-9ca6-efa6784d1106"><li class="code_switcher_container_parent active-tab code_switcher_go 1a8d6cd0-41f0-46ca-8165-dcd6582cfd19"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">nextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">();</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can start updating our <code>Parse</code> function.</p>
<ul class="code-tab-container e369202d-ccfc-4182-8e25-2e830045fefd"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e369202d-ccfc-4182-8e25-2e830045fefd', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher e369202d-ccfc-4182-8e25-2e830045fefd"><li class="code_switcher_container_parent active-tab code_switcher_go 1d83c1f0-7aad-4a42-8284-f40ca6f7bc63"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="c">//Do something with token</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Finally, we are going to register all the parsing functions that we are gonna write in this and next articles. We are going to have a map mapping &quot;syntax&quot; to parseSyntax, ...</p>
<ul class="code-tab-container 51043743-dc2b-4138-b232-5d7e32802731"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '51043743-dc2b-4138-b232-5d7e32802731', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 51043743-dc2b-4138-b232-5d7e32802731"><li class="code_switcher_container_parent active-tab code_switcher_go 1d1a414d-0842-4283-893f-c3ff2dd9d374"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With this we can finalize the <code>Parse</code> function by looking at the relevant function for the <code>currToken.Literal</code>.</p>
<ul class="code-tab-container 6d7eb3a2-3231-4ea5-94c6-85f676ba6d5e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6d7eb3a2-3231-4ea5-94c6-85f676ba6d5e', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 6d7eb3a2-3231-4ea5-94c6-85f676ba6d5e"><li class="code_switcher_container_parent active-tab code_switcher_go ff4273f6-7bed-411f-aa0f-159d8406fe9d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="n">fn</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span> <span class="c">// keyword not found</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="n">fn</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="parsesyntax">parseSyntax()</h3>
<p>Before actually parsing a syntax statement, we need two helper functions: <code>accept</code> and <code>acceptPeek</code>. <code>acceptPeek</code> will just call <code>accept</code> with the <code>peekToken.Type</code>. <code>accept</code> take a <code>TokenType</code> and checks if it exists in the following variadic arguments.</p>
<ul class="code-tab-container 26cfa0e4-5fcb-4e3e-8abe-3a3b38e87804"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '26cfa0e4-5fcb-4e3e-8abe-3a3b38e87804', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 26cfa0e4-5fcb-4e3e-8abe-3a3b38e87804"><li class="code_switcher_container_parent active-tab code_switcher_go 505fcb31-4033-47a6-89ac-c4fe7f371337"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">original</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">,</span> <span class="n">expected</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">slices</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">original</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// TODO: add error</span>
    <span class="k">return</span> <span class="no">false</span>
  <span class="p">}</span>

  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>

<span class="c">// acceptPeek returns true and advance token</span>
<span class="c">// if tt contains the peekToken.Type</span>
<span class="c">// else it returns false</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptPeek</span><span class="p">(</span><span class="n">tt</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">tt</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now we ready for our <code>parseSyntax</code> function. We are first going to check that we have an <code>=</code> after syntax. Then we check that we have a String, if it’s the case we are going to take the value inside the quotes. And finally, we are going to check that there is a semicolon at the end of the statement.</p>
<ul class="code-tab-container 42f28fdb-19da-4503-b958-c69dba5f96b7"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '42f28fdb-19da-4503-b958-c69dba5f96b7', 0)">parser/syntax.go</a></li></ul><ul class="code-tab-switcher 42f28fdb-19da-4503-b958-c69dba5f96b7"><li class="code_switcher_container_parent active-tab code_switcher_go 8955598f-4cd3-4675-aced-0b37c9014be0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseSyntax</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The <code>destringify</code> function looks like the following:</p>
<ul class="code-tab-container 6ee64f89-d5f0-41a5-af43-dfb28d2972b2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6ee64f89-d5f0-41a5-af43-dfb28d2972b2', 0)">parser/utils.go</a></li></ul><ul class="code-tab-switcher 6ee64f89-d5f0-41a5-af43-dfb28d2972b2"><li class="code_switcher_container_parent active-tab code_switcher_go 0f8a6465-af7a-49d0-a52b-eebf7bc024c6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="s">"strings"</span>

<span class="k">func</span> <span class="n">destringify</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">TrimFunc</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">r</span> <span class="kt">rune</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As mentioned, it takes the values between the quotes.</p>
<p>With our <code>parseSyntax</code> finished, we can rerun the test and:</p>
<div class="code_switcher_container_parent 113b15f6-39be-434e-97f1-43dbbc92970c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  1.361s
</code></pre></div></div>
</div>
<h3 id="parseimport">parseImport()</h3>
<p><code>parseImport</code> is really similar to <code>parseSyntax</code>. However, with imports, we get introduced to optional keywords. An import can be written in 3 ways:</p>
<ul>
<li><code>import &quot;my.proto&quot;;</code></li>
<li><code>import public &quot;my.proto&quot;;</code></li>
<li><code>import weak &quot;my.proto&quot;;</code></li>
</ul>
<p>Let's write the tests:</p>
<ul class="code-tab-container b979e4ae-0de5-49e1-80df-c974107be3b6"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b979e4ae-0de5-49e1-80df-c974107be3b6', 0)">parser/parser_import_test.go</a></li></ul><ul class="code-tab-switcher b979e4ae-0de5-49e1-80df-c974107be3b6"><li class="code_switcher_container_parent active-tab code_switcher_go d910825e-a7b5-4bb4-84fa-cdeac353920e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePublicImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"public"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParseWeakImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"weak"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent 6892cd5a-6a66-43c3-a9ed-5fbb7f24ee2a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:25: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParsePublicImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:52: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParseWeakImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:79: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
FAIL
</code></pre></div></div>
</div>
<p>Even though the 2nd and 3rd one are rarely used, we still need to support them. To do so, we are going to need to create an enum called <code>DependencyType</code> which will have the variants: None, Public, and Weak. After that, we are going to check if we have an identifier and depending on the <code>Literal</code>, we are going to return the type.</p>
<ul class="code-tab-container 45ffc8e8-5f32-456f-af24-d0c59a14e12f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '45ffc8e8-5f32-456f-af24-d0c59a14e12f', 0)">parser/import.go</a></li></ul><ul class="code-tab-switcher 45ffc8e8-5f32-456f-af24-d0c59a14e12f"><li class="code_switcher_container_parent active-tab code_switcher_go 01025676-592d-4152-9ed6-5ebecc0708d3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"fmt"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">DependencyType</span> <span class="kt">int</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">None</span> <span class="n">DependencyType</span> <span class="o">=</span> <span class="no">iota</span>
  <span class="n">Public</span>
  <span class="n">Weak</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseImport</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">DependencyType</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="n">depType</span> <span class="o">:=</span> <span class="n">None</span>

  <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"public"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Public</span>
    <span class="k">case</span> <span class="s">"weak"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Weak</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// TODO: add error</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">depType</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And the last thing we need to do is register that to the <code>parseFuncs</code>.</p>
<ul class="code-tab-container 77972990-5dce-46f3-9cc2-37ee575b6d24"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '77972990-5dce-46f3-9cc2-37ee575b6d24', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 77972990-5dce-46f3-9cc2-37ee575b6d24"><li class="code_switcher_container_parent active-tab code_switcher_go 60072eb9-ab0a-4f6a-8a4c-7ff018e2524f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We basically append the dependency and if we have a public or weak dependency we add its index into <code>PublicDependency</code> and <code>WeakDependency</code> respectively.</p>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent 7987db3a-06b1-40e8-bbcf-99a83b3b137d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.450s
</code></pre></div></div>
</div>
<h3 id="parsepackage">parsePackage()</h3>
<p>Once again this function is pretty similar. The main difference is that we are going to look for identifiers and fully qualified names (identifiers separated by dots).</p>
<p>Let's write some tests.</p>
<ul class="code-tab-container 896c3f99-4cb7-49a7-a44b-484ed5c7e78b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '896c3f99-4cb7-49a7-a44b-484ed5c7e78b', 0)">parser/parser_package_test.go</a></li></ul><ul class="code-tab-switcher 896c3f99-4cb7-49a7-a44b-484ed5c7e78b"><li class="code_switcher_container_parent active-tab code_switcher_go bce8d83e-b718-4f55-9759-60ecc2a7004d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParsePackage</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePackageFullIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"protobuf"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google.protobuf"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Let's fail our tests:</p>
<div class="code_switcher_container_parent 2687e553-7444-4b9f-a6b0-614fd36b77a2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParsePackage <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:21: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
<span class="nt">---</span> FAIL: TestParsePackageFullIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:39: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google.protobuf'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<p>And now we can implement the <code>parsePackage</code> function. We are going to check that we have at least one identifier, and then if we have a dot we are going to make sure that we have another identifier after. Finally, we will be looking for the semicolon.</p>
<ul class="code-tab-container d7cb40a5-c21b-482c-b45c-6f42ef4847ac"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd7cb40a5-c21b-482c-b45c-6f42ef4847ac', 0)">parser/package.go</a></li></ul><ul class="code-tab-switcher d7cb40a5-c21b-482c-b45c-6f42ef4847ac"><li class="code_switcher_container_parent active-tab code_switcher_go bc1ebf79-e637-44ed-80c3-8ce44b7783a5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"strings"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parsePackage</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">var</span> <span class="n">parts</span> <span class="p">[]</span><span class="kt">string</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">nil</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">s</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="s">"."</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The last thing to do is to register this function in our <code>parseFuncs</code>.</p>
<ul class="code-tab-container 553385b5-5b55-4d7f-80de-41bafdc67174"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '553385b5-5b55-4d7f-80de-41bafdc67174', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 553385b5-5b55-4d7f-80de-41bafdc67174"><li class="code_switcher_container_parent active-tab code_switcher_go f0a38ca3-bb65-4d16-8289-49a8661bd685"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"package"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Package</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parsePackage</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and we rerun our tests.</p>
<div class="code_switcher_container_parent 0e0ed697-493f-4e79-8a0f-ff7d08da301c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.847s
</code></pre></div></div>
</div>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we created our first three parsing functions. We parsed syntax, package and imports. We are now ready to go more complicated statements.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <!-- <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Next Article</a>
    </div> -->
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!]]></summary></entry><entry><title type="html">Protein: Lexer (Part 3)</title><link href="https://clement-jean.github.io/protein_lexer_part_3/" rel="alternate" type="text/html" title="Protein: Lexer (Part 3)" /><published>2023-03-03T00:00:00+08:00</published><updated>2023-03-03T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_3</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_3/"><![CDATA[<p>This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.</p>
<h2 id="position-checking">Position Checking</h2>
<p>Adding position checking in our test is pretty trivial since it's 3 ifs checking <code>Offset</code>, <code>Line</code>, and <code>Column</code>. So let's add that:</p>
<ul class="code-tab-container b86e0c13-e834-4270-8646-fbd066d72c3e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b86e0c13-e834-4270-8646-fbd066d72c3e', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher b86e0c13-e834-4270-8646-fbd066d72c3e"><li class="code_switcher_container_parent active-tab code_switcher_go 8ec5f038-de2b-4636-b7c8-4ca3095539b3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="c">//...</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - offset wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - line wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - column wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now if we run our tests, we should have a lot of errors coming from the fact that Go will initialize <code>Offset</code>, <code>Line</code>, and <code>Column</code> to 0 (default value). An example of error received is:</p>
<div class="code_switcher_container_parent 7b6a6dbf-34ba-4069-848a-dd6975f7e675"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:31: tests[0] - line wrong. <span class="nv">expected</span><span class="o">=</span>0, <span class="nv">got</span><span class="o">=</span>1
FAIL
</code></pre></div></div>
</div>
<blockquote>
<p>Before going to the new section, make sure that you update the position objects in your tests. If you are not willing to calculate all of the positions, you can just refer to the <a href="https://github.com/Clement-Jean/protein/blob/lexer/lexer/lexer_test.go">tests in the github repo</a> where I did it for you.</p>
</blockquote>
<h2 id="a-bug-">A bug ?!</h2>
<p>Now that we have all our positions set, we can rerun our tests.</p>
<div class="code_switcher_container_parent 648d6c24-c264-4718-8815-86035b160f43"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:35: tests[1] - column wrong. <span class="nv">expected</span><span class="o">=</span>4, <span class="nv">got</span><span class="o">=</span>0
FAIL
</code></pre></div></div>
</div>
<p>And yes we have an error. Let's understand it.</p>
<p>The problem here comes from the way we handle newlines in the <code>emit</code> function. As of right now, this is done like so:</p>
<ul class="code-tab-container 176bb1bd-0df4-4b9d-ad48-f7e221ed9cd2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '176bb1bd-0df4-4b9d-ad48-f7e221ed9cd2', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 176bb1bd-0df4-4b9d-ad48-f7e221ed9cd2"><li class="code_switcher_container_parent active-tab code_switcher_go 1a0290b8-7ccc-4ca5-a046-9d8a598764f9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This code is checking for a newline inside the literal and if it finds one, it will just set the index of <code>\n</code> in the literal to startLineOffset. The problem here is that we handle all consecutive spaces (the general term) as one token. So when we have <code>\t\n\v\f\r</code>, we are effectively saying that the line starts at the beginning our our space token. This is not correct, right? We should be setting <code>startLineOffset</code> to 2 (just after <code>\n</code>) and then this should affect the <code>Column</code> position because of <code>Column: l.start - l.startLineOffset</code> in the <code>Token</code> instantiation in <code>emit</code>.</p>
<p>So how do we solve that? Well, it turns out to be pretty simple. We are going to look for the last instance of <code>\n</code> in the literal and this will give us the beginning of the line. After that we are going to take the current position (which is after the token right now) and subtract it with the length of the literal minus the beginning of the line. This gives us the offset at which the line begins. So now we should have this:</p>
<ul class="code-tab-container 69c12f83-790d-42d0-b1fd-5f295e2e0943"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '69c12f83-790d-42d0-b1fd-5f295e2e0943', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 69c12f83-790d-42d0-b1fd-5f295e2e0943"><li class="code_switcher_container_parent active-tab code_switcher_go 17af52b1-009d-4903-b236-f1a82645a148"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">lineStart</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">LastIndex</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> <span class="n">lineStart</span> <span class="o">!=</span> <span class="o">-</span><span class="m">1</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span> <span class="o">-</span> <span class="n">lineStart</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Note that we are only finding the last index when the token kind is a space. This is important because if we do that for all the tokens we will have performance hits (especially on large tokens).</p>
<p>And now, if we rerun our test:</p>
<div class="code_switcher_container_parent 8272a600-58d4-45ef-b6f2-776c3d580a94"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.857s
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we made the final test for our lexer and we solved a critical bug for <code>Token</code> positions. We now have a functional lexer and in the next article we are going to start the parser!</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_2" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_parser_part_1" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.]]></summary></entry><entry><title type="html">Protein: Lexer (Part 2)</title><link href="https://clement-jean.github.io/protein_lexer_part_2/" rel="alternate" type="text/html" title="Protein: Lexer (Part 2)" /><published>2023-02-20T00:00:00+08:00</published><updated>2023-02-20T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_2</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_2/"><![CDATA[<p>In this article we are going to delve into the second part of the lexing which is tokenizing more advanced part of the input. More precisely, we are going to lex spaces (whitespaces, new lines, ...), comments, Identifiers, Numbers (Int and Float), and Strings. At the end of this article, we will have a fully functioning lexer that can tokenize the <code>descriptor.proto</code> which is the longest proto file in the protobuf repo. Let's get started.</p>
<blockquote>
<p>Note: While this article is designed in a way that shows the evolution of the Lexer, you might still want to look at <a href="https://github.com/Clement-Jean/protein/commits/lexer">the commits</a> in order to see where any piece of code went.</p>
</blockquote>
<h2 id="spaces">Spaces</h2>
<p>Up until now, we assumed that all the characters that we would encounter were symbols. We are now going to add whitespaces, new lines, ... on top of that. Now, one thing to note here is that in traditional lexer, spaces will be discarded and are not counted as tokens. In our case, since the <a href="https://protobuf.dev/programming-guides/style/">Protobuf Style Guide</a> mentions that we should use an indent of 2 spaces, we are going to need that information. Before doing tokenizing spaces, we are going to need to more helper functions:</p>
<ul>
<li><code>backup</code>: Goes back by one utf8 character.</li>
<li><code>peek</code>: Check the next utf8 character without advancing the reading position.</li>
</ul>
<p><code>peek</code> is very similar to next because we are checking that we are still within the limits of our input and we read the character at <code>lexer.pos</code>. However, because we are just looking ahead and not advancing in the input, we are not going to update the <code>lexer.pos</code>.</p>
<ul class="code-tab-container c95afe05-3b55-4d64-a3cc-147a92d5024e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c95afe05-3b55-4d64-a3cc-147a92d5024e', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher c95afe05-3b55-4d64-a3cc-147a92d5024e"><li class="code_switcher_container_parent active-tab code_switcher_go 7b4e8d88-783b-42f7-8e5c-3bac87052ae6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">peek</span><span class="p">()</span> <span class="kt">rune</span> <span class="p">{</span>
  <span class="k">if</span> <span class="kt">int</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">r</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="o">:</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">r</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and <code>backup</code> is pretty simple. We are going to read the last character before <code>lexer.pos</code> and update the reading position by the size of that utf8 character. Furthermore, since in the <code>next</code> function we added <code>l.line++</code> when we have a new line, we are going to need backing that up too. So we are going to decrease <code>lexer.line</code> when we encounter a newline.</p>
<ul class="code-tab-container bf4eec00-5a84-41a1-b4d6-214adb1caa15"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'bf4eec00-5a84-41a1-b4d6-214adb1caa15', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher bf4eec00-5a84-41a1-b4d6-214adb1caa15"><li class="code_switcher_container_parent active-tab code_switcher_go f05c9fb4-2b61-422c-a0a1-42e5af206ffb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">backup</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">l</span><span class="o">.</span><span class="n">atEOF</span> <span class="o">&amp;&amp;</span> <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">r</span><span class="p">,</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeLastRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="o">:</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">])</span>
    <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">-=</span> <span class="n">w</span>

    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">line</span><span class="o">--</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As always, we want to add a test for our function that is skipping spaces. Now, it is important to understand that we are not only interested of whitespaces. We also want to 'skip' other non-printable characters such as '\t', '\r', '\n', ... For that we are going to use the <code>unicode.IsSpace</code> from the Go standard library. So our test, should contain these different characters.</p>
<ul class="code-tab-container aec40860-52b0-4f6e-bee6-ebeb22e0c21a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'aec40860-52b0-4f6e-bee6-ebeb22e0c21a', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher aec40860-52b0-4f6e-bee6-ebeb22e0c21a"><li class="code_switcher_container_parent active-tab code_switcher_go 1bea75e5-e9be-4bb0-88c5-28c81f7cba26"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">TestNextTokenOnSpace</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"</span><span class="se">\t\n\v\f\r</span><span class="s"> "</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">"</span><span class="se">\t\n\v\f\r</span><span class="s"> "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously, if we run this we will get the following:</p>
<div class="code_switcher_container_parent 800abcaf-62e3-49d0-adaa-15293ff0e162"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Space"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Now that we have our test, <code>backup</code> and <code>peek</code>, we can write our <code>lexSpaces</code> function. This is a function that loops until we find a non-space character as peek and return a Token for that space.</p>
<ul class="code-tab-container 6753ea9b-a9fa-42e5-845f-06ae1432c422"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6753ea9b-a9fa-42e5-845f-06ae1432c422', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 6753ea9b-a9fa-42e5-845f-06ae1432c422"><li class="code_switcher_container_parent active-tab code_switcher_go 201a4d34-e2c3-4295-b937-d7dbd6b8060e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">lexSpaces</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsSpace</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenSpace</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This <code>lexSpaces</code> function will now need to be placed in our <code>lexProto</code> switch in order to be taken into consideration.</p>
<ul class="code-tab-container 7a34102e-63c3-4a14-bbcf-4c8847ddd7a6"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '7a34102e-63c3-4a14-bbcf-4c8847ddd7a6', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 7a34102e-63c3-4a14-bbcf-4c8847ddd7a6"><li class="code_switcher_container_parent active-tab code_switcher_go 94baec58-51bf-4e65-8d0c-515208220a2b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">unicode</span><span class="o">.</span><span class="n">IsSpace</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span> <span class="c">// go back by one character</span>
    <span class="k">return</span> <span class="n">lexSpaces</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and that's basically it! We run our test and we get:</p>
<div class="code_switcher_container_parent 37ffc844-ff47-41d9-bec6-e9256e1c7da5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.235s
</code></pre></div></div>
</div>
<h2 id="comments">Comments</h2>
<p>It turns out that we can lex comments with a similar technique as the one used for spaces. The only difference here is that we have two type of comment:</p>
<ul>
<li>Line comment: Starts with <code>//</code> and finishes at the end of the line.</li>
<li>Multiline comment: Starts with <code>/*</code> and finishes with <code>*/</code>.</li>
</ul>
<h3 id="line-comment">Line comment</h3>
<p>We are going to start with the line comment. This is very similar to <code>lexSpaces</code>. The major difference is that we are going to check for '\n' or EOF for finishing the comment. Finally, we are going to return a Token.</p>
<p>But before all that, let's write two tests. One that checks that we are skipping until '\n' and the other that checks that we are skipping until EOF.</p>
<ul class="code-tab-container 119d04e7-6eef-473d-a43f-3ce9bca1f1e2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '119d04e7-6eef-473d-a43f-3ce9bca1f1e2', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 119d04e7-6eef-473d-a43f-3ce9bca1f1e2"><li class="code_switcher_container_parent active-tab code_switcher_go 9a908f8d-ea52-49d2-9847-63750e1d1584"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">TestNextTokenOnLineCommentWithEOF</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"//this is a comment"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"//this is a comment"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnLineCommentWithNewLine</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"//this is a comment</span><span class="se">\n</span><span class="s">_"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"//this is a comment"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">19</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">19</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">20</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">20</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We fail to pass, once again:</p>
<div class="code_switcher_container_parent 3f8051bb-ec01-4a74-b4ab-5ed54753b776"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnLineCommentWithEOF <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnLineCommentWithNewLine <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Let's now write our function.</p>
<ul class="code-tab-container 0696f62d-3c5b-42b6-b678-7ecec0ba7b41"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '0696f62d-3c5b-42b6-b678-7ecec0ba7b41', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 0696f62d-3c5b-42b6-b678-7ecec0ba7b41"><li class="code_switcher_container_parent active-tab code_switcher_go 0bc3eb9e-517c-4172-9d64-3d601f607eb0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">lexLineComment</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenComment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and run our tests:</p>
<div class="code_switcher_container_parent aab43e7d-5ab6-4f28-919a-411b70b6a405"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.351s
</code></pre></div></div>
</div>
<p>We pass the Line Comment tests, let's go to the multiline comment.</p>
<h3 id="multiline-comment">Multiline Comment</h3>
<p>These comments are again pretty similar, however, like any other object that doesn't end with EOF we can have errors. The main error here is an unterminated comment. As an example, writing something like:</p>
<div class="code_switcher_container_parent 6e8b7f7b-b3c6-4b48-b57a-84d736942bb6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/*</span><span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="n">comment</span>
</code></pre></div></div>
</div>
<p>should result in an error from the lexer.</p>
<p>To handle such errors, we are going to create a function that will basically stop the lexing process by emitting an Error Token and return nil as state.</p>
<ul class="code-tab-container 8b2edf11-8fa2-45c3-86cc-43c18d7fdb38"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8b2edf11-8fa2-45c3-86cc-43c18d7fdb38', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 8b2edf11-8fa2-45c3-86cc-43c18d7fdb38"><li class="code_switcher_container_parent active-tab code_switcher_go 3be95696-4354-4541-8c3d-80839d5591ec"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">errorf</span><span class="p">(</span><span class="n">format</span> <span class="kt">string</span><span class="p">,</span> <span class="n">args</span> <span class="o">...</span><span class="n">any</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">l</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="o">...</span><span class="p">),</span> <span class="n">Position</span><span class="p">{</span>
    <span class="n">Offset</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="p">,</span>
    <span class="n">Line</span><span class="o">:</span>   <span class="n">l</span><span class="o">.</span><span class="n">startLine</span><span class="p">,</span>
    <span class="n">Column</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span><span class="p">,</span>
  <span class="p">}}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="m">0</span>
  <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="m">0</span>
  <span class="n">l</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="o">:</span><span class="m">0</span><span class="p">]</span>
  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This is similar to what we did in emit, the only difference is that here the literal of a token is the error message and we reset the state of our lexer.</p>
<p>Now that we know the requirements for our lexer concerning comments, we can write some tests. Before that, though, as a matter of convenience, we are going to define constants for our error messages. This is done to avoid typos when writing tests:</p>
<ul class="code-tab-container 9b344904-36fc-4f87-ae2a-7e3e17f507ed"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '9b344904-36fc-4f87-ae2a-7e3e17f507ed', 0)">lexer/errors.go</a></li></ul><ul class="code-tab-switcher 9b344904-36fc-4f87-ae2a-7e3e17f507ed"><li class="code_switcher_container_parent active-tab code_switcher_go 88fc8d34-262d-42eb-9501-d6e93189bc66"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">errorUnterminatedMultilineComment</span> <span class="o">=</span> <span class="s">"unterminated multiline comment"</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>and once this is done we can now have our tests:</p>
<ul class="code-tab-container 712a2b1d-b9e6-4a8a-a3fa-64bbee88dd24"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '712a2b1d-b9e6-4a8a-a3fa-64bbee88dd24', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 712a2b1d-b9e6-4a8a-a3fa-64bbee88dd24"><li class="code_switcher_container_parent active-tab code_switcher_go f1bbbf81-e402-44a7-bf9d-181b2a277b8f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnMultilineComment</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"/*this is a comment*/_"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"/*this is a comment*/"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">22</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">22</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnUnterminatedMultilineComment</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"/*this is a comment"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedMultilineComment</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>we run:</p>
<div class="code_switcher_container_parent 4bf72c90-4333-4203-8906-b99f05589282"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnMultilineComment <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnUnterminatedMultilineComment <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>and we fail (we are used to it).</p>
<p><code>lexMultilineComment</code> is a little bit longer than the other functions we wrote for lexing. This is mostly due to the fact that we are checking for unterminated comment but also because we need to check that the current character is '/' and that the previous character was '*'. So we keep a reference to the previous character and check that for stopping the reading loop.</p>
<ul class="code-tab-container 6eaa02af-38f6-4465-8141-1fd8e85e8db6"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6eaa02af-38f6-4465-8141-1fd8e85e8db6', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 6eaa02af-38f6-4465-8141-1fd8e85e8db6"><li class="code_switcher_container_parent active-tab code_switcher_go 15fcffe0-3c26-4f2e-9e3a-dd7d2440417c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexMultilineComment</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">p</span> <span class="kt">rune</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">r</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">errorf</span><span class="p">(</span><span class="n">errorUnterminatedMultilineComment</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">p</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenComment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Once again this is very similar to <code>lexSpaces</code> and <code>lexLineComment</code>, isn't it?</p>
<p>Let's now place that in our <code>lexProto</code> function:</p>
<ul class="code-tab-container c47bc1ef-1e79-4708-8a7d-02981d4b9614"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c47bc1ef-1e79-4708-8a7d-02981d4b9614', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher c47bc1ef-1e79-4708-8a7d-02981d4b9614"><li class="code_switcher_container_parent active-tab code_switcher_go f8081ea1-2071-4d12-b0a0-1acdfca7c8cb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="o">&amp;&amp;</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">==</span> <span class="sc">'*'</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexMultilineComment</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and our tests?</p>
<div class="code_switcher_container_parent ae5e2b29-ff3b-4ec5-8546-5f37cb442356"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.741s
</code></pre></div></div>
</div>
<h2 id="identifiers">Identifiers</h2>
<p>For identifiers, we need a way to keep going while we have a letter (capitalized or not), a number or an underscore. We are going to create a function called <code>acceptWhile</code> that does just that. We want to pass the set of possible characters to it and while the set contains the current value it will advance. Once we are done, we are going to use <code>backup</code> to make sure that the <code>lexer.pos</code> is just after the last character of the identifier.</p>
<p>Before we do that, though, it's testing time. We simply want to test that when we pass some text starting with a letter, <code>lexProto</code> will create an Identifier token.</p>
<ul class="code-tab-container 4de53ed9-2380-49f9-a574-f7c48dddcc74"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4de53ed9-2380-49f9-a574-f7c48dddcc74', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 4de53ed9-2380-49f9-a574-f7c48dddcc74"><li class="code_switcher_container_parent active-tab code_switcher_go 381b24dc-3f77-4311-8562-bf5678052a12"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"hello_world2023 HelloWorld2023"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="s">"hello_world2023"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="s">"HelloWorld2023"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We obviously fail the test:</p>
<div class="code_switcher_container_parent 903d7051-8f13-4840-8656-8e3f52ba7d9e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Identifier"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>and now we can start our <code>acceptWhile</code> function:</p>
<ul class="code-tab-container 6ccb6916-366e-4a26-8931-972aa200223f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6ccb6916-366e-4a26-8931-972aa200223f', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 6ccb6916-366e-4a26-8931-972aa200223f"><li class="code_switcher_container_parent active-tab code_switcher_go de966551-2e88-4e2c-8e80-ed0a72e9d5b2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptWhile</span><span class="p">(</span><span class="n">valid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">strings</span><span class="o">.</span><span class="n">ContainsRune</span><span class="p">(</span><span class="n">valid</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That's it. Nothing more! A few lines of code and we can now simply write our <code>lexIdentifier</code>.</p>
<ul class="code-tab-container 09a54871-3c23-4286-9d66-8acaed57a09f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '09a54871-3c23-4286-9d66-8acaed57a09f', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 09a54871-3c23-4286-9d66-8acaed57a09f"><li class="code_switcher_container_parent active-tab code_switcher_go 079d127a-df00-46b1-bf6f-98fb85822457"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexIdentifier</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenIdentifier</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and add that to the <code>lexProto</code>:</p>
<ul class="code-tab-container eaa1ff2a-5392-4ab4-975e-59b8b0431792"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'eaa1ff2a-5392-4ab4-975e-59b8b0431792', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher eaa1ff2a-5392-4ab4-975e-59b8b0431792"><li class="code_switcher_container_parent active-tab code_switcher_go 78adc546-96a3-4304-9e8a-025f862f61c5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexIdentifier</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent d0510dc5-f949-48b8-8c33-25059b28217c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.767s
</code></pre></div></div>
</div>
<h2 id="strings">Strings</h2>
<p>Before going the numbers, let's continue with something easy. Lexing strings is similar to what we did with multiline comments. We have a beginning and an end delimited by a certain character. In Protobuf, for strings, we can use single and double quotes. However, we cannot match a double quote with a single one. This means that having something like:</p>
<div class="code_switcher_container_parent 7c8200e5-e823-4be0-8512-7f46d96b4b0b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"test'
</span></code></pre></div></div>
</div>
<p>will result in a unterminated string.</p>
<p>Now that we know the requirements, let's write out tests.</p>
<ul class="code-tab-container 1f543f8f-bc24-4329-a9d5-8730272f9eee"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1f543f8f-bc24-4329-a9d5-8730272f9eee', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 1f543f8f-bc24-4329-a9d5-8730272f9eee"><li class="code_switcher_container_parent active-tab code_switcher_go 69ffc7b3-b989-45e9-b571-076380a419cb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"'test' </span><span class="se">\"</span><span class="s">test</span><span class="se">\"</span><span class="s">"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenStr</span><span class="p">,</span> <span class="s">"'test'"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenStr</span><span class="p">,</span> <span class="s">"</span><span class="se">\"</span><span class="s">test</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnUnterminatedString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"'test"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedQuotedString</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnMismatchedQuotesString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">test'"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedQuotedString</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>you notice the constant named <code>errorUnterminatedQuotedString</code>. It is similar to the error message we added for the multiline comment.</p>
<ul class="code-tab-container d4084566-5868-4156-bd4a-9c269316f7eb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd4084566-5868-4156-bd4a-9c269316f7eb', 0)">lexer/errors.go</a></li></ul><ul class="code-tab-switcher d4084566-5868-4156-bd4a-9c269316f7eb"><li class="code_switcher_container_parent active-tab code_switcher_go f40f0580-4581-4b5c-bfd5-c79faa9d11f9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">errorUnterminatedMultilineComment</span> <span class="o">=</span> <span class="s">"unterminated multiline comment"</span>
  <span class="n">errorUnterminatedQuotedString</span>     <span class="o">=</span> <span class="s">"unterminated quoted string"</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>We obviously fail the test:</p>
<div class="code_switcher_container_parent 7b3434e3-29bc-490d-8cf0-961e94458279"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"String"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnUnterminatedString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnMismatchedQuotesString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Ok, now we can write our <code>lexString</code>. We are going to write a function that first take notice of the character it currently is on. This character will be a single or double quote and we are going to need it to determine the end of our string. After that we are going to loop over the input and we are going to check for EOF (unterminated string) and the character at the beginning (end of string). When we encounter the end of the string, we can just break out of the loop and return a String Token.</p>
<ul class="code-tab-container 20870eff-c6d2-49dd-9045-8c105a91a22c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '20870eff-c6d2-49dd-9045-8c105a91a22c', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 20870eff-c6d2-49dd-9045-8c105a91a22c"><li class="code_switcher_container_parent active-tab code_switcher_go 7e25e1ac-1a2d-4ecc-99a9-89924032ccae"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexString</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">open</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="n">Loop</span><span class="o">:</span>
  <span class="k">for</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span><span class="o">:</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">errorf</span><span class="p">(</span><span class="n">errorUnterminatedQuotedString</span><span class="p">)</span>
    <span class="k">case</span> <span class="kt">rune</span><span class="p">(</span><span class="n">open</span><span class="p">)</span><span class="o">:</span>
      <span class="k">break</span> <span class="n">Loop</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenStr</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and after that, you know the trick, we add that to <code>lexProto</code>:</p>
<ul class="code-tab-container abaf5ad6-0e42-4723-8f58-4a128c18de1a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'abaf5ad6-0e42-4723-8f58-4a128c18de1a', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher abaf5ad6-0e42-4723-8f58-4a128c18de1a"><li class="code_switcher_container_parent active-tab code_switcher_go c70120dc-1968-4fa3-b6b0-33cb03947619"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexString</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and the tests?</p>
<div class="code_switcher_container_parent 7f2b975d-b4db-41fa-851a-895ffc09e637"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.374s
</code></pre></div></div>
</div>
<h2 id="numbers">Numbers</h2>
<p>The real challenge comes with numbers. If we take a look at the <a href="https://protobuf.dev/reference/protobuf/proto3-spec/">Protobuf language specification</a>, we need to accept Decimal, Octal and Hexadecimal for integers and exponents for floats. On top of that we need to be able to put a sign before the number to be able to have -5 for example.</p>
<p>In our tests we are going to try listing all the possible kinds of numbers (if you spot something missing, let me know):</p>
<ul class="code-tab-container c27f5f4b-87c1-4904-bccf-b09e1d97343c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c27f5f4b-87c1-4904-bccf-b09e1d97343c', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher c27f5f4b-87c1-4904-bccf-b09e1d97343c"><li class="code_switcher_container_parent active-tab code_switcher_go dc84f64e-458d-44ac-a0c8-f2c508591d32"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnIntDecimal</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"5 0 -5 +5"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"-5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"+5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnIntHex</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"0xff 0XFF"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0xff"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0XFF"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnIntOctal</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"056"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"056"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnFloat</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"-0.5 +0.5 -.5 +.5 .5 .5e5 .5e+5 .5e-5 5e5"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"-0.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"+0.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"-.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"+.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e+5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e-5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"5e5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Tests fail:</p>
<div class="code_switcher_container_parent 5b3a5b8c-0c3e-4f58-8245-06a59aae4036"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnIntDecimal <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnIntHex <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnIntOctal <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnFloat <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Float"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Now, before writing our <code>lexNumber</code> we want to have an <code>accept</code> function which does something similar to <code>acceptWhile</code> but only one time instead of in a loop. This will help us to check if our number, as an example, is starting by 0 in which case it might be a hexadecimal number.</p>
<ul class="code-tab-container 436c775a-ce8a-488f-ad25-1831839e5e69"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '436c775a-ce8a-488f-ad25-1831839e5e69', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 436c775a-ce8a-488f-ad25-1831839e5e69"><li class="code_switcher_container_parent active-tab code_switcher_go 59e15b5a-51b0-42bf-8aef-725c7d1b44d0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">valid</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">strings</span><span class="o">.</span><span class="n">ContainsRune</span><span class="p">(</span><span class="n">valid</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">true</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">false</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now we can write our <code>lexNumber</code> function. We are going to start by assuming that our set of possible characters are from 0 to 9. Then we check if the number starts with the character 0. If it's the case, it will be an Hexadecimal or an Octal. We update the set of possible characters based on that.</p>
<p>Now that we know the possible set of characters, we can do an <code>acceptWhile</code> to read the digits. After the number we might see a dot for floating-point numbers. There we are going to do another <code>acceptWhile</code> to read all the digits. And finally, after all of this, we can still have an exponent followed by a sign and digits.</p>
<ul class="code-tab-container bf3ffb8e-86c1-4211-aee1-c25f83969893"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'bf3ffb8e-86c1-4211-aee1-c25f83969893', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher bf3ffb8e-86c1-4211-aee1-c25f83969893"><li class="code_switcher_container_parent active-tab code_switcher_go bb29156c-a77e-4868-8aa4-18731de6d471"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexNumber</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">t</span> <span class="n">TokenType</span> <span class="o">=</span> <span class="n">TokenInt</span>

  <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"+-"</span><span class="p">)</span>

  <span class="n">digits</span> <span class="o">:=</span> <span class="s">"0123456789"</span> <span class="c">// decimal</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"0"</span><span class="p">)</span> <span class="p">{</span> <span class="c">// starts with 0</span>
    <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"xX"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">digits</span> <span class="o">=</span> <span class="s">"0123456789abcdefABCDEF"</span> <span class="c">// hexadecimal</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">digits</span> <span class="o">=</span> <span class="s">"01234567"</span> <span class="c">// octal</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">TokenFloat</span>
    <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"0123456789"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"eE"</span><span class="p">)</span> <span class="p">{</span> <span class="c">// exponent</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">TokenFloat</span>
    <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"+-"</span><span class="p">)</span>
    <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"0123456789"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We add that to <code>lexProto</code>:</p>
<ul class="code-tab-container 6f2322bf-c6c6-4086-9681-3ff2981c5d48"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6f2322bf-c6c6-4086-9681-3ff2981c5d48', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 6f2322bf-c6c6-4086-9681-3ff2981c5d48"><li class="code_switcher_container_parent active-tab code_switcher_go 76568679-af39-4844-ac09-7611b8572e0b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'+'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'-'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">||</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexNumber</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We run our tests again:</p>
<div class="code_switcher_container_parent 7cb4c7dd-445b-4a6a-9822-1397b51ebf3a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnFloat <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[8] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Float"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"."</span>
FAIL
</code></pre></div></div>
</div>
<p>and we still have an error. This is due to the fact that, in part 1, when we were lexing symbols, we added this case statement:</p>
<ul class="code-tab-container a0782ccf-9e8a-4728-a1e9-99544b0042f8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a0782ccf-9e8a-4728-a1e9-99544b0042f8', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a0782ccf-9e8a-4728-a1e9-99544b0042f8"><li class="code_switcher_container_parent active-tab code_switcher_go 2f17da83-f697-4bda-853f-bea57e11ecd1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">:</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
<span class="c">//...</span>
</code></pre></div></div>
</li></ul>
<p>In Protobuf, numbers can start directly with a dot and thus our lexer will just read Dot and then an Integer. So we need to skip the lexing of a dot if it's followed by a number.</p>
<ul class="code-tab-container f8a4ccff-595a-4e9b-9fe1-5e0c5aeb9fbc"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f8a4ccff-595a-4e9b-9fe1-5e0c5aeb9fbc', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f8a4ccff-595a-4e9b-9fe1-5e0c5aeb9fbc"><li class="code_switcher_container_parent active-tab code_switcher_go 3888455d-cd2c-4bb2-8b88-375e63ebc25b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsNumber</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">())</span><span class="o">:</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
<span class="c">//...</span>
</code></pre></div></div>
</li></ul>
<p>And our tests pass:</p>
<div class="code_switcher_container_parent a6ccd46f-4fc7-4c09-9d3e-70fd4ca4a041"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.763s
</code></pre></div></div>
</div>
<blockquote>
<p>Note: I am aware that some invalid numbers can pass through this lexing function. For example, the invalid number <code>0XFF.5</code> will return you a float. However, this is not the lexer that should handle the verification of number, the parser will. The lexer's job is to return tokens.</p>
</blockquote>
<h2 id="we-can-lex">We can Lex!</h2>
<p>As promised in the beginning of the article, we are able to lex a file called <code>descriptor.proto</code>. This file can be found <a href="https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto">here</a>. Just copy its content to a file.</p>
<p>Now, we need to write some main function to run our lexer. It will read the first argument from the command line (no error handling because this is just a test), read the file to a string, initialize a lexer and will repeatedly call the <code>NextToken</code> until EOF.</p>
<ul class="code-tab-container e2cdc2ef-d25f-480e-9047-858801f4b2ae"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e2cdc2ef-d25f-480e-9047-858801f4b2ae', 0)">main.go</a></li></ul><ul class="code-tab-switcher e2cdc2ef-d25f-480e-9047-858801f4b2ae"><li class="code_switcher_container_parent active-tab code_switcher_go b6f7ca69-59bc-4b99-abbe-6ee2613d3eab"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"log"</span>
  <span class="s">"os"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">args</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Args</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="p">]</span>
  <span class="n">content</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">content</span><span class="p">))</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span>

    <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">token</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>we run:</p>
<div class="code_switcher_container_parent 1b788117-74f0-496e-b1ff-5c84aefe6f1b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run main.go descriptor.proto
</code></pre></div></div>
</div>
<p>and we should have output similar to:</p>
<div class="code_switcher_container_parent c87ca1cc-0917-43d1-805a-6e91c6c6835f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
2023/02/21 18:01:58 <span class="o">{}</span> <span class="o">}</span> <span class="o">{</span>38493 920 0<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>Space 
 <span class="o">{</span>38494 920 1<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{}</span> <span class="o">}</span> <span class="o">{</span>38495 921 0<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>Space 
 <span class="o">{</span>38496 921 1<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>EOF  <span class="o">{</span>38497 922 0<span class="o">}}</span>
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we tokenized all the elements that we need to get started with our parser. We are even able to lex proto files in the protobuf library! In the next episode, before going to the parser, we are going to make sure that our token positions are correct because up until now we didn't test that.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to delve into the second part of the lexing which is tokenizing more advanced part of the input. More precisely, we are going to lex spaces (whitespaces, new lines, ...), comments, Identifiers, Numbers (Int and Float), and Strings. At the end of this article, we will have a fully functioning lexer that can tokenize the descriptor.proto which is the longest proto file in the protobuf repo. Let's get started.]]></summary></entry></feed>