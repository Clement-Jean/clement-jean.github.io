<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://clement-jean.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://clement-jean.github.io/" rel="alternate" type="text/html" /><updated>2023-06-02T14:53:55+08:00</updated><id>https://clement-jean.github.io/feed.xml</id><title type="html">Clément Jean</title><subtitle>Eternal learner and challenges lover</subtitle><author><name>Clément Jean</name></author><entry><title type="html">Range Testing in Strings</title><link href="https://clement-jean.github.io/range_testing_in_strings/" rel="alternate" type="text/html" title="Range Testing in Strings" /><published>2023-06-02T00:00:00+08:00</published><updated>2023-06-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/range_testing_in_strings</id><content type="html" xml:base="https://clement-jean.github.io/range_testing_in_strings/"><![CDATA[<p>Recently, I've been working on adding support for <code>SourceCodeInfo</code> into <a href="https://github.com/Clement-Jean/protein">Protein</a>. This required checking a lot of Column/Line ranges in string. An example of this is the following. Given a oneof like this:</p>
<div class="code_switcher_container_parent 77abbf09-49a7-4651-bc4b-b6f76023ce1d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code class="language-proto3">>oneof Test {
  int32 id = 1;
}
</code></pre></div>
<p>we should come up with the following ranges:</p>
<div class="code_switcher_container_parent ef11e1e6-5ec3-4e34-aeeb-715971512d1c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>[
	// line,column
	{0, 0, 2, 1} // oneof - from 0,0 to 2, 1
	{1, 2, 15}   // oneof field - from 1,2 to 1,15 (same lines get ommited)
	{1, 2, 7}    // oneof field type - from 1,2 to 1,7
	{1, 8, 10}   // oneof field name - from 1,8 to 1,10
	{1, 13, 14}  // oneof field tage - from 1,13 to 1,14
]
</code></pre></div>
<p>This might seem like a daunting and it was until I found out how to test ranges correctly for these kind of situations.</p>
<h2 id="sourcecodeinfo">SourceCodeInfo</h2>
<p>Before starting with the whole testing thing. It is important to get a sense of what a Protobuf's <code>SourceCodeInfo</code> is. As its name suggests this is information about the source code. This information is basically lines and columns for tokens (called spans) and some tags sequence starting from <code>FileDescriptorProto</code> (called path). This info is mostly important for tools like what Protein will be: linters, LSPs, ... It gives us a way to find elements both in terms of position (line 1, column 10) in code and in terms of context (a oneof inside a message).</p>
<p>While the second part is pretty interesting, we are not going to cover that. We will focus on testing the spans correctly. However, if you are interested in learning more about paths, I'd be happy to write an article on it. Leave a comment if you are.</p>
<h2 id="naive-testing">Naive Testing</h2>
<p>Now that we know what are <code>SourceCodeInfo</code> we can start with the testing. A naive and rather manual solution to solve this is probably writing every span by hand. This is pretty much what I did in the introduction of this article. This could mean something like this:</p>
<div class="code_switcher_container_parent 8f6d74e2-0b5e-4d17-9116-474c80add519"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
	<span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span>
	<span class="n">info</span> <span class="p">[]</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">SourceCodeInfo_Location</span><span class="p">,</span>
	<span class="n">expectedSpans</span> <span class="p">[][]</span><span class="kt">int32</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"expected info"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">expectedSpans</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"expected %v, got: %v"</span><span class="p">,</span> <span class="n">expectedSpans</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">expectedSpan</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">expectedSpans</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Span</span><span class="p">,</span> <span class="n">expectedSpan</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
			<span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"path %d wrong. expected %v, got: %v"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">expectedSpan</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Span</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestOneofSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// Arrange</span>
	<span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">)</span>
	<span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

	<span class="c">// Act</span>
	<span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="no">nil</span><span class="p">)</span>

	<span class="c">// Assert</span>
	<span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
		<span class="n">t</span><span class="p">,</span>
		<span class="n">info</span><span class="p">,</span>
		<span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">45</span><span class="p">},</span>  <span class="c">// oneof - from 0,0 to 0, 45</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">26</span><span class="p">},</span> <span class="c">// oneof field - from 0,13 to 0,26</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">18</span><span class="p">},</span> <span class="c">// oneof field type - from 0,13 to 0,18</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">21</span><span class="p">},</span> <span class="c">// oneof field name - from 0,19 to 0,21</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">24</span><span class="p">,</span> <span class="m">25</span><span class="p">},</span> <span class="c">// oneof field tage - from 0,24 to 0,25</span>
			<span class="c">// etc...</span>
		<span class="p">},</span>
	<span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This looks rather simple and if we stick to testing small pieces of code, it is feasible to get our way through. However, as you might expect, this is tiring and very repetitive work. Imagine doing that for every single concept in Protobuf...</p>
<h2 id="a-better-way">A Better Way</h2>
<p>For full disclosure, this idea for testing ranges in strings is not my idea. This is an idea I discovered after reading Protobuf documentation and unit tests. An example of this is the documentation for <code>SourceCodeInfo</code> in the descriptor.proto file:</p>
<div class="code_switcher_container_parent 0fc15992-b4fd-48f6-b107-6fb4b6cb87d1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Let's look at just the field definition:</span>
<span class="c">//   optional string foo = 1;</span>
<span class="c">//   ^       ^^     ^^  ^  ^^^</span>
<span class="c">//   a       bc     de  f  ghi</span>
<span class="c">// We have the following locations:</span>
<span class="c">//   span   path               represents</span>
<span class="c">//   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.</span>
<span class="c">//   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).</span>
<span class="c">//   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).</span>
<span class="c">//   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).</span>
<span class="c">//   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).</span>
</code></pre></div></div>
</div>
<p>We can just focus on the span and how they mark the beginning and end of them with letters. <code>optional</code> as a span of [a, b) (from a to b non-inclusive). Meaning that we go from column 0 to column 8 (length of the work optional) but you can see that <code>b</code> is marking the space character so we do not include that.</p>
<p>Now, even I didn't get the original idea, I believe that implementing it in Go (original in C++) and adding line support is quite interesting. Let us start by the v1 which didn't support multiline code.</p>
<p>The idea is that we are going to have function calculating indices from a string full of separator characters and letters. For example, if we say that the separator is '-', we could have a string like this:</p>
<div class="code_switcher_container_parent 968e2661-69ed-41cb-a225-d29c7cc3bbe4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>a------------b----cd-e--fghi-----jk---l--mno-p
</code></pre></div>
<p>that would match a oneof like this one:</p>
<div class="code_switcher_container_parent d031eebb-4f54-4430-b6fd-2db594c85513"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code class="language-proto3">>oneof Test { int32 id = 1; string uuid = 2; }
</code></pre></div>
<p>To better see it we will have a function that takes both the original Protobuf code and the reference string (that is what I called the separator-full string) as parameters:</p>
<div class="code_switcher_container_parent 7fcbf653-18cf-4f34-ba55-97a6c7b52bb8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">referenceString</span><span class="p">(</span>
	<span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
	<span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>This nicely matches and it is easier to visually see where the span starts and ends when we know the letter. If I told you there should be a span [b, h), you can clearly understand that these references to the id field definition.</p>
<p>Now, how should we represent all of this in terms of data structure? The naive approach is to create a <code>map[rune]int32</code>. The <code>rune</code> will be the letterm and we are return <code>int32</code> instead of <code>int</code> simply because <code>SourceCodeInfo</code> is expecting <code>int32</code>s. Then, when we will want to check the value of <code>a</code>, we can simply do:</p>
<div class="code_switcher_container_parent 89a74dd0-b506-4b0c-9ee6-38586b038df4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">:=</span> <span class="n">refs</span><span class="p">[</span><span class="sc">'a'</span><span class="p">]</span>
</code></pre></div></div>
</div>
<p>This doesn't seem that bad right? Well, what if you need to access letters a to z? You basically have 26 of these variables around. Feasible but not that ergonomic.</p>
<h2 id="an-even-better-way">An Even Better Way</h2>
<p>My second thought on how to improve this comes from my early interest in reflection. I find it amazing that we take a look at the guts of our program and manipulate it programmatically. An example of that is listing all the fields in a struct and/or set values to them. I don't know what you think but for me this is just so powerful (and dangerous!).</p>
<p>Enough about my geekiness on reflection. What if we could simply have an object into which we will set the values of our spans. This would let us write something like following for accessing values:</p>
<div class="code_switcher_container_parent 88d967d8-da7e-4849-95d2-861e10507f83"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ref</span><span class="o">.</span><span class="n">A</span>
</code></pre></div></div>
</div>
<p>How nice would that be? We would only have one variable (ref) and we could access the fields.</p>
<p>It turns out that we can do it pretty easily. Think about a <code>struct</code> like the following:</p>
<div class="code_switcher_container_parent 9992dd5b-f65a-4353-b4e0-44837e39f594"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Ref</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">O</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span> <span class="kt">int32</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>I agree that this definition is not that beautiful but it will make our test code easier to read.</p>
<p>With that <code>Ref</code>, we will now use reflection to set <code>A</code> (uppercase because reflection require exported fields) when we see a <code>a</code> in the string. This will look like this:</p>
<div class="code_switcher_container_parent 3cc9e41d-162e-44e9-95e3-5ec5c46abbd2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// referenceString returns the original string and the newly created Ref</span>
<span class="c">// the sep argument is the separator we skip (e.g `-`)</span>
<span class="k">func</span> <span class="n">referenceString</span><span class="p">(</span><span class="n">src</span> <span class="kt">string</span><span class="p">,</span> <span class="n">indices</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sep</span> <span class="kt">rune</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">Ref</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// indices should always be longer than src by 1 rune</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">+</span><span class="m">1</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="s">"wrong indices"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">ref</span> <span class="o">:=</span> <span class="n">Ref</span><span class="p">{}</span>

	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">indices</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="n">sep</span> <span class="p">{</span>
			<span class="c">// checks valid characters (lowercase letter)</span>
			<span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLower</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
				<span class="nb">panic</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v is not a lowercase letter"</span><span class="p">,</span> <span class="n">index</span><span class="p">))</span>
			<span class="p">}</span>

			<span class="c">// this is the index of the letter in our Ref struct!</span>
			<span class="c">// e.g A is at index 0 and Z is at index 25</span>
			<span class="n">idx</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="kt">byte</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span> <span class="c">// ASCII trick to get index of letter in alphabet</span>

			<span class="c">// set the value of i to the field at index idx</span>
			<span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">src</span><span class="p">,</span> <span class="n">ref</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>with that we can simply write the following:</p>
<div class="code_switcher_container_parent 63e8c914-5331-40fe-8e28-2d389935c569"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
	<span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
	<span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>and if we print <code>ref</code> we get:</p>
<div class="code_switcher_container_parent c977a001-d20b-44f8-b760-7a914a203bd4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Ref</span> <span class="p">{</span><span class="n">A</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">B</span><span class="o">:</span> <span class="m">13</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="m">18</span><span class="p">,</span> <span class="n">D</span><span class="o">:</span> <span class="m">19</span><span class="p">,</span> <span class="n">E</span><span class="o">:</span> <span class="m">21</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="m">24</span><span class="p">,</span> <span class="n">G</span><span class="o">:</span> <span class="m">25</span><span class="p">,</span> <span class="n">H</span><span class="o">:</span> <span class="m">26</span><span class="p">,</span> <span class="n">I</span><span class="o">:</span> <span class="m">27</span><span class="p">,</span> <span class="n">J</span><span class="o">:</span> <span class="m">33</span><span class="p">,</span> <span class="n">K</span><span class="o">:</span> <span class="m">34</span><span class="p">,</span> <span class="n">L</span><span class="o">:</span> <span class="m">38</span><span class="p">,</span> <span class="n">M</span><span class="o">:</span> <span class="m">41</span><span class="p">,</span> <span class="n">N</span><span class="o">:</span> <span class="m">42</span><span class="p">,</span> <span class="n">O</span><span class="o">:</span> <span class="m">43</span><span class="p">,</span> <span class="n">P</span><span class="o">:</span> <span class="m">45</span><span class="p">,</span> <span class="n">Q</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">R</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">S</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">T</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">U</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">V</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">W</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">X</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">Y</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">Z</span><span class="o">:</span> <span class="m">0</span><span class="p">}</span>
</code></pre></div></div>
</div>
<p>If we check at the span [b, h), we can see that we have [13, 26). This is quite powerful and way more readable. If we rewrite the <code>TestOneofSourceCodeInfo</code> function with the use of <code>Ref</code>, we have:</p>
<div class="code_switcher_container_parent 993ac186-f649-4207-995b-2f390588194e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOneofSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// Arrange</span>
	<span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
		<span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
		<span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
		<span class="sc">'-'</span><span class="p">,</span>
	<span class="p">)</span>

	<span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span>
	<span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

	<span class="c">// Act</span>
	<span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="no">nil</span><span class="p">)</span>

	<span class="c">// Assert</span>
	<span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
		<span class="n">t</span><span class="p">,</span>
		<span class="n">info</span><span class="p">,</span>
		<span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">P</span><span class="p">},</span>  <span class="c">// oneof - from 0,0 to 0, 45</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">H</span><span class="p">},</span> <span class="c">// oneof field - from 0,13 to 0,26</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">C</span><span class="p">},</span> <span class="c">// oneof field type - from 0,13 to 0,18</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">E</span><span class="p">},</span> <span class="c">// oneof field name - from 0,19 to 0,21</span>
			<span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">F</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">G</span><span class="p">},</span> <span class="c">// oneof field tage - from 0,24 to 0,25</span>
			<span class="c">// etc...</span>
		<span class="p">},</span>
	<span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This now look a little bit less magic than before with all these numbers everywhere.</p>
<h2 id="supporting-lines">Supporting lines</h2>
<p>As you can see, we still have these 0s for each line. They actually represent lines. Could we also support multiline code? This would let us write something like:</p>
<div class="code_switcher_container_parent 70a5c010-7806-497e-b3ee-5fe5fcd7f120"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
	<span class="s">`oneof Test {
int32 id = 1;
string uuid = 2;
}`</span><span class="p">,</span>
	<span class="s">`a------------
b----cd-e--fgh
i-----jk---l--mno
-p`</span><span class="p">,</span>
	<span class="sc">'-'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>Without indentation that looks a little bit weird but this is already letting us testing a little bit more in depth.</p>
<p>The first thing that we are going to do is adding fields in <code>Ref</code> for lines. This looks like:</p>
<div class="code_switcher_container_parent f8c62092-c8db-4177-b5ed-48dabb2821bf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Ref</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="c">//...</span>
	<span class="n">LA</span><span class="p">,</span> <span class="n">LB</span><span class="p">,</span> <span class="n">LC</span><span class="p">,</span> <span class="n">LD</span><span class="p">,</span> <span class="n">LE</span><span class="p">,</span> <span class="n">LF</span><span class="p">,</span> <span class="n">LG</span><span class="p">,</span> <span class="n">LH</span><span class="p">,</span> <span class="n">LI</span><span class="p">,</span> <span class="n">LJ</span><span class="p">,</span> <span class="n">LK</span><span class="p">,</span> <span class="n">LL</span><span class="p">,</span> <span class="n">LM</span><span class="p">,</span> <span class="n">LN</span><span class="p">,</span> <span class="n">LO</span><span class="p">,</span> <span class="n">LP</span><span class="p">,</span> <span class="n">LQ</span><span class="p">,</span> <span class="n">LR</span><span class="p">,</span> <span class="n">LS</span><span class="p">,</span> <span class="n">LT</span><span class="p">,</span> <span class="n">LU</span><span class="p">,</span> <span class="n">LV</span><span class="p">,</span> <span class="n">LW</span><span class="p">,</span> <span class="n">LX</span><span class="p">,</span> <span class="n">LY</span><span class="p">,</span> <span class="n">LZ</span> <span class="kt">int32</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Cringing a little? It's fine! Keep in mind that this is for the sake of having more expressive tests.</p>
<p>Now, in referenceString we will keep track of columns and lines and, for <code>a</code>, we are going to set <code>A</code> to the column and <code>LA</code> to the line. We now have:</p>
<div class="code_switcher_container_parent df30eb13-be77-4468-8504-3c551082fadb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">referenceString</span><span class="p">(</span><span class="n">src</span> <span class="kt">string</span><span class="p">,</span> <span class="n">indices</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sep</span> <span class="kt">rune</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">Ref</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">ReplaceAll</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">""</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">+</span><span class="m">1</span> <span class="p">{</span>
		<span class="nb">panic</span><span class="p">(</span><span class="s">"wrong indices"</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="n">ref</span> <span class="o">:=</span> <span class="n">Ref</span><span class="p">{}</span>
	<span class="n">line</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c">// the line</span>
	<span class="n">column</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c">// the column - do not use i anymore</span>

	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">indices</span> <span class="p">{</span>
		<span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="n">sep</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">!=</span> <span class="sc">'\n'</span> <span class="p">{</span> <span class="c">// also check '\n'</span>
			<span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLower</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
				<span class="nb">panic</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v is not a lowercase letter"</span><span class="p">,</span> <span class="n">index</span><span class="p">))</span>
			<span class="p">}</span>

			<span class="n">idx</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="kt">byte</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span>

			<span class="c">// set the column</span>
			<span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">column</span><span class="p">))</span>

			<span class="c">// set the line</span>
			<span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="m">26</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
		<span class="p">}</span>

		<span class="n">column</span> <span class="o">+=</span> <span class="m">1</span>

		<span class="c">// on newline reset column and increase line</span>
		<span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
			<span class="n">line</span><span class="o">++</span>
			<span class="n">column</span> <span class="o">=</span> <span class="m">0</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">src</span><span class="p">,</span> <span class="n">ref</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>With that we can now write a test for multiline like this:</p>
<div class="code_switcher_container_parent 2bdc1520-6d90-4f94-bc9d-12e10efab0f2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOneofMultilineSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
		<span class="s">`oneof Test {
int32 id = 1;
string uuid = 2;
}`</span><span class="p">,</span>
		<span class="s">`a------------
b----cd-e--fgh
i-----jk---l--mno
-p`</span><span class="p">,</span>
		<span class="sc">'-'</span><span class="p">,</span>
	<span class="p">)</span>

	<span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span>
	<span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
	<span class="n">ctx</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">oneofContext</span><span class="p">{}</span>

	<span class="c">// Act</span>
	<span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseOneof</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="n">ctx</span><span class="p">)</span>

	<span class="c">// Assert</span>
	<span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
		<span class="n">t</span><span class="p">,</span>
		<span class="n">info</span><span class="p">,</span>
		<span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
			<span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LA</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">LP</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">P</span><span class="p">},</span>
			<span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LB</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">H</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LB</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">C</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LD</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">E</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LF</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">F</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">G</span><span class="p">},</span>
			<span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LI</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">I</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">O</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LI</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">I</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">J</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LK</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">K</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">L</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LM</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">M</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">N</span><span class="p">},</span>
		<span class="p">},</span>
	<span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Take your time to wrap your mind around it. We just made the all things look a little bit more verbose but less magical and frightening.</p>
<h2 id="advantages">Advantages</h2>
<ul>
<li>New developers looking at these tests will probably be less afraid of writing a new test.</li>
<li>Fewer places where we can make typos. Most typos will be in the reference string.</li>
<li>Changing the spans or separators requires us to only update the reference strings, not all the numbers in int32 arrays.</li>
<li>Reflection is letting us create a map out of a struct and have fewer variables.</li>
</ul>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>More verbose.</li>
<li>Reflection is kind of magical too. However, magic is only happening in <code>referenceString</code>. Not everywhere like before.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I hope this makes you as interested as I am on how to improve testing code. I already loved creating readable and deterministic tests but now with this other tool in my tool belt, I'm interested in thinking more about readability and developer onboarding.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="Protobuf" /><summary type="html"><![CDATA[Recently, I've been working on adding support for SourceCodeInfo into Protein. This required checking a lot of Column/Line ranges in string. An example of this is the following. Given a oneof like this:]]></summary></entry><entry><title type="html">Custom RPC Options in Protobuf</title><link href="https://clement-jean.github.io/custom_rpc_options/" rel="alternate" type="text/html" title="Custom RPC Options in Protobuf" /><published>2023-04-17T00:00:00+08:00</published><updated>2023-04-17T00:00:00+08:00</updated><id>https://clement-jean.github.io/custom_rpc_options</id><content type="html" xml:base="https://clement-jean.github.io/custom_rpc_options/"><![CDATA[<p>Recently I had to design authentication for a Blazor Application. After finishing implementing, I soon faced the need to know which RPC endpoint needs authentication and which doesn't. And while part of the problem is a solved one, I still needed a mechanism to let me define this. Let's see how.</p>
<blockquote>
<p>All the code (<strong>only running through Bazel right now</strong>) is available <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-04-13-custom_rpc_options">here</a></p>
</blockquote>
<h2 id="custom-options">Custom Options</h2>
<p>Before explaining what my solution to the problem is, I'd like to make sure you understand what are custom options in Protobuf and how to define one. If you are confident about this skill, feel free to skip to the next section.</p>
<p><strong>A custom option is a way to define metadata for a proto file, message, enum, fields, service and rpc</strong>. Generally, we are used to these:</p>
<div class="code_switcher_container_parent d74402bf-904a-4f51-a25f-ed9209754cbb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/Clement-Jean/test"</span><span class="p">;</span>
</code></pre></div></div>
</div>
<p>being placed at the top of the proto file. But it is important to know that you can make a field or message deprecated like so:</p>
<div class="code_switcher_container_parent 23e47230-73c9-48fc-b3a1-22e5507578cf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Test</span> <span class="p">{</span>
  <span class="k">option</span> <span class="na">deprecated</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="kt">int32</span> <span class="na">field</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span> <span class="na">deprecated</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Now, I agree that, in most of the cases, these option are more informational than anything else. They do not necessarily impact the code generation but they are here to document the code. Also, knowing that Protobuf has reflection, we can use them in our code. This means that we could have a tool checking for deprecated messages, fields, ... and give us warnings when we use them in our code base.</p>
<p>How do we define one, though? Well, it turns out that this is pretty simple. We need to use the <code>extend</code> concept and define which kind of option we want to extend. Let's first take a look at what kind of options we have:</p>
<ul class="code-tab-container a69a288a-4b16-4379-bd19-441b0ff97a4f"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'a69a288a-4b16-4379-bd19-441b0ff97a4f', 0)">descriptor.proto</a></li></ul><ul class="code-tab-switcher a69a288a-4b16-4379-bd19-441b0ff97a4f"><li class="code_switcher_container_parent active-tab code_switcher_proto b0258e83-2249-49f0-a298-e94a40282743"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">FileOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>

  <span class="c1">// Clients can define custom options in extensions of this message. See above.</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">MessageOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">FieldOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">OneofOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">EnumOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">EnumValueOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ServiceOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">MethodOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That's actually every concept that we have in Protobuf! So let's define a simple option now. We will define an option called <code>hello</code> of type string. And for making this related to the problem that I'm trying to solve, let's define that option in <code>MethodOptions</code> which represents the options for RPC endpoints.</p>
<p>So we will extend <code>MethodOptions</code>:</p>
<ul class="code-tab-container 1e2b15ec-20f4-4d00-91dd-a01b76440277"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '1e2b15ec-20f4-4d00-91dd-a01b76440277', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher 1e2b15ec-20f4-4d00-91dd-a01b76440277"><li class="code_switcher_container_parent active-tab code_switcher_proto 8a0eb00a-e193-4c35-998c-93009a2f15df"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And then inside this <code>extend</code> we can just write the hello field:</p>
<ul class="code-tab-container 5b7e04dd-f3d3-4c6d-a2e3-96a46e26582e"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '5b7e04dd-f3d3-4c6d-a2e3-96a46e26582e', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher 5b7e04dd-f3d3-4c6d-a2e3-96a46e26582e"><li class="code_switcher_container_parent active-tab code_switcher_proto ee8d3116-2b6e-4064-8c4b-7d60db650df7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">hello</span> <span class="o">=</span> <span class="err">??</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But what is the tag that we need to use? Well, if you noticed in the <code>descriptor.proto</code> we have an extension range. These are the numbers we can use for tag. For now, we will use 1000, however, be aware that some of these tags are reserved by some already defined options. <strong>So if you were to use a tool that defines options that have the same tag number, there would be conflicts</strong>.</p>
<p>We now have:</p>
<ul class="code-tab-container 53c8cb35-3e3e-40ef-bbec-3df99fca4fbb"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '53c8cb35-3e3e-40ef-bbec-3df99fca4fbb', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher 53c8cb35-3e3e-40ef-bbec-3df99fca4fbb"><li class="code_switcher_container_parent active-tab code_switcher_proto e8fe5665-95e0-4633-a59b-f59246a6dc3e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">hello</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="reflection">Reflection</h2>
<p>Let us now use that option and read the value in code.</p>
<p>To use it, this is pretty simple, we just need to import the file in which we wrote the <code>extend</code> and make sure we use the option on an RPC endpoint.</p>
<ul class="code-tab-container f9225a84-799e-4324-95ee-528637aa7d2c"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'f9225a84-799e-4324-95ee-528637aa7d2c', 0)">world.proto</a></li></ul><ul class="code-tab-switcher f9225a84-799e-4324-95ee-528637aa7d2c"><li class="code_switcher_container_parent active-tab code_switcher_proto 72d412d5-43d2-4726-9683-fef9d8d1bf55"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"hello.proto"</span><span class="p">;</span>

<span class="c1">//...</span>

<span class="kd">service</span> <span class="n">HelloWorldService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">HelloWorld</span> <span class="p">(</span><span class="n">HelloWorldRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloWorldResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">hello</span><span class="p">)</span> <span class="o">=</span> <span class="s">"world"</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We can generate the proto files out of world.proto and hello.proto. And after that we can take a bottom-up approach to read this value through reflection. By bottom up, I mean that we are going to first see how to read the value of a <code>MethodOptions</code>, then we will go to getting a <code>MethodDescriptor</code> out of a <code>ServiceDescriptor</code>, and finally getting a <code>ServiceDescriptor</code> out a <code>FileDescriptor</code>.</p>
<h3 id="getting-an-option-value">Getting an Option Value</h3>
<p>The first thing we are going to deal with is <code>MethodOptions</code>. These represent the options set on an RPC endpoint. In most of the implementations, we can check the existence of an option so this is as simple as &quot;check if there is the option with a given id on this method, if yes return the value, otherwise return null&quot;.</p>
<ul class="code-tab-container fcd577bd-3550-49b5-b4d2-38c88a913bd4"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'fcd577bd-3550-49b5-b4d2-38c88a913bd4', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'fcd577bd-3550-49b5-b4d2-38c88a913bd4', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'fcd577bd-3550-49b5-b4d2-38c88a913bd4', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'fcd577bd-3550-49b5-b4d2-38c88a913bd4', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'fcd577bd-3550-49b5-b4d2-38c88a913bd4', 4)">main.cs</a></li></ul><ul class="code-tab-switcher fcd577bd-3550-49b5-b4d2-38c88a913bd4"><li class="code_switcher_container_parent active-tab code_switcher_go 289556d4-cef4-484c-bcff-c5ebff7de340"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="s">"google.golang.org/protobuf/proto"</span>
  <span class="s">"google.golang.org/protobuf/reflect/protoreflect"</span>
  <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">getOptionValue</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span> <span class="c">// T is not covering all types...</span>
  <span class="n">opts</span> <span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">MethodOptions</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="n">value</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">ok</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">value</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 378461b7-ed26-49a2-8d57-562a9e3e1415"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">OPT_T</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">OPT_T</span><span class="o">&gt;</span> <span class="n">get_option_value</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">MethodOptions</span> <span class="o">&amp;</span><span class="n">opts</span><span class="p">,</span>
  <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">id</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">opts</span><span class="p">.</span><span class="n">HasExtension</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="o">?</span>
    <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java aa643bc5-7e76-4d26-afb0-10a2251988f2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.DescriptorProtos</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.protobuf.GeneratedMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getOptionValue</span><span class="o">(</span>
  <span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span> <span class="n">opts</span><span class="o">,</span>
  <span class="nc">GeneratedMessage</span><span class="o">.</span><span class="na">GeneratedExtension</span><span class="o">&lt;</span><span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">id</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">opts</span><span class="o">.</span><span class="na">hasExtension</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">?</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">((</span><span class="no">T</span><span class="o">)</span><span class="n">opts</span><span class="o">.</span><span class="na">getExtension</span><span class="o">(</span><span class="n">id</span><span class="o">))</span> <span class="o">:</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 3c348e8e-c6bb-4d74-970e-87ea9ee7ef2b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_option_value</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">.</span><span class="n">ListFields</span><span class="p">():</span>
    <span class="p">(</span><span class="n">desc</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="o">=</span> <span class="n">field</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s">""</span> <span class="ow">and</span> <span class="n">desc</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="nb">id</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 80aa4465-73fc-4929-99f8-a0f98ecc415e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">pb</span> <span class="p">=</span> <span class="k">global</span><span class="p">::</span><span class="n">Google</span><span class="p">.</span><span class="n">Protobuf</span><span class="p">;</span>

<span class="k">static</span> <span class="k">private</span> <span class="n">T</span> <span class="n">GetOptionValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
  <span class="k">this</span> <span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span> <span class="n">md</span><span class="p">,</span> <span class="c1">// MethodDescriptor and not MethodOptions as promised (sorry!)</span>
  <span class="n">pb</span><span class="p">::</span><span class="n">Extension</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodOptions</span><span class="p">,</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">id</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="n">md</span><span class="p">.</span><span class="nf">GetOptions</span><span class="p">().</span><span class="nf">GetExtension</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</code></pre></div></div>
</li></ul>
<h3 id="getting-a-method">Getting a Method</h3>
<p>The next step is to get a <code>MethodDescriptor</code> out of a <code>ServiceDescriptor</code>. This is done so that we can later call the GetOptionValue function on the options of that method (if any). We will basically loop over all the methods of a service and check for a predicate on each. If the predicate returns true, we &quot;select&quot; that method.</p>
<ul class="code-tab-container 2702dc2a-8694-47bf-a3cc-151a70bac359"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '2702dc2a-8694-47bf-a3cc-151a70bac359', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '2702dc2a-8694-47bf-a3cc-151a70bac359', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '2702dc2a-8694-47bf-a3cc-151a70bac359', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '2702dc2a-8694-47bf-a3cc-151a70bac359', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '2702dc2a-8694-47bf-a3cc-151a70bac359', 4)">main.cs</a></li></ul><ul class="code-tab-switcher 2702dc2a-8694-47bf-a3cc-151a70bac359"><li class="code_switcher_container_parent active-tab code_switcher_go fa9a47a5-d5ea-47c3-9d3b-080e0642e67f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">getServiceMethod</span><span class="p">(</span>
  <span class="n">sd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ServiceDescriptor</span><span class="p">,</span>
  <span class="n">fn</span> <span class="k">func</span><span class="p">(</span><span class="n">md</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">.</span><span class="n">Methods</span><span class="p">()</span><span class="o">.</span><span class="n">Len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="n">md</span> <span class="o">:=</span> <span class="n">sd</span><span class="o">.</span><span class="n">Methods</span><span class="p">()</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">fn</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">&amp;</span><span class="n">md</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp d80b6486-f705-4f4b-aaf5-220a9cf34a8b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*&gt;</span> <span class="n">get_service_method</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">ServiceDescriptor</span> <span class="o">*</span><span class="n">sd</span><span class="p">,</span>
  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">predicate</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">-&gt;</span><span class="n">method_count</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">md</span> <span class="o">=</span> <span class="n">sd</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">predicate</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
      <span class="k">return</span> <span class="n">md</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 5ac93b1b-b564-4bda-873b-ccb9d51921e0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.Descriptors</span><span class="o">;</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span><span class="o">&gt;</span> <span class="nf">getServiceMethod</span><span class="o">(</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">ServiceDescriptor</span> <span class="n">sd</span><span class="o">,</span>
  <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">&gt;</span> <span class="n">predicate</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">.</span><span class="na">getMethods</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span> <span class="n">method</span> <span class="o">=</span> <span class="n">sd</span><span class="o">.</span><span class="na">getMethods</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">predicate</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">method</span><span class="o">))</span>
      <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python ccdd5efd-ef12-4822-afb9-b915ffc21e2c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="n">predicate</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">method_name</span> <span class="ow">in</span> <span class="n">sd</span><span class="p">.</span><span class="n">methods_by_name</span><span class="p">:</span>
    <span class="n">md</span> <span class="o">=</span> <span class="n">sd</span><span class="p">.</span><span class="n">methods_by_name</span><span class="p">[</span><span class="n">method_name</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">predicate</span><span class="p">(</span><span class="n">md</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">md</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 9dc70dea-2203-44b4-aa7e-a7dccc100770"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span><span class="p">&gt;</span> <span class="nf">GetServiceMethod</span><span class="p">(</span>
  <span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">ServiceDescriptor</span><span class="p">&gt;</span> <span class="n">services</span><span class="p">,</span>
  <span class="n">Func</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">predicate</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="k">from</span> <span class="n">svc</span> <span class="k">in</span> <span class="n">services</span>
     <span class="k">from</span> <span class="n">method</span> <span class="k">in</span> <span class="n">svc</span><span class="p">.</span><span class="n">Methods</span>
     <span class="k">where</span> <span class="nf">predicate</span><span class="p">(</span><span class="n">method</span><span class="p">)</span>
     <span class="k">select</span> <span class="n">method</span><span class="p">;</span>
</code></pre></div></div>
</li></ul>
<h3 id="putting-everything-together">Putting Everything Together</h3>
<p>And finally the idea is to call <code>GetServiceMethod</code> on all the <code>ServiceDescriptor</code>s and with the predicate is true we can call <code>GetOptionValue</code> on the method selected.</p>
<ul class="code-tab-container fb8a519e-7034-470c-85df-3cbef5239867"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'fb8a519e-7034-470c-85df-3cbef5239867', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'fb8a519e-7034-470c-85df-3cbef5239867', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'fb8a519e-7034-470c-85df-3cbef5239867', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'fb8a519e-7034-470c-85df-3cbef5239867', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'fb8a519e-7034-470c-85df-3cbef5239867', 4)">main.cs</a></li></ul><ul class="code-tab-switcher fb8a519e-7034-470c-85df-3cbef5239867"><li class="code_switcher_container_parent active-tab code_switcher_go 3329cd12-0d6d-44d7-af64-ef8927764c73"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">getMethodOptionValue</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span>
  <span class="n">sd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ServiceDescriptor</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">value</span> <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="no">nil</span>

  <span class="n">getServiceMethod</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">md</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="n">opts</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">md</span><span class="o">.</span><span class="n">Options</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">MethodOptions</span><span class="p">)</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">false</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tmp</span> <span class="o">:=</span> <span class="n">getOptionValue</span><span class="p">[</span><span class="n">T</span><span class="p">](</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span> <span class="n">tmp</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">tmp</span>
      <span class="k">return</span> <span class="no">true</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">false</span>
  <span class="p">})</span>

  <span class="k">return</span> <span class="n">value</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">getMethodExtension</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span>
  <span class="n">fd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">FileDescriptor</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fd</span><span class="o">.</span><span class="n">Services</span><span class="p">()</span><span class="o">.</span><span class="n">Len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="n">sd</span> <span class="o">:=</span> <span class="n">fd</span><span class="o">.</span><span class="n">Services</span><span class="p">()</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">:=</span> <span class="n">getMethodOptionValue</span><span class="p">[</span><span class="n">T</span><span class="p">](</span><span class="n">sd</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span> <span class="n">value</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">value</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 5a8c1a3f-80cb-4605-b9f9-61c11c4974c3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">U</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">get_method_option_value</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">ServiceDescriptor</span> <span class="o">*</span><span class="n">sd</span><span class="p">,</span> <span class="c1">// in C++ we can access the ServiceDescriptor directly</span>
  <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">id</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">;</span>

  <span class="n">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">id</span><span class="p">](</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*</span><span class="n">md</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">opts</span> <span class="o">=</span> <span class="n">md</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">get_option_value</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">))</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">value</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 68bd03da-9397-43e5-b189-a198ca28a8cd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getMethodExtension</span><span class="o">(</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span>
  <span class="nc">GeneratedMessage</span><span class="o">.</span><span class="na">GeneratedExtension</span><span class="o">&lt;</span><span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">id</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fd</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Descriptors</span><span class="o">.</span><span class="na">ServiceDescriptor</span> <span class="n">sd</span> <span class="o">=</span> <span class="n">fd</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">world</span> <span class="o">=</span> <span class="n">getMethodOptionValue</span><span class="o">(</span><span class="n">sd</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">hello</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">world</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
      <span class="k">return</span> <span class="n">world</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 4fe72a2a-43ff-477b-9057-00279a8bbc35"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_method_option_value</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="n">md</span> <span class="o">=</span> <span class="n">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">md</span><span class="p">:</span> <span class="n">get_option_value</span><span class="p">(</span><span class="n">md</span><span class="p">.</span><span class="n">GetOptions</span><span class="p">(),</span> <span class="nb">id</span><span class="p">)</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">get_option_value</span><span class="p">(</span><span class="n">md</span><span class="p">.</span><span class="n">GetOptions</span><span class="p">(),</span> <span class="nb">id</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_method_extension</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">svc_name</span> <span class="ow">in</span> <span class="n">fd</span><span class="p">.</span><span class="n">services_by_name</span><span class="p">:</span>
    <span class="n">sd</span> <span class="o">=</span> <span class="n">fd</span><span class="p">.</span><span class="n">services_by_name</span><span class="p">[</span><span class="n">svc_name</span><span class="p">]</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">get_method_option_value</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp ef2911bd-53a1-43bb-be4b-6fd54ac06f8f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">private</span> <span class="n">T</span> <span class="n">GetMethodOptionValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
  <span class="k">this</span> <span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">FileDescriptor</span> <span class="n">fd</span><span class="p">,</span>
  <span class="n">pb</span><span class="p">::</span><span class="n">Extension</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodOptions</span><span class="p">,</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">id</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="n">fd</span><span class="p">.</span><span class="n">Services</span>
       <span class="p">.</span><span class="nf">GetServiceMethod</span><span class="p">(</span><span class="n">md</span> <span class="p">=&gt;</span> <span class="n">md</span><span class="p">.</span><span class="nf">GetOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
       <span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">()</span>
       <span class="p">.</span><span class="nf">GetOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</code></pre></div></div>
</li></ul>
<h3 id="usage">Usage</h3>
<p>Let's see how to use that in our main function.</p>
<ul class="code-tab-container 8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38', 4)">main.cs</a></li></ul><ul class="code-tab-switcher 8b2e7d54-83a2-41dc-be8d-e6ed9b6e9c38"><li class="code_switcher_container_parent active-tab code_switcher_go 27ee38fd-c473-493d-aaaa-70e5170124de"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">// pb.File_proto_world_proto is the generated FileDescriptor</span>
  <span class="c">// and pb.E_Hello the generated custom option</span>
  <span class="n">world</span> <span class="o">:=</span> <span class="n">getMethodExtension</span><span class="p">[</span><span class="kt">string</span><span class="p">](</span><span class="n">pb</span><span class="o">.</span><span class="n">File_proto_world_proto</span><span class="p">,</span> <span class="n">pb</span><span class="o">.</span><span class="n">E_Hello</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">world</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">world</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 0bad56a8-da07-45b1-a2dc-0dd43d832a64"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// HelloWorldService is the generated service</span>
  <span class="k">auto</span> <span class="n">sd</span> <span class="o">=</span> <span class="n">HelloWorldService</span><span class="o">::</span><span class="n">descriptor</span><span class="p">();</span>
  <span class="c1">// hello is the generated custom option</span>
  <span class="k">auto</span> <span class="n">world</span> <span class="o">=</span> <span class="n">get_method_option_value</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="n">hello</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">world</span><span class="p">)</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">world</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java cd773d3c-c9a2-4fbf-bf90-0fed7584f4a7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// World is the FileDescriptor for the file world.proto</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">FileDescriptor</span> <span class="n">fd</span> <span class="o">=</span> <span class="nc">World</span><span class="o">.</span><span class="na">getDescriptor</span><span class="o">();</span>
  <span class="c1">// Hello.hello is the generated custom option</span>
  <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">world</span> <span class="o">=</span> <span class="n">getMethodExtension</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">hello</span><span class="o">);</span>

  <span class="n">world</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">w</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">w</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python c9511230-4363-4e90-a7d9-725598a56df1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">proto.world_pb2</span> <span class="kn">import</span> <span class="n">DESCRIPTOR</span> <span class="c1"># FileDescriptor for world.proto
</span>
<span class="k">print</span><span class="p">(</span><span class="n">get_method_extension</span><span class="p">(</span><span class="n">DESCRIPTOR</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 51054cea-75ae-427f-b17d-28f0018b2728"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">public</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// HelloExtensions.Hello is the generated custom option</span>
  <span class="kt">var</span> <span class="n">id</span> <span class="p">=</span> <span class="n">HelloExtensions</span><span class="p">.</span><span class="n">Hello</span><span class="p">;</span>
  <span class="c1">// WorldReflection.Descriptor is the FileDescriptor for the file world.proto</span>
  <span class="kt">string</span> <span class="n">world</span> <span class="p">=</span> <span class="n">WorldReflection</span><span class="p">.</span><span class="n">Descriptor</span><span class="p">.</span><span class="nf">GetMethodOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">world</span><span class="p">.</span><span class="n">Length</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">world</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="back-to-the-problem">Back to the Problem</h2>
<p>Now, as I mentioned I was trying to detect which routes need authentication with the help of such a custom option. It is not that hard to imagine the code we saw in the previous section work for an extension like the following:</p>
<div class="code_switcher_container_parent e19890b9-d5cb-44b0-b408-b9b023085d1a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="na">is_authenticated</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Then, we can use it like so:</p>
<div class="code_switcher_container_parent 6c5795b1-f03d-42f8-a8db-31539a2d721e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">CheckoutService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">Checkout</span> <span class="p">(</span><span class="n">CheckoutRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">CheckoutResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">is_authenticated</span><span class="p">)</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>And with that we can get the value from the code we wrote earlier. We just need to be requesting the methods with Option having the id &quot;is_authenticated&quot; and make sure that we are asking for a boolean instead of a string.</p>
<h2 id="conclusion">Conclusion</h2>
<p>While this is a little bit hard to work directly with the Protobuf library, automating simple tasks like checking which routes need authentication save a lot of effort. I hope that you will find this content interesting and that you will share some of the extensions that you wrote.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protobuf" /><summary type="html"><![CDATA[Recently I had to design authentication for a Blazor Application. After finishing implementing, I soon faced the need to know which RPC endpoint needs authentication and which doesn't. And while part of the problem is a solved one, I still needed a mechanism to let me define this. Let's see how.]]></summary></entry><entry><title type="html">Parse go module files</title><link href="https://clement-jean.github.io/parse_go_module_files/" rel="alternate" type="text/html" title="Parse go module files" /><published>2023-03-30T00:00:00+08:00</published><updated>2023-03-30T00:00:00+08:00</updated><id>https://clement-jean.github.io/parse_go_module_files</id><content type="html" xml:base="https://clement-jean.github.io/parse_go_module_files/"><![CDATA[<p>Did you ever need to know, inside your program, on which go version you are running? That's what we are going to solve today. The most common use case for this is logging. We want to be able to debug by reproducing the environment of where the binary is running as close as possible. This starts by knowing which version of go we are using.</p>
<h1 id="setup">Setup</h1>
<p>To get started doing that, we will need a go module. Let's create that:</p>
<div class="code_switcher_container_parent fcf07c30-88eb-4d35-b3ac-f53d74a7128d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go mod init test.com
</code></pre></div></div>
</div>
<p>We should now have a go.mod file in our folder. If you inspect this file, we can get the go version which will be used for compiling the project. It looks like this:</p>
<ul class="code-tab-container 39230c5f-f29c-4210-9c91-2a15f3090bc3"><li class="active-tab code_switcher_text"><a onclick="selectTab('code_switcher_text', '39230c5f-f29c-4210-9c91-2a15f3090bc3', 0)">go.mod</a></li></ul><ul class="code-tab-switcher 39230c5f-f29c-4210-9c91-2a15f3090bc3"><li class="code_switcher_container_parent active-tab code_switcher_text 0a9328eb-b265-4881-b5be-d79f8986f229"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module test.com

go 1.20
</code></pre></div></div>
</li></ul>
<p>That's pretty much it. We will use this file to get the info we want.</p>
<h1 id="go-command">Go Command</h1>
<p>One thing that I learned recently is that we can actually get a JSON representation of or modules, workspaces, ... via the command line. To do that, we can run the following command:</p>
<div class="code_switcher_container_parent e05f2930-6981-48ee-aa50-ecbb7ed95077"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go mod edit <span class="nt">-json</span>
<span class="o">{</span>
  <span class="s2">"Module"</span>: <span class="o">{</span>
    <span class="s2">"Path"</span>: <span class="s2">"test.com"</span>
  <span class="o">}</span>,
  <span class="s2">"Go"</span>: <span class="s2">"1.20"</span>,
  <span class="s2">"Require"</span>: null,
  <span class="s2">"Exclude"</span>: null,
  <span class="s2">"Replace"</span>: null,
  <span class="s2">"Retract"</span>: null
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>And we have our JSON!</p>
<h1 id="parsing-json">Parsing JSON</h1>
<p>The only thing left to do is execute this command in our main, Unmarshal the JSON result and we should be able to get the version.</p>
<p>First, let's define the structs into which we will Unmarshal to.</p>
<ul class="code-tab-container 25b6cf9d-722f-40b3-ba82-aa926321953c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '25b6cf9d-722f-40b3-ba82-aa926321953c', 0)">main.go</a></li></ul><ul class="code-tab-switcher 25b6cf9d-722f-40b3-ba82-aa926321953c"><li class="code_switcher_container_parent active-tab code_switcher_go e70eb887-8d96-419d-b6b0-3c8a6edcc59e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Module</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Path</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">GoMod</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Module</span> <span class="n">Module</span>
  <span class="n">Go</span>     <span class="kt">string</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Notice here that I'm not taking Require, Exclude, ... into account. We only want the Go string.</p>
<p>After that, the rest is pretty easy. We can execute a command line and get its stdout result like so:</p>
<div class="code_switcher_container_parent 6f2f10cd-eb6f-4177-af5d-7d6e6dde8d28"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"mod"</span><span class="p">,</span> <span class="s">"edit"</span><span class="p">,</span> <span class="s">"-json"</span><span class="p">)</span><span class="o">.</span><span class="n">Output</span><span class="p">()</span>
</code></pre></div></div>
</div>
<p>I'm skipping the err handling here by dropping the error with _ but make sure to handle this for production-grade scripts.</p>
<p>And finally, we use <code>json.Unmarshal</code> function which takes the ouput of the command line, and the destination of where we want to populate the data. In our case, this is an instance of GoMod.</p>
<p>In the end, the main function looks like:</p>
<ul class="code-tab-container 848cf4e6-057b-4d92-b66f-238b225a350b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '848cf4e6-057b-4d92-b66f-238b225a350b', 0)">main.go</a></li></ul><ul class="code-tab-switcher 848cf4e6-057b-4d92-b66f-238b225a350b"><li class="code_switcher_container_parent active-tab code_switcher_go 5ec00e75-0007-43a1-a3c2-79b884e8339a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"encoding/json"</span>
  <span class="s">"fmt"</span>
  <span class="s">"os/exec"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Module</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Path</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">GoMod</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Module</span> <span class="n">Module</span>
  <span class="n">Go</span>     <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">mod</span> <span class="n">GoMod</span>
  <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"mod"</span><span class="p">,</span> <span class="s">"edit"</span><span class="p">,</span> <span class="s">"-json"</span><span class="p">)</span><span class="o">.</span><span class="n">Output</span><span class="p">()</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mod</span><span class="p">);</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">mod</span><span class="o">.</span><span class="n">Go</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We can run that, and we get:</p>
<div class="code_switcher_container_parent add60760-071f-47c2-ad4f-37b615aa5e85"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run main.go
1.20
</code></pre></div></div>
</div>
<p>We now have our Go version at runtime and we can use it for logging, selecting features, ...</p>
<h1 id="the-problem">The Problem</h1>
<p>Obviously, what we saw is far from great. What if we compile our go project to binary and the go.mod is not around anymore. Well, basically it doesn't work.</p>
<p>I'm presenting to you this idea because combined with the right tool to build your project, you can actually embed the version inside your binary. This can be done with ldflags (check <a href="https://blog.alexellis.io/inject-build-time-vars-golang/">Alex Ellis blog post</a> on the subject). But this can also be done with Bazel and <a href="https://bazel.build/docs/user-manual#workspace-status">stamping</a>. If you are interested in knowing how to do that, let me know.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In this short post, we saw how to get the go version on which a go project is compiled at runtime. This can be used in multiple ways, but the use case that has come to me is mostly logging. I hope this is interesting for you.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><summary type="html"><![CDATA[Did you ever need to know, inside your program, on which go version you are running? That's what we are going to solve today. The most common use case for this is logging. We want to be able to debug by reproducing the environment of where the binary is running as close as possible. This starts by knowing which version of go we are using.]]></summary></entry><entry><title type="html">Go Monorepos - Intro</title><link href="https://clement-jean.github.io/go-monorepos-intro/" rel="alternate" type="text/html" title="Go Monorepos - Intro" /><published>2023-03-16T00:00:00+08:00</published><updated>2023-03-16T00:00:00+08:00</updated><id>https://clement-jean.github.io/go-monorepos-intro</id><content type="html" xml:base="https://clement-jean.github.io/go-monorepos-intro/"><![CDATA[<p>Recently I've discovered two interesting was in creating monorepos for go projects. In this article we are going to talk about the advantages and disadvantages of each of these techniques.</p>
<p>This article is an introduction. I will skip over details here because the setup is generally dependent on the technologies you use. <strong>If this article makes you want to know more about the subject, I invite you to tell me with which technology I should set a monorepo for (e.g. gRPC)</strong>.</p>
<h1 id="go-workspaces">Go Workspaces</h1>
<p>The first of these techniques are using Go workspaces. This is nice to be able to do that without any other technology than Go. The goal here is basically to create submodules and link them to the workspace. Let's see an example.</p>
<p>Let's say that we have a server and a client. We will then have the following file architecture:</p>
<div class="code_switcher_container_parent 99bf61b4-6a26-4eb3-a1df-1ae6c517318b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>.
├── client
└── server
</code></pre></div>
<p>with that we can start initializing our modules. You can either go into each folder and run <code>go mod init &lt;module_name&gt;</code>, or you can automatize the process and run something like:</p>
<ul class="code-tab-container 745f3aa7-e3e9-4310-9002-757478de7413"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '745f3aa7-e3e9-4310-9002-757478de7413', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '745f3aa7-e3e9-4310-9002-757478de7413', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 745f3aa7-e3e9-4310-9002-757478de7413"><li class="code_switcher_container_parent active-tab code_switcher_shell 1ba79517-8fc8-4833-ad1d-66552310b9b1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d <span class="nt">-not</span> <span class="nt">-path</span> <span class="nb">.</span> <span class="nt">-execdir</span> sh <span class="nt">-c</span> <span class="s2">"pushd {}; go mod init '&lt;module_name&gt;/{}'; popd"</span> <span class="s2">";"</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell fd53595b-005a-482f-98f9-74685594f301"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-ChildItem <span class="nb">.</span> <span class="nt">-Name</span> <span class="nt">-Directory</span> | ForEach-Object <span class="o">{</span> Push-Location <span class="nv">$_</span><span class="p">;</span> go mod init <span class="s2">"&lt;module_name&gt;/</span><span class="nv">$_</span><span class="s2">"</span> <span class="p">;</span> Pop-Location <span class="o">}</span>
</code></pre></div></div>
</li></ul>
<p>These commands will enter each directory, run <code>go mod init</code>, and get out of the directories. <strong>Be careful though, if you have other folders that you don't want to use as modules, you will have to create more complex commands</strong>.</p>
<p>Once we have this, we can create our workspace. To do that, we simply run:</p>
<div class="code_switcher_container_parent e7d5e560-367f-452c-b7de-f1287be81812"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go work init client server
</code></pre></div></div>
</div>
<p>And that's basically it. Client and Server and individual projects that can have their own set of dependencies and you can run each of them at the root folder by running:</p>
<div class="code_switcher_container_parent 926c7f5a-0b50-4f53-9552-1275fccdb187"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run ./server
</code></pre></div></div>
</div>
<p>and</p>
<div class="code_switcher_container_parent c1ec2060-9c0b-43f8-a9f1-92abddd85589"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run ./client
</code></pre></div></div>
</div>
<h2 id="advantages">Advantages</h2>
<ul>
<li>This is pretty low-tech. We only need Go.</li>
<li>Pretty quick setup for new projects.</li>
<li>Each of the module can get their own dependencies and they can also share some.</li>
</ul>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>All the subprojects need to be written in Go for it to work as intended.</li>
<li>Setup for already existing and complex projects might be hard.</li>
</ul>
<h1 id="bazel">Bazel</h1>
<p>Because setting up a project in Bazel is highly dependent on which technology you want to use, I will not go into to much details here. But the idea with Bazel is that we can have the same kind of monorepo as we saw but we can do this is multi-languages.</p>
<p>If we have a client written in JS and a backend written in Go, we will have a BUILD.bazel file for each subprojects defining how to build each part of the projects. And at the root level we will have a WORKSPACE.bazel file which describes all the build dependencies.</p>
<p>Finally, if you are working with Go modules, <a href="https://github.com/bazelbuild/bazel-gazelle">Gazelle</a> (a BUILD.bazel file generator) can help you write all the build boilerplate for you and let you focus on your code.</p>
<h2 id="advantages-1">Advantages</h2>
<ul>
<li>Once it is set up, it is very efficient to run commands.</li>
<li>Multi-language monorepos.</li>
<li>Setup for already existing and complex projects is easier with Gazelle. Note that this is only for Go.</li>
</ul>
<h2 id="disadvantages-1">Disadvantages</h2>
<ul>
<li>Harder upfront cost for setup.</li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we got an overview of two ways of building monorepos in Go or in multi-language setups. We saw that when we have a newer project we can use Go Workspaces as this is a low-tech way of starting building a monorepo. However, if we decide to have a multi-language setup we will have to move to Bazel. <strong>There are obviously more choices to be made depending on the kind of project you are making and that's why I want your feedback on what I should build</strong>.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="Bazel" /><summary type="html"><![CDATA[Recently I've discovered two interesting was in creating monorepos for go projects. In this article we are going to talk about the advantages and disadvantages of each of these techniques.]]></summary></entry><entry><title type="html">Protein: Parser (Part 1)</title><link href="https://clement-jean.github.io/protein_parser_part_1/" rel="alternate" type="text/html" title="Protein: Parser (Part 1)" /><published>2023-03-09T00:00:00+08:00</published><updated>2023-03-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_parser_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_parser_part_1/"><![CDATA[<p>In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!</p>
<h2 id="boilerplate">Boilerplate</h2>
<p>As always, we need to think a little bit before to actually write the features themselves. The first thing that we can do to get us started is to write the Parser interface.</p>
<ul class="code-tab-container 23e8ee35-b7ed-4b72-8c83-e42ba42ff015"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '23e8ee35-b7ed-4b72-8c83-e42ba42ff015', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher 23e8ee35-b7ed-4b72-8c83-e42ba42ff015"><li class="code_switcher_container_parent active-tab code_switcher_go d85a2e8f-04bb-4108-92f6-e3d17e83a048"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns ???</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="err">???</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This doesn't seem like a fancy interface but we do have a problem. What is our parser returning when finished? Well, it should return an AST, right? But how do we represent this AST. It turns out, we have two good possibilities:</p>
<ul>
<li>We roll our own serializable AST where each object is a Protobuf Message.</li>
<li>We use the descriptor.proto file which defines Messages for describing elements in a Protobuf file.</li>
</ul>
<p>Both have pros and cons. If we go with the first one we have more control over our serialization. It means that we can optimize some elements' serialized data. However, it also means that we are not compatible with the official way and that's not good.
For the &quot;using the official serialization&quot;, I think you get the idea. We have the pros being the cons of the other implementation, and the cons being the pros of the other implementation.</p>
<p>In the end, for the sake of compatibility, I will be sacrificing some performance. However, these performances are only saving a few bytes and having compatibility with programs serialized by protoc far overweights them.</p>
<h3 id="depending-on-protobuf">Depending on Protobuf</h3>
<p>To use the descriptor, we are going to depend on Protobuf's library. To do that we are going to add in our dependency:</p>
<div class="code_switcher_container_parent 5872d4aa-21aa-49b8-af24-d4f181a4b82e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go get google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>This will let us access <code>descriptorpb</code> package, which contains the <code>FileDescriptorProto</code> struct. If you look at the definition of that struct, you will see the following comment:</p>
<div class="code_switcher_container_parent 49db826f-abb2-4e60-87e5-50e3f7fa20fc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Describes a complete .proto file.</span>
<span class="k">type</span> <span class="n">FileDescriptorProto</span> <span class="k">struct</span>
</code></pre></div></div>
</div>
<p>That's exactly what we are trying to do.</p>
<h3 id="back-to-interface">Back to interface</h3>
<p>With that dependency on Protobuf, we can now finish our interface:</p>
<ul class="code-tab-container 97a857ed-e8b1-49ce-a3b6-1c061232f81c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '97a857ed-e8b1-49ce-a3b6-1c061232f81c', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher 97a857ed-e8b1-49ce-a3b6-1c061232f81c"><li class="code_switcher_container_parent active-tab code_switcher_go f6230127-4347-44ab-b246-81e9b4ad4804"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns the representation of a file in Protobuf Descriptor</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementation">Implementation</h2>
<p>Let's now implement the interface. But by now you know the drill. We are going to create a minimal implementation so that our first test fails. So what we need is an <code>Impl</code> struct and we need to implement <code>Parser</code> by writing the <code>Parse</code> function.</p>
<p>For now, the <code>Parse</code> function will simply return an empty <code>FileDescriptorProto</code>.</p>
<ul class="code-tab-container 240f1638-dfa0-4768-8685-9b849c08e836"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '240f1638-dfa0-4768-8685-9b849c08e836', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 240f1638-dfa0-4768-8685-9b849c08e836"><li class="code_switcher_container_parent active-tab code_switcher_go 7130c61b-256c-41f5-ba52-17e8b23a9da1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="c">// Impl is the implementation for the Parser interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
<span class="p">}</span>

<span class="c">// New creates a new instance of the Parser</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>

<span class="c">// Parse populates a FileDescriptorProto</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>
  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="first-test">First test</h3>
<p>As our first test we are going to create the test for a syntax statement. This test will take advantage of the fact that <code>Lexer</code> is an interface by creating a <code>FakeLexer</code>. This fake lexer will simply iterate over an array of tokens and return them one by one.</p>
<ul class="code-tab-container 685034b7-0d51-4c5f-92e8-08fc50737abc"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '685034b7-0d51-4c5f-92e8-08fc50737abc', 0)">parser/parser_test.go</a></li></ul><ul class="code-tab-switcher 685034b7-0d51-4c5f-92e8-08fc50737abc"><li class="code_switcher_container_parent active-tab code_switcher_go 21ac051b-817f-4f41-a006-53c876ccd10a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">FakeLexer</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">i</span>      <span class="kt">int</span>
  <span class="n">tokens</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">FakeLexer</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}}</span>
  <span class="p">}</span>

  <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="o">++</span>
  <span class="k">return</span> <span class="n">token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This basically means that each time we are running a test in the parser, we are not going to run the lexer code. We are going to simply focus on our current features. So, if we encounter a bug, it means that it is in the parser, not anywhere else.</p>
<p>With that, we can write our first test for <code>syntax = &quot;proto3&quot;;</code>.</p>
<ul class="code-tab-container 6a26657c-3349-451d-9fa3-3afe154f22a5"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6a26657c-3349-451d-9fa3-3afe154f22a5', 0)">parser/parser_syntax_test.go</a></li></ul><ul class="code-tab-switcher 6a26657c-3349-451d-9fa3-3afe154f22a5"><li class="code_switcher_container_parent active-tab code_switcher_go 38b38974-f87b-4940-8cce-c396edfc34fa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseSyntaxProto3</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"syntax"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"="</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">proto3</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"proto3"</span>

  <span class="k">if</span> <span class="n">syntax</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetSyntax</span><span class="p">();</span> <span class="n">syntax</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"syntax wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">syntax</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent 8781424e-ca6b-4b82-9ff9-c405bced37b5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseSyntaxProto3 <span class="o">(</span>0.00s<span class="o">)</span>
    parser_syntax_test.go:22: syntax wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'proto3'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<h3 id="parsing">Parsing</h3>
<p>We should now improve the <code>Parse</code> function to consume the <code>Lexer</code>'s tokens and do things with that. Here is the pseudo code:</p>
<div class="code_switcher_container_parent cb24a027-af57-4b23-85fa-b3457b0ca02d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">Identifier</span> <span class="p">{</span>
    <span class="n">fn</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span> <span class="c">// find the function depending on keyword</span>
    <span class="n">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">descriptor</span><span class="p">)</span> <span class="c">// populate the descriptor</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>You notice that we need a <code>currToken</code> representing the current token being parsed. We will also need the peek token for parsing syntax and other statements. This is because we are going to make sure each time that the peek token is correct, otherwise we will return an error. So <code>Impl</code> now has a <code>currToken</code> and <code>peekToken</code>:</p>
<ul class="code-tab-container c09de943-8747-4ff1-b141-adf1c2a1822f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c09de943-8747-4ff1-b141-adf1c2a1822f', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher c09de943-8747-4ff1-b141-adf1c2a1822f"><li class="code_switcher_container_parent active-tab code_switcher_go bb5466c3-a6dd-4e64-8900-69113da15d7b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
  <span class="n">curToken</span>  <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
  <span class="n">peekToken</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now, we need to populate these tokens before being able to use them. The first time we need to initialize them is in the <code>New</code> function.</p>
<ul class="code-tab-container 0f217550-4d18-43bf-aaba-6d82deb5f274"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '0f217550-4d18-43bf-aaba-6d82deb5f274', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 0f217550-4d18-43bf-aaba-6d82deb5f274"><li class="code_switcher_container_parent active-tab code_switcher_go 715ebc1a-dbd0-4f85-80ee-74bd9fc7e9db"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But <code>nextToken</code> is not the <code>Lexer.NextToken</code>, this is a private function in <code>Parser</code>. This is a function that looks for the next non-space token.</p>
<ul class="code-tab-container e7f99c6e-a2bc-4a03-8484-f749d557f951"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e7f99c6e-a2bc-4a03-8484-f749d557f951', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher e7f99c6e-a2bc-4a03-8484-f749d557f951"><li class="code_switcher_container_parent active-tab code_switcher_go c8236fac-11ad-48c6-a171-e494ad3bcabe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">nextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">();</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can start updating our <code>Parse</code> function.</p>
<ul class="code-tab-container 26774bff-6186-4699-a8e1-ff30f560e975"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '26774bff-6186-4699-a8e1-ff30f560e975', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 26774bff-6186-4699-a8e1-ff30f560e975"><li class="code_switcher_container_parent active-tab code_switcher_go 1b595bee-5b39-421e-b2fe-e65a5d5d8974"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="c">//Do something with token</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Finally, we are going to register all the parsing functions that we are gonna write in this and next articles. We are going to have a map mapping &quot;syntax&quot; to parseSyntax, ...</p>
<ul class="code-tab-container 6f08fa97-3ecf-40b8-bfbd-28b5e45a35eb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6f08fa97-3ecf-40b8-bfbd-28b5e45a35eb', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 6f08fa97-3ecf-40b8-bfbd-28b5e45a35eb"><li class="code_switcher_container_parent active-tab code_switcher_go 2e69ec51-3f94-40d4-8b96-f6a73d7f5003"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With this we can finalize the <code>Parse</code> function by looking at the relevant function for the <code>currToken.Literal</code>.</p>
<ul class="code-tab-container e6f2f3ed-8d5e-4148-a682-b27c2721ca7c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e6f2f3ed-8d5e-4148-a682-b27c2721ca7c', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher e6f2f3ed-8d5e-4148-a682-b27c2721ca7c"><li class="code_switcher_container_parent active-tab code_switcher_go b8df1408-19d3-439f-b84c-459e6c6fed57"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="n">fn</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span> <span class="c">// keyword not found</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="n">fn</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="parsesyntax">parseSyntax()</h3>
<p>Before actually parsing a syntax statement, we need two helper functions: <code>accept</code> and <code>acceptPeek</code>. <code>acceptPeek</code> will just call <code>accept</code> with the <code>peekToken.Type</code>. <code>accept</code> take a <code>TokenType</code> and checks if it exists in the following variadic arguments.</p>
<ul class="code-tab-container 218508c3-a399-421d-96e3-610aa9ed9e42"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '218508c3-a399-421d-96e3-610aa9ed9e42', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 218508c3-a399-421d-96e3-610aa9ed9e42"><li class="code_switcher_container_parent active-tab code_switcher_go c0459f3a-bb79-4132-b0e4-d3ee28755ee0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">original</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">,</span> <span class="n">expected</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">slices</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">original</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// TODO: add error</span>
    <span class="k">return</span> <span class="no">false</span>
  <span class="p">}</span>

  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>

<span class="c">// acceptPeek returns true and advance token</span>
<span class="c">// if tt contains the peekToken.Type</span>
<span class="c">// else it returns false</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptPeek</span><span class="p">(</span><span class="n">tt</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">tt</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now we ready for our <code>parseSyntax</code> function. We are first going to check that we have an <code>=</code> after syntax. Then we check that we have a String, if it’s the case we are going to take the value inside the quotes. And finally, we are going to check that there is a semicolon at the end of the statement.</p>
<ul class="code-tab-container c8713756-d94e-4851-9d27-2cf05de68892"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c8713756-d94e-4851-9d27-2cf05de68892', 0)">parser/syntax.go</a></li></ul><ul class="code-tab-switcher c8713756-d94e-4851-9d27-2cf05de68892"><li class="code_switcher_container_parent active-tab code_switcher_go a1bc564a-b37e-43e3-977c-0c20c62a7095"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseSyntax</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The <code>destringify</code> function looks like the following:</p>
<ul class="code-tab-container da156043-8549-4b04-b89e-fc34eca89d18"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'da156043-8549-4b04-b89e-fc34eca89d18', 0)">parser/utils.go</a></li></ul><ul class="code-tab-switcher da156043-8549-4b04-b89e-fc34eca89d18"><li class="code_switcher_container_parent active-tab code_switcher_go ee30d817-95e7-4561-92a9-5d2952f763b3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="s">"strings"</span>

<span class="k">func</span> <span class="n">destringify</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">TrimFunc</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">r</span> <span class="kt">rune</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As mentioned, it takes the values between the quotes.</p>
<p>With our <code>parseSyntax</code> finished, we can rerun the test and:</p>
<div class="code_switcher_container_parent fbd6b7a6-9e29-4ab5-9b3f-dda25ed8ea38"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  1.361s
</code></pre></div></div>
</div>
<h3 id="parseimport">parseImport()</h3>
<p><code>parseImport</code> is really similar to <code>parseSyntax</code>. However, with imports, we get introduced to optional keywords. An import can be written in 3 ways:</p>
<ul>
<li><code>import &quot;my.proto&quot;;</code></li>
<li><code>import public &quot;my.proto&quot;;</code></li>
<li><code>import weak &quot;my.proto&quot;;</code></li>
</ul>
<p>Let's write the tests:</p>
<ul class="code-tab-container db9e6e52-a1d1-4ad9-b48f-3c4ca681290c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'db9e6e52-a1d1-4ad9-b48f-3c4ca681290c', 0)">parser/parser_import_test.go</a></li></ul><ul class="code-tab-switcher db9e6e52-a1d1-4ad9-b48f-3c4ca681290c"><li class="code_switcher_container_parent active-tab code_switcher_go adbda536-a8a9-4dba-b30c-37c58d5191f7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePublicImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"public"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParseWeakImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"weak"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent 4942d746-6db3-4d2f-8d07-f4ed2e85b517"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:25: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParsePublicImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:52: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParseWeakImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:79: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
FAIL
</code></pre></div></div>
</div>
<p>Even though the 2nd and 3rd one are rarely used, we still need to support them. To do so, we are going to need to create an enum called <code>DependencyType</code> which will have the variants: None, Public, and Weak. After that, we are going to check if we have an identifier and depending on the <code>Literal</code>, we are going to return the type.</p>
<ul class="code-tab-container 3e6472c5-08ce-4f4b-9d8f-2d6350fe0f58"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '3e6472c5-08ce-4f4b-9d8f-2d6350fe0f58', 0)">parser/import.go</a></li></ul><ul class="code-tab-switcher 3e6472c5-08ce-4f4b-9d8f-2d6350fe0f58"><li class="code_switcher_container_parent active-tab code_switcher_go 427543e3-85f9-4a4c-b4e7-39f806f3c4ef"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"fmt"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">DependencyType</span> <span class="kt">int</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">None</span> <span class="n">DependencyType</span> <span class="o">=</span> <span class="no">iota</span>
  <span class="n">Public</span>
  <span class="n">Weak</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseImport</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">DependencyType</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="n">depType</span> <span class="o">:=</span> <span class="n">None</span>

  <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"public"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Public</span>
    <span class="k">case</span> <span class="s">"weak"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Weak</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// TODO: add error</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">depType</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And the last thing we need to do is register that to the <code>parseFuncs</code>.</p>
<ul class="code-tab-container 6f40c650-3dda-4f39-b89c-2c9d93d7f916"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6f40c650-3dda-4f39-b89c-2c9d93d7f916', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 6f40c650-3dda-4f39-b89c-2c9d93d7f916"><li class="code_switcher_container_parent active-tab code_switcher_go bca6fa39-ef8d-4868-a27e-635548a69eaf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We basically append the dependency and if we have a public or weak dependency we add its index into <code>PublicDependency</code> and <code>WeakDependency</code> respectively.</p>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent 6a785660-e36b-4ecc-be49-6a15f4bfee16"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.450s
</code></pre></div></div>
</div>
<h3 id="parsepackage">parsePackage()</h3>
<p>Once again this function is pretty similar. The main difference is that we are going to look for identifiers and fully qualified names (identifiers separated by dots).</p>
<p>Let's write some tests.</p>
<ul class="code-tab-container 81290fc5-a321-42bd-8f1b-acb5f8eff4e0"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '81290fc5-a321-42bd-8f1b-acb5f8eff4e0', 0)">parser/parser_package_test.go</a></li></ul><ul class="code-tab-switcher 81290fc5-a321-42bd-8f1b-acb5f8eff4e0"><li class="code_switcher_container_parent active-tab code_switcher_go a865cfb2-871f-4d11-b21b-e833ba94f936"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParsePackage</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePackageFullIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"protobuf"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google.protobuf"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Let's fail our tests:</p>
<div class="code_switcher_container_parent 0d22f64f-00c9-40df-8c7a-9b1cdd1742fe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParsePackage <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:21: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
<span class="nt">---</span> FAIL: TestParsePackageFullIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:39: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google.protobuf'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<p>And now we can implement the <code>parsePackage</code> function. We are going to check that we have at least one identifier, and then if we have a dot we are going to make sure that we have another identifier after. Finally, we will be looking for the semicolon.</p>
<ul class="code-tab-container 9f078ced-f258-4128-a4cc-4467a55b572a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '9f078ced-f258-4128-a4cc-4467a55b572a', 0)">parser/package.go</a></li></ul><ul class="code-tab-switcher 9f078ced-f258-4128-a4cc-4467a55b572a"><li class="code_switcher_container_parent active-tab code_switcher_go 51c78056-1f16-4435-a069-b8c3eddc1a60"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"strings"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parsePackage</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">var</span> <span class="n">parts</span> <span class="p">[]</span><span class="kt">string</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">nil</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">s</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="s">"."</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The last thing to do is to register this function in our <code>parseFuncs</code>.</p>
<ul class="code-tab-container b236a27b-5ce3-4e74-b3e4-cbf2a7ed11bb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b236a27b-5ce3-4e74-b3e4-cbf2a7ed11bb', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher b236a27b-5ce3-4e74-b3e4-cbf2a7ed11bb"><li class="code_switcher_container_parent active-tab code_switcher_go 1daa2def-36a1-426d-ae04-d2c0d6b8572c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"package"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Package</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parsePackage</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and we rerun our tests.</p>
<div class="code_switcher_container_parent 16d666f3-2087-42e5-ac92-91d07146f946"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.847s
</code></pre></div></div>
</div>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we created our first three parsing functions. We parsed syntax, package and imports. We are now ready to go more complicated statements.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <!-- <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Next Article</a>
    </div> -->
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!]]></summary></entry><entry><title type="html">Protein: Lexer (Part 3)</title><link href="https://clement-jean.github.io/protein_lexer_part_3/" rel="alternate" type="text/html" title="Protein: Lexer (Part 3)" /><published>2023-03-03T00:00:00+08:00</published><updated>2023-03-03T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_3</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_3/"><![CDATA[<p>This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.</p>
<h2 id="position-checking">Position Checking</h2>
<p>Adding position checking in our test is pretty trivial since it's 3 ifs checking <code>Offset</code>, <code>Line</code>, and <code>Column</code>. So let's add that:</p>
<ul class="code-tab-container 51af6ff5-db4c-4434-b1ab-502aa53be5cd"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '51af6ff5-db4c-4434-b1ab-502aa53be5cd', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 51af6ff5-db4c-4434-b1ab-502aa53be5cd"><li class="code_switcher_container_parent active-tab code_switcher_go 96a5f66f-4e58-4a95-80cc-bf9c7d2d7bc4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="c">//...</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - offset wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - line wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - column wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now if we run our tests, we should have a lot of errors coming from the fact that Go will initialize <code>Offset</code>, <code>Line</code>, and <code>Column</code> to 0 (default value). An example of error received is:</p>
<div class="code_switcher_container_parent 484bc232-cdc9-4548-a4af-c93d4a72510f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:31: tests[0] - line wrong. <span class="nv">expected</span><span class="o">=</span>0, <span class="nv">got</span><span class="o">=</span>1
FAIL
</code></pre></div></div>
</div>
<blockquote>
<p>Before going to the new section, make sure that you update the position objects in your tests. If you are not willing to calculate all of the positions, you can just refer to the <a href="https://github.com/Clement-Jean/protein/blob/lexer/lexer/lexer_test.go">tests in the github repo</a> where I did it for you.</p>
</blockquote>
<h2 id="a-bug-">A bug ?!</h2>
<p>Now that we have all our positions set, we can rerun our tests.</p>
<div class="code_switcher_container_parent 9a599b57-c28b-44ea-b146-3e9cd7bb9102"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:35: tests[1] - column wrong. <span class="nv">expected</span><span class="o">=</span>4, <span class="nv">got</span><span class="o">=</span>0
FAIL
</code></pre></div></div>
</div>
<p>And yes we have an error. Let's understand it.</p>
<p>The problem here comes from the way we handle newlines in the <code>emit</code> function. As of right now, this is done like so:</p>
<ul class="code-tab-container 598fa74f-baee-4aa7-b994-c82a82e5f21e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '598fa74f-baee-4aa7-b994-c82a82e5f21e', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 598fa74f-baee-4aa7-b994-c82a82e5f21e"><li class="code_switcher_container_parent active-tab code_switcher_go b64f6d23-41df-4334-bdbc-9b27e73c8270"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This code is checking for a newline inside the literal and if it finds one, it will just set the index of <code>\n</code> in the literal to startLineOffset. The problem here is that we handle all consecutive spaces (the general term) as one token. So when we have <code>\t\n\v\f\r</code>, we are effectively saying that the line starts at the beginning our our space token. This is not correct, right? We should be setting <code>startLineOffset</code> to 2 (just after <code>\n</code>) and then this should affect the <code>Column</code> position because of <code>Column: l.start - l.startLineOffset</code> in the <code>Token</code> instantiation in <code>emit</code>.</p>
<p>So how do we solve that? Well, it turns out to be pretty simple. We are going to look for the last instance of <code>\n</code> in the literal and this will give us the beginning of the line. After that we are going to take the current position (which is after the token right now) and subtract it with the length of the literal minus the beginning of the line. This gives us the offset at which the line begins. So now we should have this:</p>
<ul class="code-tab-container a5a6bcc9-6a8e-40ff-b30d-8a81343117c1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a5a6bcc9-6a8e-40ff-b30d-8a81343117c1', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a5a6bcc9-6a8e-40ff-b30d-8a81343117c1"><li class="code_switcher_container_parent active-tab code_switcher_go ea4283a3-c0f9-4d8a-a758-7422634e599a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">lineStart</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">LastIndex</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> <span class="n">lineStart</span> <span class="o">!=</span> <span class="o">-</span><span class="m">1</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span> <span class="o">-</span> <span class="n">lineStart</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Note that we are only finding the last index when the token kind is a space. This is important because if we do that for all the tokens we will have performance hits (especially on large tokens).</p>
<p>And now, if we rerun our test:</p>
<div class="code_switcher_container_parent f62ef98c-56dc-4d10-9ce9-981a19debac6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.857s
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we made the final test for our lexer and we solved a critical bug for <code>Token</code> positions. We now have a functional lexer and in the next article we are going to start the parser!</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_2" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_parser_part_1" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.]]></summary></entry><entry><title type="html">Protein: Lexer (Part 2)</title><link href="https://clement-jean.github.io/protein_lexer_part_2/" rel="alternate" type="text/html" title="Protein: Lexer (Part 2)" /><published>2023-02-20T00:00:00+08:00</published><updated>2023-02-20T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_2</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_2/"><![CDATA[<p>In this article we are going to delve into the second part of the lexing which is tokenizing more advanced part of the input. More precisely, we are going to lex spaces (whitespaces, new lines, ...), comments, Identifiers, Numbers (Int and Float), and Strings. At the end of this article, we will have a fully functioning lexer that can tokenize the <code>descriptor.proto</code> which is the longest proto file in the protobuf repo. Let's get started.</p>
<blockquote>
<p>Note: While this article is designed in a way that shows the evolution of the Lexer, you might still want to look at <a href="https://github.com/Clement-Jean/protein/commits/lexer">the commits</a> in order to see where any piece of code went.</p>
</blockquote>
<h2 id="spaces">Spaces</h2>
<p>Up until now, we assumed that all the characters that we would encounter were symbols. We are now going to add whitespaces, new lines, ... on top of that. Now, one thing to note here is that in traditional lexer, spaces will be discarded and are not counted as tokens. In our case, since the <a href="https://protobuf.dev/programming-guides/style/">Protobuf Style Guide</a> mentions that we should use an indent of 2 spaces, we are going to need that information. Before doing tokenizing spaces, we are going to need to more helper functions:</p>
<ul>
<li><code>backup</code>: Goes back by one utf8 character.</li>
<li><code>peek</code>: Check the next utf8 character without advancing the reading position.</li>
</ul>
<p><code>peek</code> is very similar to next because we are checking that we are still within the limits of our input and we read the character at <code>lexer.pos</code>. However, because we are just looking ahead and not advancing in the input, we are not going to update the <code>lexer.pos</code>.</p>
<ul class="code-tab-container b63ea04b-a0f6-4e9b-bcb9-33afed361c31"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b63ea04b-a0f6-4e9b-bcb9-33afed361c31', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher b63ea04b-a0f6-4e9b-bcb9-33afed361c31"><li class="code_switcher_container_parent active-tab code_switcher_go 8e1846dc-f203-4e93-adfb-f6f04c77648a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">peek</span><span class="p">()</span> <span class="kt">rune</span> <span class="p">{</span>
  <span class="k">if</span> <span class="kt">int</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">r</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="o">:</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">r</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and <code>backup</code> is pretty simple. We are going to read the last character before <code>lexer.pos</code> and update the reading position by the size of that utf8 character. Furthermore, since in the <code>next</code> function we added <code>l.line++</code> when we have a new line, we are going to need backing that up too. So we are going to decrease <code>lexer.line</code> when we encounter a newline.</p>
<ul class="code-tab-container faff7ef9-73ed-4208-babb-b27c154eec4e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'faff7ef9-73ed-4208-babb-b27c154eec4e', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher faff7ef9-73ed-4208-babb-b27c154eec4e"><li class="code_switcher_container_parent active-tab code_switcher_go 8dd58c53-082b-4844-8071-a050c09f5493"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">backup</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">l</span><span class="o">.</span><span class="n">atEOF</span> <span class="o">&amp;&amp;</span> <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">r</span><span class="p">,</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeLastRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="o">:</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">])</span>
    <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">-=</span> <span class="n">w</span>

    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">line</span><span class="o">--</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As always, we want to add a test for our function that is skipping spaces. Now, it is important to understand that we are not only interested of whitespaces. We also want to 'skip' other non-printable characters such as '\t', '\r', '\n', ... For that we are going to use the <code>unicode.IsSpace</code> from the Go standard library. So our test, should contain these different characters.</p>
<ul class="code-tab-container 7296e10c-3e6e-40b9-9f02-eb5f727577c9"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '7296e10c-3e6e-40b9-9f02-eb5f727577c9', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 7296e10c-3e6e-40b9-9f02-eb5f727577c9"><li class="code_switcher_container_parent active-tab code_switcher_go ec4b143a-f956-4050-86cc-194f12d25b8a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">TestNextTokenOnSpace</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"</span><span class="se">\t\n\v\f\r</span><span class="s"> "</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">"</span><span class="se">\t\n\v\f\r</span><span class="s"> "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously, if we run this we will get the following:</p>
<div class="code_switcher_container_parent 62e5b0a2-5781-48c7-9529-fcdfa342799f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Space"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Now that we have our test, <code>backup</code> and <code>peek</code>, we can write our <code>lexSpaces</code> function. This is a function that loops until we find a non-space character as peek and return a Token for that space.</p>
<ul class="code-tab-container 1e35a91a-5774-49bf-8f56-e3a883356b80"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1e35a91a-5774-49bf-8f56-e3a883356b80', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 1e35a91a-5774-49bf-8f56-e3a883356b80"><li class="code_switcher_container_parent active-tab code_switcher_go 6072670a-d613-48ae-8a7e-ea2c7ed3e967"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">lexSpaces</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsSpace</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenSpace</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This <code>lexSpaces</code> function will now need to be placed in our <code>lexProto</code> switch in order to be taken into consideration.</p>
<ul class="code-tab-container 763a7574-d8d8-4092-868a-8d2edf6c272f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '763a7574-d8d8-4092-868a-8d2edf6c272f', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 763a7574-d8d8-4092-868a-8d2edf6c272f"><li class="code_switcher_container_parent active-tab code_switcher_go 6513191a-5f5a-44fb-9259-25875a643210"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">unicode</span><span class="o">.</span><span class="n">IsSpace</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span> <span class="c">// go back by one character</span>
    <span class="k">return</span> <span class="n">lexSpaces</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and that's basically it! We run our test and we get:</p>
<div class="code_switcher_container_parent fdcab3aa-3a3e-4696-898b-399823e53fa9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.235s
</code></pre></div></div>
</div>
<h2 id="comments">Comments</h2>
<p>It turns out that we can lex comments with a similar technique as the one used for spaces. The only difference here is that we have two type of comment:</p>
<ul>
<li>Line comment: Starts with <code>//</code> and finishes at the end of the line.</li>
<li>Multiline comment: Starts with <code>/*</code> and finishes with <code>*/</code>.</li>
</ul>
<h3 id="line-comment">Line comment</h3>
<p>We are going to start with the line comment. This is very similar to <code>lexSpaces</code>. The major difference is that we are going to check for '\n' or EOF for finishing the comment. Finally, we are going to return a Token.</p>
<p>But before all that, let's write two tests. One that checks that we are skipping until '\n' and the other that checks that we are skipping until EOF.</p>
<ul class="code-tab-container 1ce0f88d-4dc3-4558-a229-461faec9b5cd"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1ce0f88d-4dc3-4558-a229-461faec9b5cd', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 1ce0f88d-4dc3-4558-a229-461faec9b5cd"><li class="code_switcher_container_parent active-tab code_switcher_go a1533225-1549-4992-8b1f-1f32a4515b6e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">TestNextTokenOnLineCommentWithEOF</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"//this is a comment"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"//this is a comment"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnLineCommentWithNewLine</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"//this is a comment</span><span class="se">\n</span><span class="s">_"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"//this is a comment"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">19</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">19</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">20</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">20</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We fail to pass, once again:</p>
<div class="code_switcher_container_parent 66833059-a9bb-4a1d-b0f7-a3ae702ecbe7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnLineCommentWithEOF <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnLineCommentWithNewLine <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Let's now write our function.</p>
<ul class="code-tab-container 6938212d-ed6a-4475-a552-51fae48e7b63"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6938212d-ed6a-4475-a552-51fae48e7b63', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 6938212d-ed6a-4475-a552-51fae48e7b63"><li class="code_switcher_container_parent active-tab code_switcher_go 8e2c5389-e76e-469a-80f5-6c14fba0ba27"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="n">lexLineComment</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenComment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and run our tests:</p>
<div class="code_switcher_container_parent 9d1c559c-203b-4ec2-986c-cee027a05857"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.351s
</code></pre></div></div>
</div>
<p>We pass the Line Comment tests, let's go to the multiline comment.</p>
<h3 id="multiline-comment">Multiline Comment</h3>
<p>These comments are again pretty similar, however, like any other object that doesn't end with EOF we can have errors. The main error here is an unterminated comment. As an example, writing something like:</p>
<div class="code_switcher_container_parent 9039a982-493a-4536-b66d-9b78d1abd538"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/*</span><span class="n">this</span> <span class="n">is</span> <span class="n">a</span> <span class="n">comment</span>
</code></pre></div></div>
</div>
<p>should result in an error from the lexer.</p>
<p>To handle such errors, we are going to create a function that will basically stop the lexing process by emitting an Error Token and return nil as state.</p>
<ul class="code-tab-container e37a2c28-71bb-4cb7-94a7-1d9bf20c4051"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e37a2c28-71bb-4cb7-94a7-1d9bf20c4051', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher e37a2c28-71bb-4cb7-94a7-1d9bf20c4051"><li class="code_switcher_container_parent active-tab code_switcher_go f6f906b1-6aff-4855-b03d-0f5b30c6b7f1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">errorf</span><span class="p">(</span><span class="n">format</span> <span class="kt">string</span><span class="p">,</span> <span class="n">args</span> <span class="o">...</span><span class="n">any</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">l</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">Token</span><span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="n">args</span><span class="o">...</span><span class="p">),</span> <span class="n">Position</span><span class="p">{</span>
    <span class="n">Offset</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="p">,</span>
    <span class="n">Line</span><span class="o">:</span>   <span class="n">l</span><span class="o">.</span><span class="n">startLine</span><span class="p">,</span>
    <span class="n">Column</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span><span class="p">,</span>
  <span class="p">}}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="m">0</span>
  <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="m">0</span>
  <span class="n">l</span><span class="o">.</span><span class="n">src</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="o">:</span><span class="m">0</span><span class="p">]</span>
  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This is similar to what we did in emit, the only difference is that here the literal of a token is the error message and we reset the state of our lexer.</p>
<p>Now that we know the requirements for our lexer concerning comments, we can write some tests. Before that, though, as a matter of convenience, we are going to define constants for our error messages. This is done to avoid typos when writing tests:</p>
<ul class="code-tab-container 7b540775-584f-40cc-b70a-d83b9e245965"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '7b540775-584f-40cc-b70a-d83b9e245965', 0)">lexer/errors.go</a></li></ul><ul class="code-tab-switcher 7b540775-584f-40cc-b70a-d83b9e245965"><li class="code_switcher_container_parent active-tab code_switcher_go 627b5e0c-0c98-4f80-b903-137ea851f162"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">errorUnterminatedMultilineComment</span> <span class="o">=</span> <span class="s">"unterminated multiline comment"</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>and once this is done we can now have our tests:</p>
<ul class="code-tab-container a70528de-86e0-4c08-a81f-0912c4664c92"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a70528de-86e0-4c08-a81f-0912c4664c92', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher a70528de-86e0-4c08-a81f-0912c4664c92"><li class="code_switcher_container_parent active-tab code_switcher_go 7eff737d-d095-412e-ad04-7bbc7834301f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnMultilineComment</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"/*this is a comment*/_"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenComment</span><span class="p">,</span> <span class="s">"/*this is a comment*/"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">21</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">21</span><span class="p">}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">22</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">22</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnUnterminatedMultilineComment</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"/*this is a comment"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedMultilineComment</span><span class="p">,</span> <span class="n">Position</span><span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>we run:</p>
<div class="code_switcher_container_parent 603b14e6-f8a6-4354-a8be-ebcccba362f0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnMultilineComment <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Comment"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnUnterminatedMultilineComment <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>and we fail (we are used to it).</p>
<p><code>lexMultilineComment</code> is a little bit longer than the other functions we wrote for lexing. This is mostly due to the fact that we are checking for unterminated comment but also because we need to check that the current character is '/' and that the previous character was '*'. So we keep a reference to the previous character and check that for stopping the reading loop.</p>
<ul class="code-tab-container 56173119-976f-4722-b496-eb0ee1f494c7"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '56173119-976f-4722-b496-eb0ee1f494c7', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 56173119-976f-4722-b496-eb0ee1f494c7"><li class="code_switcher_container_parent active-tab code_switcher_go 7ab7677b-6c70-4972-8fe2-05afe4b68c97"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexMultilineComment</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">p</span> <span class="kt">rune</span>
  <span class="k">var</span> <span class="n">r</span> <span class="kt">rune</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">r</span>
    <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">errorf</span><span class="p">(</span><span class="n">errorUnterminatedMultilineComment</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">p</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenComment</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Once again this is very similar to <code>lexSpaces</code> and <code>lexLineComment</code>, isn't it?</p>
<p>Let's now place that in our <code>lexProto</code> function:</p>
<ul class="code-tab-container 9ab92469-9c3b-49fc-8352-7fd0a2d83867"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '9ab92469-9c3b-49fc-8352-7fd0a2d83867', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 9ab92469-9c3b-49fc-8352-7fd0a2d83867"><li class="code_switcher_container_parent active-tab code_switcher_go 1b96fda8-1b30-4555-9305-44e7655eea47"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="o">&amp;&amp;</span> <span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">()</span> <span class="o">==</span> <span class="sc">'*'</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexMultilineComment</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and our tests?</p>
<div class="code_switcher_container_parent 419a2480-e0ee-48fa-93bc-562ce4719a1e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.741s
</code></pre></div></div>
</div>
<h2 id="identifiers">Identifiers</h2>
<p>For identifiers, we need a way to keep going while we have a letter (capitalized or not), a number or an underscore. We are going to create a function called <code>acceptWhile</code> that does just that. We want to pass the set of possible characters to it and while the set contains the current value it will advance. Once we are done, we are going to use <code>backup</code> to make sure that the <code>lexer.pos</code> is just after the last character of the identifier.</p>
<p>Before we do that, though, it's testing time. We simply want to test that when we pass some text starting with a letter, <code>lexProto</code> will create an Identifier token.</p>
<ul class="code-tab-container b0552a42-bfa4-4fb1-b5b2-e6c00bf6a6e7"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b0552a42-bfa4-4fb1-b5b2-e6c00bf6a6e7', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher b0552a42-bfa4-4fb1-b5b2-e6c00bf6a6e7"><li class="code_switcher_container_parent active-tab code_switcher_go 3cd95beb-05bd-478c-908b-b6c25c23703e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"hello_world2023 HelloWorld2023"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="s">"hello_world2023"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="s">"HelloWorld2023"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We obviously fail the test:</p>
<div class="code_switcher_container_parent 2c0a5050-d8ee-4abc-9e4c-e2c20bc5faff"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Identifier"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>and now we can start our <code>acceptWhile</code> function:</p>
<ul class="code-tab-container 1e72b364-7f31-4611-b92a-64f23eaf929b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1e72b364-7f31-4611-b92a-64f23eaf929b', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 1e72b364-7f31-4611-b92a-64f23eaf929b"><li class="code_switcher_container_parent active-tab code_switcher_go 75b0d8bc-948a-4d0e-ab8d-1d586eb8ab5f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptWhile</span><span class="p">(</span><span class="n">valid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">strings</span><span class="o">.</span><span class="n">ContainsRune</span><span class="p">(</span><span class="n">valid</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">())</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That's it. Nothing more! A few lines of code and we can now simply write our <code>lexIdentifier</code>.</p>
<ul class="code-tab-container 82901123-c6a5-4fa1-be8e-b97c58198eb9"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '82901123-c6a5-4fa1-be8e-b97c58198eb9', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 82901123-c6a5-4fa1-be8e-b97c58198eb9"><li class="code_switcher_container_parent active-tab code_switcher_go 07a8d7da-2973-4c96-a20b-032584e2832e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexIdentifier</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_"</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenIdentifier</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and add that to the <code>lexProto</code>:</p>
<ul class="code-tab-container b51cc066-3480-4f9a-bd76-83eaa40f37c0"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b51cc066-3480-4f9a-bd76-83eaa40f37c0', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher b51cc066-3480-4f9a-bd76-83eaa40f37c0"><li class="code_switcher_container_parent active-tab code_switcher_go e7c88a23-76c9-42dd-b765-07d39a6d05e2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexIdentifier</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent 596cdf23-13e5-47ae-90f8-277b4b47f6ea"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.767s
</code></pre></div></div>
</div>
<h2 id="strings">Strings</h2>
<p>Before going the numbers, let's continue with something easy. Lexing strings is similar to what we did with multiline comments. We have a beginning and an end delimited by a certain character. In Protobuf, for strings, we can use single and double quotes. However, we cannot match a double quote with a single one. This means that having something like:</p>
<div class="code_switcher_container_parent 54ab4c84-4272-4af9-bede-f749fe9b387b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"test'
</span></code></pre></div></div>
</div>
<p>will result in a unterminated string.</p>
<p>Now that we know the requirements, let's write out tests.</p>
<ul class="code-tab-container 8755ec37-9dcb-47d2-a13d-7cccb494786f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8755ec37-9dcb-47d2-a13d-7cccb494786f', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 8755ec37-9dcb-47d2-a13d-7cccb494786f"><li class="code_switcher_container_parent active-tab code_switcher_go 5470ec88-1917-4548-b6bb-d1e92c6ad484"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"'test' </span><span class="se">\"</span><span class="s">test</span><span class="se">\"</span><span class="s">"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenStr</span><span class="p">,</span> <span class="s">"'test'"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenStr</span><span class="p">,</span> <span class="s">"</span><span class="se">\"</span><span class="s">test</span><span class="se">\"</span><span class="s">"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnUnterminatedString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"'test"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedQuotedString</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnMismatchedQuotesString</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"</span><span class="se">\"</span><span class="s">test'"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenError</span><span class="p">,</span> <span class="n">errorUnterminatedQuotedString</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>you notice the constant named <code>errorUnterminatedQuotedString</code>. It is similar to the error message we added for the multiline comment.</p>
<ul class="code-tab-container e6fcc92d-1a9b-42f3-895d-70b19d31ddc2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'e6fcc92d-1a9b-42f3-895d-70b19d31ddc2', 0)">lexer/errors.go</a></li></ul><ul class="code-tab-switcher e6fcc92d-1a9b-42f3-895d-70b19d31ddc2"><li class="code_switcher_container_parent active-tab code_switcher_go 3e4b74eb-58ca-477b-8bd7-ab40b5c6f81e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">errorUnterminatedMultilineComment</span> <span class="o">=</span> <span class="s">"unterminated multiline comment"</span>
  <span class="n">errorUnterminatedQuotedString</span>     <span class="o">=</span> <span class="s">"unterminated quoted string"</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>We obviously fail the test:</p>
<div class="code_switcher_container_parent e05353af-c7d9-4e46-8c08-14d4776aad2f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"String"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnUnterminatedString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnMismatchedQuotesString <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Error"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Ok, now we can write our <code>lexString</code>. We are going to write a function that first take notice of the character it currently is on. This character will be a single or double quote and we are going to need it to determine the end of our string. After that we are going to loop over the input and we are going to check for EOF (unterminated string) and the character at the beginning (end of string). When we encounter the end of the string, we can just break out of the loop and return a String Token.</p>
<ul class="code-tab-container 76a4343e-4e75-4683-8c6e-ace852562393"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '76a4343e-4e75-4683-8c6e-ace852562393', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 76a4343e-4e75-4683-8c6e-ace852562393"><li class="code_switcher_container_parent active-tab code_switcher_go 292653ec-6457-453c-afa9-f0d18639d6fe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexString</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">open</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
<span class="n">Loop</span><span class="o">:</span>
  <span class="k">for</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span><span class="o">:</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">errorf</span><span class="p">(</span><span class="n">errorUnterminatedQuotedString</span><span class="p">)</span>
    <span class="k">case</span> <span class="kt">rune</span><span class="p">(</span><span class="n">open</span><span class="p">)</span><span class="o">:</span>
      <span class="k">break</span> <span class="n">Loop</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenStr</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and after that, you know the trick, we add that to <code>lexProto</code>:</p>
<ul class="code-tab-container 2cf2ac36-575c-4925-a90e-eeaffb04b341"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '2cf2ac36-575c-4925-a90e-eeaffb04b341', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 2cf2ac36-575c-4925-a90e-eeaffb04b341"><li class="code_switcher_container_parent active-tab code_switcher_go 7e8e1e0c-9535-471c-b844-c5ed4dbf2337"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexString</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and the tests?</p>
<div class="code_switcher_container_parent edc23e16-9201-4f3f-896b-9933c8522dce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.374s
</code></pre></div></div>
</div>
<h2 id="numbers">Numbers</h2>
<p>The real challenge comes with numbers. If we take a look at the <a href="https://protobuf.dev/reference/protobuf/proto3-spec/">Protobuf language specification</a>, we need to accept Decimal, Octal and Hexadecimal for integers and exponents for floats. On top of that we need to be able to put a sign before the number to be able to have -5 for example.</p>
<p>In our tests we are going to try listing all the possible kinds of numbers (if you spot something missing, let me know):</p>
<ul class="code-tab-container 9e985cda-5746-418e-80d9-fc40638a79d6"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '9e985cda-5746-418e-80d9-fc40638a79d6', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 9e985cda-5746-418e-80d9-fc40638a79d6"><li class="code_switcher_container_parent active-tab code_switcher_go c80e4adb-8e0b-4710-be2c-4bec82d5ed31"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestNextTokenOnIntDecimal</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"5 0 -5 +5"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"-5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"+5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnIntHex</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"0xff 0XFF"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0xff"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"0XFF"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnIntOctal</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"056"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenInt</span><span class="p">,</span> <span class="s">"056"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestNextTokenOnFloat</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(</span><span class="s">"-0.5 +0.5 -.5 +.5 .5 .5e5 .5e+5 .5e-5 5e5"</span><span class="p">),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"-0.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"+0.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"-.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"+.5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e+5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">".5e-5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSpace</span><span class="p">,</span> <span class="s">" "</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenFloat</span><span class="p">,</span> <span class="s">"5e5"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Tests fail:</p>
<div class="code_switcher_container_parent e00b137c-7b37-456f-a703-226e70037bc3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnIntDecimal <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnIntHex <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnIntOctal <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Integer"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
<span class="nt">---</span> FAIL: TestNextTokenOnFloat <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Float"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>Now, before writing our <code>lexNumber</code> we want to have an <code>accept</code> function which does something similar to <code>acceptWhile</code> but only one time instead of in a loop. This will help us to check if our number, as an example, is starting by 0 in which case it might be a hexadecimal number.</p>
<ul class="code-tab-container 659450d6-b4f0-402f-83ff-dbdda54c5369"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '659450d6-b4f0-402f-83ff-dbdda54c5369', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 659450d6-b4f0-402f-83ff-dbdda54c5369"><li class="code_switcher_container_parent active-tab code_switcher_go 6e98af99-2686-4b1f-94a3-bce29337ab89"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">valid</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">strings</span><span class="o">.</span><span class="n">ContainsRune</span><span class="p">(</span><span class="n">valid</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">true</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">false</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now we can write our <code>lexNumber</code> function. We are going to start by assuming that our set of possible characters are from 0 to 9. Then we check if the number starts with the character 0. If it's the case, it will be an Hexadecimal or an Octal. We update the set of possible characters based on that.</p>
<p>Now that we know the possible set of characters, we can do an <code>acceptWhile</code> to read the digits. After the number we might see a dot for floating-point numbers. There we are going to do another <code>acceptWhile</code> to read all the digits. And finally, after all of this, we can still have an exponent followed by a sign and digits.</p>
<ul class="code-tab-container c6c34f43-3296-4f5c-a133-1633ea68e62a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c6c34f43-3296-4f5c-a133-1633ea68e62a', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher c6c34f43-3296-4f5c-a133-1633ea68e62a"><li class="code_switcher_container_parent active-tab code_switcher_go f0383608-c38b-47d7-a96f-90d7c0182691"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexNumber</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">t</span> <span class="n">TokenType</span> <span class="o">=</span> <span class="n">TokenInt</span>

  <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"+-"</span><span class="p">)</span>

  <span class="n">digits</span> <span class="o">:=</span> <span class="s">"0123456789"</span> <span class="c">// decimal</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"0"</span><span class="p">)</span> <span class="p">{</span> <span class="c">// starts with 0</span>
    <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"xX"</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">digits</span> <span class="o">=</span> <span class="s">"0123456789abcdefABCDEF"</span> <span class="c">// hexadecimal</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="n">digits</span> <span class="o">=</span> <span class="s">"01234567"</span> <span class="c">// octal</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="n">digits</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">TokenFloat</span>
    <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"0123456789"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"eE"</span><span class="p">)</span> <span class="p">{</span> <span class="c">// exponent</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">TokenFloat</span>
    <span class="n">l</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="s">"+-"</span><span class="p">)</span>
    <span class="n">l</span><span class="o">.</span><span class="n">acceptWhile</span><span class="p">(</span><span class="s">"0123456789"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We add that to <code>lexProto</code>:</p>
<ul class="code-tab-container 0935c6d6-9e6d-4026-95a7-93268b9d8935"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '0935c6d6-9e6d-4026-95a7-93268b9d8935', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 0935c6d6-9e6d-4026-95a7-93268b9d8935"><li class="code_switcher_container_parent active-tab code_switcher_go 650f073e-86a4-45de-b9fa-d5e3d47f90cf"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'+'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'-'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">||</span> <span class="p">(</span><span class="sc">'0'</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">r</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span><span class="o">:</span>
    <span class="n">l</span><span class="o">.</span><span class="n">backup</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lexNumber</span>
  <span class="p">}</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We run our tests again:</p>
<div class="code_switcher_container_parent a6bd9de0-d7cc-4c4d-ab30-7a00435fb3cd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnFloat <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[8] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"Float"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"."</span>
FAIL
</code></pre></div></div>
</div>
<p>and we still have an error. This is due to the fact that, in part 1, when we were lexing symbols, we added this case statement:</p>
<ul class="code-tab-container 1b0d44a9-fdaa-44ae-a886-e71577e9f892"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1b0d44a9-fdaa-44ae-a886-e71577e9f892', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 1b0d44a9-fdaa-44ae-a886-e71577e9f892"><li class="code_switcher_container_parent active-tab code_switcher_go c828d663-91d7-4e6b-9ee6-d508a876dba2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">:</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
<span class="c">//...</span>
</code></pre></div></div>
</li></ul>
<p>In Protobuf, numbers can start directly with a dot and thus our lexer will just read Dot and then an Integer. So we need to skip the lexing of a dot if it's followed by a number.</p>
<ul class="code-tab-container a97e6c57-5737-4bee-b3ba-02e70d6fa699"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a97e6c57-5737-4bee-b3ba-02e70d6fa699', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a97e6c57-5737-4bee-b3ba-02e70d6fa699"><li class="code_switcher_container_parent active-tab code_switcher_go 8809b6c1-6be4-40fb-b385-ead276df41d7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsNumber</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">peek</span><span class="p">())</span><span class="o">:</span>
  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
<span class="c">//...</span>
</code></pre></div></div>
</li></ul>
<p>And our tests pass:</p>
<div class="code_switcher_container_parent 2bf2b75f-81eb-4f84-8087-48f453704b9f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.763s
</code></pre></div></div>
</div>
<blockquote>
<p>Note: I am aware that some invalid numbers can pass through this lexing function. For example, the invalid number <code>0XFF.5</code> will return you a float. However, this is not the lexer that should handle the verification of number, the parser will. The lexer's job is to return tokens.</p>
</blockquote>
<h2 id="we-can-lex">We can Lex!</h2>
<p>As promised in the beginning of the article, we are able to lex a file called <code>descriptor.proto</code>. This file can be found <a href="https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto">here</a>. Just copy its content to a file.</p>
<p>Now, we need to write some main function to run our lexer. It will read the first argument from the command line (no error handling because this is just a test), read the file to a string, initialize a lexer and will repeatedly call the <code>NextToken</code> until EOF.</p>
<ul class="code-tab-container 43f6d9e5-d8fd-412a-a0b5-42b3181083f2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '43f6d9e5-d8fd-412a-a0b5-42b3181083f2', 0)">main.go</a></li></ul><ul class="code-tab-switcher 43f6d9e5-d8fd-412a-a0b5-42b3181083f2"><li class="code_switcher_container_parent active-tab code_switcher_go bceeed19-f600-4d82-b195-a5aa976cce3e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"log"</span>
  <span class="s">"os"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">args</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">Args</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="p">]</span>
  <span class="n">content</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">os</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">content</span><span class="p">))</span>

  <span class="k">for</span> <span class="p">{</span>
    <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span>

    <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">token</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>we run:</p>
<div class="code_switcher_container_parent 41785fdc-4f59-4928-ab21-9dd94e0f4ddd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run main.go descriptor.proto
</code></pre></div></div>
</div>
<p>and we should have output similar to:</p>
<div class="code_switcher_container_parent 7831abdd-07d1-429c-83f8-0effc818eeee"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
2023/02/21 18:01:58 <span class="o">{}</span> <span class="o">}</span> <span class="o">{</span>38493 920 0<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>Space 
 <span class="o">{</span>38494 920 1<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{}</span> <span class="o">}</span> <span class="o">{</span>38495 921 0<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>Space 
 <span class="o">{</span>38496 921 1<span class="o">}}</span>
2023/02/21 18:01:58 <span class="o">{</span>EOF  <span class="o">{</span>38497 922 0<span class="o">}}</span>
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we tokenized all the elements that we need to get started with our parser. We are even able to lex proto files in the protobuf library! In the next episode, before going to the parser, we are going to make sure that our token positions are correct because up until now we didn't test that.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to delve into the second part of the lexing which is tokenizing more advanced part of the input. More precisely, we are going to lex spaces (whitespaces, new lines, ...), comments, Identifiers, Numbers (Int and Float), and Strings. At the end of this article, we will have a fully functioning lexer that can tokenize the descriptor.proto which is the longest proto file in the protobuf repo. Let's get started.]]></summary></entry><entry><title type="html">Protein: Lexer (Part 1)</title><link href="https://clement-jean.github.io/protein_lexer_part_1/" rel="alternate" type="text/html" title="Protein: Lexer (Part 1)" /><published>2023-02-17T00:00:00+08:00</published><updated>2023-02-17T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_1/"><![CDATA[<p>As promised in a <a href="https://www.linkedin.com/posts/clement-jean_protobuf-activity-7024951031868391424-I26b?utm_source=share&amp;utm_medium=member_desktop">LinkedIn Poll</a>, we are going to develop Parser for proto files which will create an AST that is serializable in Protobuf itself. Obviously, this is going to be a series of articles because we need to write quite a lot of parsing code. However, I believe that this is worth doing since we are going to see another use of Protobuf outside of gRPC.</p>
<p>In this article, we are going to present the project and start writing a Lexer. This is not the most amusing part. However, this will be the foundations for our part 2 in which we will start more complex tokenizing of the input.</p>
<h2 id="the-project">The Project</h2>
<p>The project is called <a href="https://github.com/Clement-Jean/protein">protein</a>. In itself, this is intended to be a project showing how to parse proto files to do tools for Protobuf. But the end goal is to provide an easy-to-use and efficient linter.</p>
<p>The project is mostly divided into three components:</p>
<ul>
<li>The Lexer: it tokenizes the input and provides metadata about these tokens.</li>
<li>The Parser: it verifies the validity of our tokens and builds an AST.</li>
<li>The Linter: it analyzes the AST and provide feedback to users.</li>
</ul>
<blockquote>
<p>Note: There might be more components later but these are the major ones.</p>
</blockquote>
<p>One thing worth mentioning is that the AST will be built with objects generated by Protobuf. This means that we will have an AST that we can serialize and maybe even cache for multiple runs of our Linter.</p>
<p>Finally, as mentioned, this project shows how to build tools for Protobuf. Thus I hope the readers will be inspired to create their own tools and/or contribute to this project. I'm going to document all the code and explain all the logic so that you can follow along and even participate in the development.</p>
<h2 id="the-lexer">The Lexer</h2>
<p>The <code>protein</code> Lexer has been inspired by one of the great pieces of code out there: The <a href="https://cs.opensource.google/go/go/+/master:src/text/template/parse/lex.go">template library lex.go</a> in the Go standard library. I was introduced to this code by an <a href="https://www.youtube.com/watch?v=HxaD_trXwRE">amazing talk</a> given by <a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>. So I want to thank all the contributors and Rob for the amazing talk. <strong>Thank you guys!</strong></p>
<p>The essence of the Lexer is a <a href="https://en.wikipedia.org/wiki/Finite-state_machine">Finite-state Machine</a> (FSM). This basically means that we are going to go from state to state by applying functions to do the transition. For example, let's say that we have the following line:</p>
<div class="code_switcher_container_parent a3df2cde-0a09-4b39-a5aa-c95239836cba"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>
</code></pre></div></div>
</div>
<p>We will go through the following states:</p>
<div class="code_switcher_container_parent e8d6c9e6-a955-4b94-8b3b-0b5fcf53b90a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>initial state -&gt; Identifier(&quot;syntax&quot;) -&gt; Equal -&gt; Str(&quot;proto3&quot;) -&gt; EOF
</code></pre></div>
<p>And each state will know how to parse their own value (e.g. &quot;proto3&quot; for the Str state).</p>
<p>Finally, the Lexer will be used by calling the <code>NextToken</code> function. This function, as its name suggests, will return the next token in the input. This is basically calling all the parsing functions from each state.</p>
<h2 id="lets-start-simple">Let's Start Simple</h2>
<p>Let's fullfil the first requirement. The user code, in our case the Parser, will interact with the Lexer by repeatedly calling the <code>NextToken</code> function. So let's define an interface because that will be handy later on in this series to test the Parser on a fake Lexer.</p>
<ul class="code-tab-container 72b7e035-c4a8-4445-8452-4fb79a122787"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '72b7e035-c4a8-4445-8452-4fb79a122787', 0)">lexer/lexer.go</a></li></ul><ul class="code-tab-switcher 72b7e035-c4a8-4445-8452-4fb79a122787"><li class="code_switcher_container_parent active-tab code_switcher_go 5fc54770-b1c1-4ebe-ba08-6b8d10dd29c7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// Lexer is protein's tokenizer</span>
<span class="k">type</span> <span class="n">Lexer</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// NextToken returns the following token in the input source.</span>
  <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>For now, &quot;input source&quot; is still a little vague but we are going to deal with that later in the implementation.</p>
<p>After that, we do not have the definition of a <code>Token</code>. In our application, a token is a collection of few information about some text in the input:</p>
<ul>
<li>A type: a simple way to identify tokens (e.g., Identifier, Str, ...)</li>
<li>A literal: the value of a token as a string</li>
<li>A position: the position of this text in the input</li>
</ul>
<p>Let's define all that. Let's start with position. We want to know the offset relative to the beginning of the file and we want to know the line and column at which the token shows up. These info are for making the error messages clearer to the user (at least we'll try our best!). Instead of having something like:</p>
<p><code>unterminated string</code></p>
<p>we want to have:</p>
<p><code>file.proto 1:10 unterminated string: &quot;this is unterminated</code></p>
<p>Where, in this example 1 is the line and 10 is the column.</p>
<p>So a position is pretty simple.</p>
<ul class="code-tab-container 463d901b-0e20-4713-b4a6-c824ecbdeaf6"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '463d901b-0e20-4713-b4a6-c824ecbdeaf6', 0)">lexer/position.go</a></li></ul><ul class="code-tab-switcher 463d901b-0e20-4713-b4a6-c824ecbdeaf6"><li class="code_switcher_container_parent active-tab code_switcher_go fbacd199-2117-44ac-b9d3-2dbe57bb7853"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// Position is a position in the input</span>
<span class="k">type</span> <span class="n">Position</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="c">// Offset is the position relative to the beginning of the file (starts at 0)</span>
  <span class="n">Offset</span> <span class="kt">int</span>

  <span class="c">// Line is the file line (starts at 1)</span>
  <span class="n">Line</span> <span class="kt">int</span>

  <span class="c">// Column is the offset relative to the beginning of the line (starts at 0)</span>
  <span class="n">Column</span> <span class="kt">int</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And with that we can now define our Token.</p>
<ul class="code-tab-container 87efdaed-343c-43d5-a472-ce6dc4b5e051"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '87efdaed-343c-43d5-a472-ce6dc4b5e051', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher 87efdaed-343c-43d5-a472-ce6dc4b5e051"><li class="code_switcher_container_parent active-tab code_switcher_go b9d72085-2086-47e7-9963-3011829e57a7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="c">// TokenType is an alias type which tells of which kind the token is</span>
<span class="k">type</span> <span class="n">TokenType</span> <span class="kt">int</span>

<span class="c">// Token is a piece of the input</span>
<span class="k">type</span> <span class="n">Token</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Type</span>    <span class="n">TokenType</span>
  <span class="n">Literal</span> <span class="kt">string</span>
  <span class="n">Position</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="token-types">Token Types</h2>
<p>Right now, we simply have the <code>TokenType</code> type alias but do not define any value. We are going to define an enum for all the possible values that the <code>Token.Type</code> property can have.</p>
<ul class="code-tab-container ecdfb6d4-2a1d-4fa5-ba84-107ab2c77fc8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ecdfb6d4-2a1d-4fa5-ba84-107ab2c77fc8', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher ecdfb6d4-2a1d-4fa5-ba84-107ab2c77fc8"><li class="code_switcher_container_parent active-tab code_switcher_go 3f88bbe7-5127-45f1-8c5e-6e44a614da8d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="c">// These are all the token types</span>
<span class="k">const</span> <span class="p">(</span>
  <span class="n">EOF</span>          <span class="n">TokenType</span> <span class="o">=</span> <span class="no">iota</span> <span class="o">-</span> <span class="m">1</span> <span class="c">// End Of File</span>
  <span class="n">TokenIllegal</span>                      <span class="c">// Illegal token</span>
  <span class="n">TokenError</span>                        <span class="c">// Error</span>
  <span class="n">TokenSpace</span>                        <span class="c">// Space (whitespace, '\n', '\r', '\t')</span>
  <span class="n">TokenComment</span>                      <span class="c">// Comment (single line or multiline)</span>

  <span class="n">TokenIdentifier</span> <span class="c">// Identifier</span>
  <span class="n">TokenInt</span>        <span class="c">// Integer</span>
  <span class="n">TokenFloat</span>      <span class="c">// Float</span>
  <span class="n">TokenStr</span>        <span class="c">// String ('...' or "...")</span>

  <span class="n">TokenUnderscore</span>  <span class="c">// _</span>
  <span class="n">TokenEqual</span>       <span class="c">// =</span>
  <span class="n">TokenColon</span>       <span class="c">// ,</span>
  <span class="n">TokenSemicolon</span>   <span class="c">// ;</span>
  <span class="n">TokenDot</span>         <span class="c">// .</span>
  <span class="n">TokenLeftBrace</span>   <span class="c">// {</span>
  <span class="n">TokenRightBrace</span>  <span class="c">// }</span>
  <span class="n">TokenLeftSquare</span>  <span class="c">// [</span>
  <span class="n">TokenRightSquare</span> <span class="c">// ]</span>
  <span class="n">TokenLeftParen</span>   <span class="c">// (</span>
  <span class="n">TokenRightParen</span>  <span class="c">// )</span>
  <span class="n">TokenLeftAngle</span>   <span class="c">// &lt;</span>
  <span class="n">TokenRightAngle</span>  <span class="c">// &gt;</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>There are few things to notice here. The first one is the use of <code>iota</code>. If you are not familiar with this, this is a keyword that lets us define multiple constant with consecutive values. Here, we use <code>iota - 1</code> because, by default, <code>iota</code> starts counting at zero but here we want to start at -1. The second thing to notice is that some of these tokens have constant values (e.g., <code>TokenEqual</code> == '=') and others don't have one (e.g., Identifier value will be evaluated at runtime).</p>
<p>For debugging and testing, we will need a way to display the <code>TokenType</code> as a string. In Go, we can simply do that by defining a function called <code>String()</code> on the <code>TokenType</code> type. And to define the value we are going to have a constant array defining values based on the type (remember <code>TokenType</code> is just an int).</p>
<ul class="code-tab-container fcdfc10e-587e-4c4e-b250-d5bde6713356"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'fcdfc10e-587e-4c4e-b250-d5bde6713356', 0)">lexer/token.go</a></li></ul><ul class="code-tab-switcher fcdfc10e-587e-4c4e-b250-d5bde6713356"><li class="code_switcher_container_parent active-tab code_switcher_go edbfc0bc-f45e-4a60-92c4-600b7c30f1df"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>
<span class="k">var</span> <span class="n">tokenTypeStr</span> <span class="o">=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
  <span class="s">"EOF"</span><span class="p">,</span>
  <span class="s">"Illegal"</span><span class="p">,</span>
  <span class="s">"Error"</span><span class="p">,</span>
  <span class="s">"Space"</span><span class="p">,</span>
  <span class="s">"Comment"</span><span class="p">,</span>
  <span class="s">"Identifier"</span><span class="p">,</span>
  <span class="s">"Integer"</span><span class="p">,</span>
  <span class="s">"Float"</span><span class="p">,</span>
  <span class="s">"String"</span><span class="p">,</span>
  <span class="s">"_"</span><span class="p">,</span>
  <span class="s">"="</span><span class="p">,</span>
  <span class="s">","</span><span class="p">,</span>
  <span class="s">";"</span><span class="p">,</span>
  <span class="s">"."</span><span class="p">,</span>
  <span class="s">"{"</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span>
  <span class="s">"["</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span>
  <span class="s">"("</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span>
  <span class="s">"&lt;"</span><span class="p">,</span> <span class="s">"&gt;"</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">String</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">tokenTypeStr</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="m">1</span><span class="p">]</span> <span class="c">// +1 because we start at iota - 1</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementing-a-basic-lexer">Implementing a Basic Lexer</h2>
<p>With all of the previous boilerplate, we can now start our implementation. Don't get too excited though, we are simply going to define an &quot;empty shell&quot; Lexer in order to be able to write a failing test (see <a href="https://stackoverflow.com/questions/276813/what-is-red-green-testing">Red/Green testing</a>).</p>
<p>As we know, we need to implement the <code>NextToken</code> function.</p>
<ul class="code-tab-container 663a096d-abff-443f-8f23-f7baeb54eca2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '663a096d-abff-443f-8f23-f7baeb54eca2', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 663a096d-abff-443f-8f23-f7baeb54eca2"><li class="code_switcher_container_parent active-tab code_switcher_go c9e1be83-32b0-44db-a15f-dd8880bc0af5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">lexer</span>

<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">Token</span><span class="p">{</span>
    <span class="n">Type</span><span class="o">:</span> <span class="n">TokenIllegal</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Furthermore, we need a simple way to instantiate our Lexer. To do so, we are going to create a function called <code>New</code> with a return type being <code>Lexer</code> and will return an instance of <code>Impl</code>.</p>
<ul class="code-tab-container 3dad56f5-7e42-434b-857f-476c211cde45"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '3dad56f5-7e42-434b-857f-476c211cde45', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 3dad56f5-7e42-434b-857f-476c211cde45"><li class="code_switcher_container_parent active-tab code_switcher_go 2d9aba68-3af8-411e-bb33-5a40029f1dc1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// New creates a new instance of the Lexer</span>
<span class="k">func</span> <span class="n">New</span><span class="p">()</span> <span class="n">Lexer</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="writing-a-failing-test">Writing a Failing Test</h2>
<p>Now let's start with a simple test. We are going to test all the symbols (Underscore, Equal, ...). At the end of this article, we aim to make that test pass.</p>
<p>We are going to use a technique called <a href="https://arslan.io/2022/12/04/functional-table-driven-tests-in-go/">table-driven tests</a>. To do so, we are going to define a type that represents an expected Token.</p>
<ul class="code-tab-container fbf88cac-08ec-45c8-8865-537b6c9ff38a"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'fbf88cac-08ec-45c8-8865-537b6c9ff38a', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher fbf88cac-08ec-45c8-8865-537b6c9ff38a"><li class="code_switcher_container_parent active-tab code_switcher_go a5e32b53-3d56-4d85-b009-6c1ce81a9339"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Check</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">expectedType</span>     <span class="n">TokenType</span>
  <span class="n">expectedLiteral</span>  <span class="kt">string</span>
  <span class="n">expectedPosition</span> <span class="n">Position</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>I'm calling it <code>Check</code> because it will be used as for a single check in a list of checks. We are going to iterate over that list of checks and do asserts on the three properties.</p>
<ul class="code-tab-container 5fa150a9-dc02-42a1-bfab-2284c25f7170"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '5fa150a9-dc02-42a1-bfab-2284c25f7170', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 5fa150a9-dc02-42a1-bfab-2284c25f7170"><li class="code_switcher_container_parent active-tab code_switcher_go e403591e-aff1-431c-a811-ad7600f99106"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="n">tok</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedType</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - tokentype wrong. expected=%q, got=%q"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedType</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Type</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Literal</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedLiteral</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - literal wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedLiteral</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// asserts on Position for later</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can now write a compiling and failing test.</p>
<ul class="code-tab-container 92971558-4e7b-4703-b2e7-325c8044b0eb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '92971558-4e7b-4703-b2e7-325c8044b0eb', 0)">lexer/lexer_test.go</a></li></ul><ul class="code-tab-switcher 92971558-4e7b-4703-b2e7-325c8044b0eb"><li class="code_switcher_container_parent active-tab code_switcher_go 2e8fb364-5a8f-4963-a30e-17d4d5e9562d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>
<span class="p">)</span>

<span class="c">//...</span>

<span class="k">func</span> <span class="n">TestNextTokenOnSymbols</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">New</span><span class="p">(),</span> <span class="p">[]</span><span class="n">Check</span><span class="p">{</span>
    <span class="p">{</span><span class="n">TokenUnderscore</span><span class="p">,</span> <span class="s">"_"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="s">"="</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenColon</span><span class="p">,</span> <span class="s">","</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenDot</span><span class="p">,</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftBrace</span><span class="p">,</span> <span class="s">"{"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightBrace</span><span class="p">,</span> <span class="s">"}"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftSquare</span><span class="p">,</span> <span class="s">"["</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightSquare</span><span class="p">,</span> <span class="s">"]"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftParen</span><span class="p">,</span> <span class="s">"("</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightParen</span><span class="p">,</span> <span class="s">")"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenLeftAngle</span><span class="p">,</span> <span class="s">"&lt;"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">TokenRightAngle</span><span class="p">,</span> <span class="s">"&gt;"</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">EOF</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="n">Position</span><span class="p">{}},</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and if we test:</p>
<div class="code_switcher_container_parent 8aa69544-fcd5-43eb-ba15-1226d569e05d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:19: tests[0] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"_"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>That was expected.</p>
<h2 id="improving-impl">Improving Impl</h2>
<p>If you didn't notice, our implementation for the Lexer is useless. It's not storing any state and it doesn't even process text. Let's change that.</p>
<p>Let's first look at the states our Lexer will store.</p>
<ul class="code-tab-container 85837c3a-437d-4929-9f5a-ff46fbd210a3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '85837c3a-437d-4929-9f5a-ff46fbd210a3', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 85837c3a-437d-4929-9f5a-ff46fbd210a3"><li class="code_switcher_container_parent active-tab code_switcher_go 3431dc9c-5116-4bb6-bfb4-7b5176cda5b3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Impl is the implementation for the Lexer interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">src</span>             <span class="kt">string</span> <span class="c">// the input text</span>
  <span class="n">start</span>           <span class="kt">int</span>    <span class="c">// the start of a token</span>
  <span class="n">startLine</span>       <span class="kt">int</span>    <span class="c">// the line at which a token start</span>
  <span class="n">startLineOffset</span> <span class="kt">int</span>    <span class="c">// the offset of the starting line relative to beginning of file</span>
  <span class="n">line</span>            <span class="kt">int</span>    <span class="c">// the current file line being process</span>
  <span class="n">pos</span>             <span class="kt">int</span>    <span class="c">// the reading position in the file</span>
  <span class="n">atEOF</span>           <span class="kt">bool</span>   <span class="c">// tells wether the Lexer is finished</span>
  <span class="n">token</span>           <span class="n">Token</span>  <span class="c">// the token to return</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That seems like a lot but don't worry, this is actually pretty intuitive once we start interacting with these properties.</p>
<p>Now, we can improve our <code>New</code> function a little bit.</p>
<ul class="code-tab-container a508f5ae-6557-48a2-8509-897f26dca238"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'a508f5ae-6557-48a2-8509-897f26dca238', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher a508f5ae-6557-48a2-8509-897f26dca238"><li class="code_switcher_container_parent active-tab code_switcher_go 441aa227-6e85-4393-9e80-ef6a1cfc4700"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// New creates a new instance of the Lexer</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">input</span> <span class="kt">string</span><span class="p">)</span> <span class="n">Lexer</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span>
    <span class="n">src</span><span class="o">:</span>       <span class="n">input</span><span class="p">,</span>
    <span class="n">line</span><span class="o">:</span>      <span class="m">1</span><span class="p">,</span> <span class="c">// lines are 1-indexed</span>
    <span class="n">startLine</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We are finally storing text and some indices to keep track of where we are in it.</p>
<p>We can now start to think about emitting token in the <code>NextToken</code> function but before actually emitting tokens we are going to need thinking about the FSM.</p>
<p>As mentioned, we are going to create states and transitions between these states. These states will be represented as functions and the transitions will be made by returning another state after the processing needed for the current state.</p>
<p>We define a state as follows:</p>
<ul class="code-tab-container 1a203900-42cc-46fb-b5d8-695d66986d11"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1a203900-42cc-46fb-b5d8-695d66986d11', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 1a203900-42cc-46fb-b5d8-695d66986d11"><li class="code_switcher_container_parent active-tab code_switcher_go dae1cf1c-3c42-40b6-ba09-9bec7789e280"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">type</span> <span class="n">stateFn</span> <span class="k">func</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span>
</code></pre></div></div>
</li></ul>
<p>You can notice that this is a function, taking an <code>Impl</code> as parameter and returning a stateFn. Think about is as a list of states linked together.</p>
<p>With that, we are now able to define the <code>NextToken</code> logic.</p>
<ul class="code-tab-container 4dcf5d72-b15d-4a44-8ef0-74001be59567"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4dcf5d72-b15d-4a44-8ef0-74001be59567', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 4dcf5d72-b15d-4a44-8ef0-74001be59567"><li class="code_switcher_container_parent active-tab code_switcher_go f77d3d9c-4c07-44dd-a131-ecce54b057da"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="c">// NextToken provides the following token in the input</span>
<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">Token</span> <span class="p">{</span>
  <span class="n">state</span> <span class="o">:=</span> <span class="n">lexProto</span>
  <span class="k">for</span> <span class="p">{</span>
    <span class="n">state</span> <span class="o">=</span> <span class="n">state</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">state</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">token</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Where <code>lexerProto</code> is the initial state and where we iterate until <code>state</code> it becomes <code>nil</code>.</p>
<h2 id="lexproto">lexProto</h2>
<p><code>lexProto</code> Is the initial state of our FSM. This is a <code>stateFn</code>. This means that it interacts with <code>Impl</code> and returns another <code>stateFn</code>.</p>
<p>For now, we can make this function really simple. It is a function that checks the next character and checking if this character is a symbol. If it is, we return a <code>Token</code> with the relevant <code>TokenType</code>, otherwise we return an Illegal <code>Token</code>.</p>
<ul class="code-tab-container f2cb25e4-b1e5-4ea8-a680-8dbb7d827217"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f2cb25e4-b1e5-4ea8-a680-8dbb7d827217', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f2cb25e4-b1e5-4ea8-a680-8dbb7d827217"><li class="code_switcher_container_parent active-tab code_switcher_go 5a464b33-def5-4ce5-999a-0a9a3368af31"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'_'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenUnderscore</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'='</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenEqual</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">','</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenColon</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">';'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenSemicolon</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenDot</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'{'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftBrace</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'}'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightBrace</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'['</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftSquare</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">']'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightSquare</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'('</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftParen</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">')'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightParen</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'&lt;'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenLeftAngle</span><span class="p">)</span>
  <span class="k">case</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'&gt;'</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenRightAngle</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">TokenIllegal</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="next">next()</h2>
<p><code>next</code> Is also pretty simple. It basically checks if the position is valid. If it isn't it returns <code>EOF</code>, otherwise it takes the next rune (utf8 character), updates the <code>pos</code>, updates the <code>line</code> if needed, and return the rune read.</p>
<ul class="code-tab-container f461a817-4e6d-4535-b9b5-0cfa11fa279b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f461a817-4e6d-4535-b9b5-0cfa11fa279b', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher f461a817-4e6d-4535-b9b5-0cfa11fa279b"><li class="code_switcher_container_parent active-tab code_switcher_go 02f17f8a-cae8-4925-8007-58b16a132b6b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">next</span><span class="p">()</span> <span class="kt">rune</span> <span class="p">{</span>
  <span class="k">if</span> <span class="kt">int</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">atEOF</span> <span class="o">=</span> <span class="no">true</span>
    <span class="k">return</span> <span class="kt">rune</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">r</span><span class="p">,</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">utf8</span><span class="o">.</span><span class="n">DecodeRuneInString</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="o">:</span><span class="p">])</span>
  <span class="n">l</span><span class="o">.</span><span class="n">pos</span> <span class="o">+=</span> <span class="n">w</span>

  <span class="k">if</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">line</span><span class="o">++</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">r</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="emittokentype">emit(TokenType)</h2>
<p><code>emit</code> Is a function that checks our current location in the input text, creates a token, and return nil to stop the loop in <code>NextToken</code>.</p>
<ul class="code-tab-container 62314b6f-2f3c-488e-9205-3ee3d2675494"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '62314b6f-2f3c-488e-9205-3ee3d2675494', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 62314b6f-2f3c-488e-9205-3ee3d2675494"><li class="code_switcher_container_parent active-tab code_switcher_go 06f65f77-7854-47b4-97b6-f2ac2b71e05c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="n">t</span> <span class="o">:=</span> <span class="n">Token</span><span class="p">{</span>
    <span class="n">Type</span><span class="o">:</span>    <span class="n">tt</span><span class="p">,</span>
    <span class="n">Literal</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">src</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="o">:</span><span class="n">l</span><span class="o">.</span><span class="n">pos</span><span class="p">],</span>
    <span class="n">Position</span><span class="o">:</span> <span class="n">Position</span><span class="p">{</span>
      <span class="n">Offset</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span><span class="p">,</span>
      <span class="n">Line</span><span class="o">:</span>   <span class="n">l</span><span class="o">.</span><span class="n">startLine</span><span class="p">,</span>
      <span class="n">Column</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span><span class="p">,</span>
    <span class="p">}}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">pos</span>
  <span class="n">l</span><span class="o">.</span><span class="n">startLine</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">line</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="n">l</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">t</span>
  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<blockquote>
<p>Note: this is a lot of small operations. Take the time to go through the comments written in the <code>Impl</code> struct. This is not that hard.</p>
</blockquote>
<h2 id="handling-eof">Handling EOF</h2>
<p>If we run our test now, we will get the following:</p>
<div class="code_switcher_container_parent 1de05624-5b50-4f38-85b6-40e1393501ae"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:20: tests[13] - tokentype wrong. <span class="nv">expected</span><span class="o">=</span><span class="s2">"EOF"</span>, <span class="nv">got</span><span class="o">=</span><span class="s2">"Illegal"</span>
FAIL
</code></pre></div></div>
</div>
<p>This is basically saying: &quot;we received an Illegal Token but we expected EOF&quot;.</p>
<p>This is pretty trivial to solve. Remember the <code>atEOF</code> property in the <code>Impl</code>? Well, we just add that in our switch statement.</p>
<ul class="code-tab-container 24e9ba6b-4b96-4ab4-989d-6c8b5dde34ea"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '24e9ba6b-4b96-4ab4-989d-6c8b5dde34ea', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 24e9ba6b-4b96-4ab4-989d-6c8b5dde34ea"><li class="code_switcher_container_parent active-tab code_switcher_go 859603eb-e216-40ad-a047-6c2d80b538eb"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">//...</span>

<span class="k">func</span> <span class="n">lexProto</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">r</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">next</span><span class="p">();</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">l</span><span class="o">.</span><span class="n">atEOF</span><span class="o">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">emit</span><span class="p">(</span><span class="n">EOF</span><span class="p">)</span>
  <span class="c">//...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and now:</p>
<div class="code_switcher_container_parent eef007cb-19ce-488a-b716-dd0c244294c0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.809s
</code></pre></div></div>
</div>
<p>Boom !</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have a Lexer that is able to go through a text and identify the symbols that we defined as TokenType. Admittedly, this is not exceptional but we are now ready for the next part where we are going to skip whitespaces and comments, and lex Identifiers, Numbers (Int and Float), and Strings.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
		<div class="col text-center">
			<a href="/protein_lexer_part_2" class="btn btn-danger text-center">Next Article</a>
		</div>
	</div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[As promised in a LinkedIn Poll, we are going to develop Parser for proto files which will create an AST that is serializable in Protobuf itself. Obviously, this is going to be a series of articles because we need to write quite a lot of parsing code. However, I believe that this is worth doing since we are going to see another use of Protobuf outside of gRPC.]]></summary></entry><entry><title type="html">Writing Protoc Plugins</title><link href="https://clement-jean.github.io/writing_protoc_plugins/" rel="alternate" type="text/html" title="Writing Protoc Plugins" /><published>2023-02-10T00:00:00+08:00</published><updated>2023-02-10T00:00:00+08:00</updated><id>https://clement-jean.github.io/writing_protoc_plugins</id><content type="html" xml:base="https://clement-jean.github.io/writing_protoc_plugins/"><![CDATA[<p>Recently, I answered a <a href="https://stackoverflow.com/questions/75343655/modeling-schema-metadata-without-serializing-into-the-protobuf-message/75362085#75362085">StackOverflow question</a> related to writing protoc plugins and Protobuf custom options. I thought this would be interesting to share how to write one because I believe this is quite an involved process and it fits the context of an article.</p>
<h2 id="c-or-go">C++ or Go</h2>
<p>When checking the protobuf documentation, I could only find a plugin API for C++ and Go. Furthermore, Go seems to be the only language where people have written blog posts about how to write such a custom plugin. In this article, I'm trying to cover as many languages as possible so for now I'll write in both languages and if you find that another language support writing custom plugin, leave a comment and I'll be happy to update.</p>
<h2 id="bazel">Bazel</h2>
<p>In order to build a multi-language project, I'm going to use Bazel. This might be frightening for some people but I'll try to explain as much as I can. Furthermore, if you are interested in learning Bazel, you can let me know in the comments.</p>
<h2 id="the-context">The Context</h2>
<p>While the StackOverflow states the problem, I want to explain it again so that I have control of whether the content exists. Here is a copy of the question:</p>
<blockquote>
<p>Does protobuf support embedding non functional metadata into the protobuf schema without affecting the message serialization/de-serialization? I am attempting to embed business information (ownership, contact info) into a large shared protobuf schema but do NOT want to impact functionality at all.</p>
<p>A structured comment or custom_option that does not get serialized would work. I would also like to parse the information from the .proto file for auditing purposes.</p>
<p>TIA</p>
<div class="code_switcher_container_parent 7fb90f5a-8db0-4b32-b79f-f221a2deff07"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
 <span class="k">optional</span> <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[(</span><span class="n">silent_options</span><span class="p">)</span><span class="o">.</span><span class="na">owner</span> <span class="o">=</span> <span class="s">"team1"</span><span class="p">,</span> <span class="p">(</span><span class="n">silent_options</span><span class="p">)</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="s">"team1@company.com"</span><span class="p">];</span>
 <span class="k">optional</span> <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div></blockquote>
<p>In other words, we want to create a custom FieldOption which lets us assign an owner and an email to a field. On top of that, we want that to be analyzed for auditing purpose. This basically means that we can do that at &quot;compile&quot; time. So we are going to build a custom plugin which will let us write something like:</p>
<div class="code_switcher_container_parent a9259721-5955-4adb-a0b4-0341b4d2c1e5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--audit_out</span><span class="o">=</span><span class="nb">.</span> test.proto
</code></pre></div></div>
</div>
<p>Now, in this article, to keep everything simple, we are not going to generate any code or report stored in a file. We are going to print info on the terminal. However, generating files is pretty trivial to add in general. We simply write the information that we print in the terminal to a file (protoc library has some sort of printer to write to files).</p>
<h3 id="workspace--build-root">WORKSPACE + BUILD (root)</h3>
<p>Let us first create our Bazel Workspace for our project. We do that by creating a WORKSPACE.bazel file at the root and inside we are going to add the dependencies needed to build our project.</p>
<ul class="code-tab-container 88e2a93e-6402-4d16-88a1-d9356172356c"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '88e2a93e-6402-4d16-88a1-d9356172356c', 0)">WORKSPACE.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '88e2a93e-6402-4d16-88a1-d9356172356c', 1)">WORKSPACE.bazel (C++)</a></li></ul><ul class="code-tab-switcher 88e2a93e-6402-4d16-88a1-d9356172356c"><li class="code_switcher_container_parent active-tab code_switcher_python 712a7279-1732-43be-93dc-a3f618ffd3b4"><div class="code_switcher_code_action_container"><div id="code_copied_snackbar">Copied!</div><button class="code_switcher_copy_button" title="Copy" onclick="copyText('712a7279-1732-43be-93dc-a3f618ffd3b4')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="p">,</span> <span class="s">"http_archive"</span><span class="p">)</span>

<span class="n">RULES_GO_VERSION</span> <span class="o">=</span> <span class="s">"0.37.0"</span>
<span class="n">GO_VERSION</span> <span class="o">=</span> <span class="s">"1.19.5"</span>
<span class="n">GAZELLE_VERSION</span> <span class="o">=</span> <span class="s">"0.29.0"</span>
<span class="n">PROTOBUF_VERSION</span> <span class="o">=</span> <span class="s">"3.21.12"</span>

<span class="c1"># To create go libraries and binaries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"io_bazel_rules_go"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"56d8c5a5c91e1af73eca71a6fab2ced959b67c86d12ba37feedb0a2dfea441a6"</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v%s/rules_go-v%s.zip"</span> <span class="o">%</span> <span class="p">(</span><span class="n">RULES_GO_VERSION</span><span class="p">,</span> <span class="n">RULES_GO_VERSION</span><span class="p">),</span>
    <span class="s">"https://github.com/bazelbuild/rules_go/releases/download/v%s/rules_go-v%s.zip"</span> <span class="o">%</span> <span class="p">(</span><span class="n">RULES_GO_VERSION</span><span class="p">,</span> <span class="n">RULES_GO_VERSION</span><span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="c1"># To generate BUILD.bazel files and lists of dependencies (more on that later)
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"bazel_gazelle"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"ecba0f04f96b4960a5b250c8e8eeec42281035970aa8852dda73098274d14a1d"</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v%s/bazel-gazelle-v%s.tar.gz"</span> <span class="o">%</span> <span class="p">(</span><span class="n">GAZELLE_VERSION</span><span class="p">,</span> <span class="n">GAZELLE_VERSION</span><span class="p">),</span>
    <span class="s">"https://github.com/bazelbuild/bazel-gazelle/releases/download/v%s/bazel-gazelle-v%s.tar.gz"</span> <span class="o">%</span> <span class="p">(</span><span class="n">GAZELLE_VERSION</span><span class="p">,</span> <span class="n">GAZELLE_VERSION</span><span class="p">),</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="c1"># To get protobuf and protoc libraries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"com_google_protobuf"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"930c2c3b5ecc6c9c12615cf5ad93f1cd6e12d0aba862b572e076259970ac3a53"</span><span class="p">,</span>
  <span class="n">strip_prefix</span> <span class="o">=</span> <span class="s">"protobuf-%s"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
    <span class="s">"https://github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:deps.bzl"</span><span class="p">,</span> <span class="s">"go_register_toolchains"</span><span class="p">,</span> <span class="s">"go_rules_dependencies"</span><span class="p">)</span>

<span class="n">go_rules_dependencies</span><span class="p">()</span>

<span class="n">go_register_toolchains</span><span class="p">(</span><span class="n">version</span> <span class="o">=</span> <span class="n">GO_VERSION</span><span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@bazel_gazelle//:deps.bzl"</span><span class="p">,</span> <span class="s">"gazelle_dependencies"</span><span class="p">)</span>

<span class="n">gazelle_dependencies</span><span class="p">(</span><span class="n">go_repository_default_config</span> <span class="o">=</span> <span class="s">"//:WORKSPACE.bazel"</span><span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@com_google_protobuf//:protobuf_deps.bzl"</span><span class="p">,</span> <span class="s">"protobuf_deps"</span><span class="p">)</span>

<span class="n">protobuf_deps</span><span class="p">()</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 2a5c9720-24fe-406c-b1bc-5990931b0c23"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2a5c9720-24fe-406c-b1bc-5990931b0c23')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_tools//tools/build_defs/repo:http.bzl"</span><span class="p">,</span> <span class="s">"http_archive"</span><span class="p">)</span>

<span class="n">PROTOBUF_VERSION</span> <span class="o">=</span> <span class="s">"3.21.12"</span>

<span class="c1"># To get protobuf and protoc libraries
</span><span class="n">http_archive</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"com_google_protobuf"</span><span class="p">,</span>
  <span class="n">sha256</span> <span class="o">=</span> <span class="s">"930c2c3b5ecc6c9c12615cf5ad93f1cd6e12d0aba862b572e076259970ac3a53"</span><span class="p">,</span>
  <span class="n">strip_prefix</span> <span class="o">=</span> <span class="s">"protobuf-%s"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"https://mirror.bazel.build/github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
    <span class="s">"https://github.com/protocolbuffers/protobuf/archive/v%s.tar.gz"</span> <span class="o">%</span> <span class="n">PROTOBUF_VERSION</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>

<span class="n">load</span><span class="p">(</span><span class="s">"@com_google_protobuf//:protobuf_deps.bzl"</span><span class="p">,</span> <span class="s">"protobuf_deps"</span><span class="p">)</span>

<span class="n">protobuf_deps</span><span class="p">()</span>
</code></pre></div></div>
</li></ul>
<p>This gets all the dependencies needed to work with protobuf. Mainly we are going to use protobuf library which contains some generated code to deal with descriptors (a meta object that describe an object written in protobuf) and the protoc library which lets us define plugins.</p>
<h4 id="go">Go</h4>
<p>For go, we have some extra steps. The first thing we can do is creating our go module. To do that we can write the following command:</p>
<div class="code_switcher_container_parent b69569cd-ef1a-4389-8ece-4edb40fcbc9b"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('b69569cd-ef1a-4389-8ece-4edb40fcbc9b')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go mod init test.com
</code></pre></div></div>
</div>
<p>Where you can replace <code>test.com</code> with the name of your module. <strong>If you changed the module name, be aware that you'll need to update all the following <code>test.com</code></strong>.</p>
<p>Now, because we also want our application to run with a simple <code>go run main.go</code> kind of command, we are going to add a dependency to the module, which is protobuf. To do that enter the following command:</p>
<div class="code_switcher_container_parent a8aad8a0-14b8-42a0-aa92-836353a641a2"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('a8aad8a0-14b8-42a0-aa92-836353a641a2')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>Note that we added a protobuf dependency in the WORKSPACE.bazel and in our go.mod. These are not the same. One if for the building phase (linking with libraries) and the other is to be used in the Go program (as code).</p>
<p>Finally, we also need to set up Gazelle. We need to create a BUILD.bazel file at the root level.</p>
<ul class="code-tab-container f82be7e0-9d75-4bfc-a367-9afc3f8c17df"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'f82be7e0-9d75-4bfc-a367-9afc3f8c17df', 0)">BUILD.bazel</a></li></ul><ul class="code-tab-switcher f82be7e0-9d75-4bfc-a367-9afc3f8c17df"><li class="code_switcher_container_parent active-tab code_switcher_python 4ca1f77e-ef58-4cbf-8f46-1f02841f40c3"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('4ca1f77e-ef58-4cbf-8f46-1f02841f40c3')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@bazel_gazelle//:def.bzl"</span><span class="p">,</span> <span class="s">"gazelle"</span><span class="p">)</span>

<span class="c1"># gazelle:prefix test.com
</span><span class="n">gazelle</span><span class="p">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"gazelle"</span><span class="p">)</span>

<span class="n">gazelle</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"gazelle-update-repos"</span><span class="p">,</span>
  <span class="n">args</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"-from_file=go.mod"</span><span class="p">,</span>
    <span class="s">"-to_macro=deps.bzl%go_dependencies"</span><span class="p">,</span>
    <span class="s">"-prune"</span><span class="p">,</span>
  <span class="p">],</span>
  <span class="n">command</span> <span class="o">=</span> <span class="s">"update-repos"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>This creates two commands (<code>gazelle</code> and <code>gazelle-update-repos</code>) that we can run to generate our BUILD.bazel and other dependency files automatically.</p>
<p>We can now run <code>bazel run //:gazelle-update-repos</code> in the terminal and we will see that it creates a file called <code>deps.bzl</code> and that the WORKSPACE.bazel was modified with these lines:</p>
<ul class="code-tab-container 3b905dd8-942a-48e0-81aa-d9d4c98a99fd"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '3b905dd8-942a-48e0-81aa-d9d4c98a99fd', 0)">WORKSPACE.bazel</a></li></ul><ul class="code-tab-switcher 3b905dd8-942a-48e0-81aa-d9d4c98a99fd"><li class="code_switcher_container_parent active-tab code_switcher_python 01a8a790-56d2-44cb-b2c4-a4492767c8ce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"//:deps.bzl"</span><span class="p">,</span> <span class="s">"go_dependencies"</span><span class="p">)</span>

<span class="c1"># gazelle:repository_macro deps.bzl%go_dependencies
</span><span class="n">go_dependencies</span><span class="p">()</span>
</code></pre></div></div>
</li></ul>
<p>If you open the <code>deps.bzl</code>, you will see a list of all the dependencies fetched to be able to build your go application.</p>
<h3 id="protobuf">Protobuf</h3>
<p>We are now at the stage where we can define our custom option. It is worth noting that in our case we need an option on fields but we can create options for a lot of different context. We could for example create an option at the top-level context (<code>go_package</code>, <code>optimize_for</code>, ...), at a message level, etc. You can find all the options in the file called descriptor.proto in the GitHub repo under <code>src/google/protobuf</code>.</p>
<p>To create a custom option, we need to extend the relevant message. In our case we need to extend <code>google.protobuf.FieldOptions</code>. To do that we can simply use the <code>extend</code> concept, which lets us define more fields inside an already existing message.</p>
<ul class="code-tab-container 88885a29-e4dc-4bed-92c5-76e88f37da8a"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '88885a29-e4dc-4bed-92c5-76e88f37da8a', 0)">proto/silent_option.proto (Go)</a></li><li class=" code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '88885a29-e4dc-4bed-92c5-76e88f37da8a', 1)">proto/silent_option.proto (C++)</a></li></ul><ul class="code-tab-switcher 88885a29-e4dc-4bed-92c5-76e88f37da8a"><li class="code_switcher_container_parent active-tab code_switcher_proto 94a12dcb-d4af-4fc5-9936-0dd154c8cb82"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('94a12dcb-d4af-4fc5-9936-0dd154c8cb82')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">SilentOption</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">owner</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.FieldOptions</span> <span class="p">{</span>
  <span class="n">SilentOption</span> <span class="na">silent_option</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// see note below for why 1000</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_proto f95d31ab-31a2-4304-b242-7091a76c0a20"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('f95d31ab-31a2-4304-b242-7091a76c0a20')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">SilentOption</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">owner</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">email</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.FieldOptions</span> <span class="p">{</span>
  <span class="n">SilentOption</span> <span class="na">silent_option</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// see note below for why 1000</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<blockquote>
<p>NOTE: if you check the FieldOptions message in the descriptor.proto file, you will see the following line: <code>extensions 1000 to max;</code>. This means that when we are extending this message, our fields will need to contain tags that are between 1000 and max (maximum tag). Furthermore, some of the option tags are &quot;already taken&quot;. This means that other custom options are using them and if you were to use your option with another one having the same tag, you would have a conflict. Check the list of the <a href="https://github.com/protocolbuffers/protobuf/blob/main/docs/options.md">Protobuf Global Extension Registry</a> before selecting the tag for your custom option and maybe register it.</p>
</blockquote>
<p>Now that we have our proto file, we can think about compiling it. To do that we are going to create a BUILD.bazel file in the proto directory. This will define a library for our proto file and another for the related programming language.</p>
<ul class="code-tab-container 9fff0f45-8e2c-43e4-b69d-d5a2d4f4c923"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '9fff0f45-8e2c-43e4-b69d-d5a2d4f4c923', 0)">BUILD.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '9fff0f45-8e2c-43e4-b69d-d5a2d4f4c923', 1)">BUILD.bazel (C++)</a></li></ul><ul class="code-tab-switcher 9fff0f45-8e2c-43e4-b69d-d5a2d4f4c923"><li class="code_switcher_container_parent active-tab code_switcher_shell d0694811-f63e-43f7-a7bb-2a4ed3323cfa"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d0694811-f63e-43f7-a7bb-2a4ed3323cfa')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //:gazelle
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 12c27a17-9d01-4ba1-8660-668d5250f083"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('12c27a17-9d01-4ba1-8660-668d5250f083')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@rules_cc//cc:defs.bzl"</span><span class="p">,</span> <span class="s">"cc_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_proto"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"silent_option.proto"</span><span class="p">],</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">"@com_google_protobuf//:descriptor_proto"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">cc_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_cc_proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">":silent_option_proto"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h4 id="go-1">Go</h4>
<p>You might have noticed that we simply ran a command to generate our BUILD.bazel in the proto directory. This is what gazelle is doing. It checks your file and determine how to create BUILD files. However, I think there are problems with this solution. The main one is the naming of our libraries. By now, you should have something like this:</p>
<ul class="code-tab-container 6f667285-e915-4007-9dca-a09ee9d16708"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '6f667285-e915-4007-9dca-a09ee9d16708', 0)">proto/BUILD.bazel</a></li></ul><ul class="code-tab-switcher 6f667285-e915-4007-9dca-a09ee9d16708"><li class="code_switcher_container_parent active-tab code_switcher_python 120168fa-27bb-4d18-8d0c-8ea380de31f8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:def.bzl"</span><span class="p">,</span> <span class="s">"go_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//proto:def.bzl"</span><span class="p">,</span> <span class="s">"go_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto_proto"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"silent_option.proto"</span><span class="p">],</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span><span class="s">"@com_google_protobuf//:descriptor_proto"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">go_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto_go_proto"</span><span class="p">,</span>
  <span class="n">importpath</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">,</span>
  <span class="n">proto</span> <span class="o">=</span> <span class="s">":proto_proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
<span class="p">)</span>

<span class="n">go_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"proto"</span><span class="p">,</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":proto_go_proto"</span><span class="p">],</span>
  <span class="n">importpath</span> <span class="o">=</span> <span class="s">"test.com/proto"</span><span class="p">,</span>
  <span class="n">visibility</span> <span class="o">=</span> <span class="p">[</span><span class="s">"//visibility:public"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<p>and these are using generic names based on the folder there are stored in (proto). Let's rename all that.</p>
<ul class="code-tab-container 997593e3-16bb-49a0-bd6f-0e730b250f8f"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', '997593e3-16bb-49a0-bd6f-0e730b250f8f', 0)">proto/BUILD.bazel</a></li></ul><ul class="code-tab-switcher 997593e3-16bb-49a0-bd6f-0e730b250f8f"><li class="code_switcher_container_parent active-tab code_switcher_python fddc3537-b3b8-480f-bd1b-c3f6662ae634"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('fddc3537-b3b8-480f-bd1b-c3f6662ae634')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_proto//proto:defs.bzl"</span><span class="p">,</span> <span class="s">"proto_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//go:def.bzl"</span><span class="p">,</span> <span class="s">"go_library"</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">"@io_bazel_rules_go//proto:def.bzl"</span><span class="p">,</span> <span class="s">"go_proto_library"</span><span class="p">)</span>

<span class="n">proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_proto"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_proto_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"silent_option_go_proto"</span><span class="p">,</span>
  <span class="n">proto</span> <span class="o">=</span> <span class="s">":silent_option_proto"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_library</span><span class="p">(</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":silent_option_go_proto"</span><span class="p">],</span>
  <span class="c1">#...
</span><span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h3 id="plugin">Plugin</h3>
<p>Finally, we arrive at the moment where we need to write the plugin. The goal of this plugin is reading a protobuf file and if it sees a field with silent_option, it will print the file name, the field and its related info, and the option content.</p>
<blockquote>
<p>Note: Since this is a very different process for different implementations of Protobuf, I will rely on code comment to explain what the code is doing.</p>
</blockquote>
<ul class="code-tab-container f9847675-962e-48e8-a69d-53c5d10a5e77"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f9847675-962e-48e8-a69d-53c5d10a5e77', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'f9847675-962e-48e8-a69d-53c5d10a5e77', 1)">main.cc</a></li></ul><ul class="code-tab-switcher f9847675-962e-48e8-a69d-53c5d10a5e77"><li class="code_switcher_container_parent active-tab code_switcher_go 97069f88-bb1c-4d17-9745-f391f1a0ef7c"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('97069f88-bb1c-4d17-9745-f391f1a0ef7c')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"flag"</span>
  <span class="s">"log"</span>

  <span class="s">"google.golang.org/protobuf/compiler/protogen"</span>
  <span class="s">"google.golang.org/protobuf/proto"</span>
  <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

  <span class="n">pb</span> <span class="s">"test.com/proto"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">flags</span> <span class="n">flag</span><span class="o">.</span><span class="n">FlagSet</span>
  <span class="c">// defines the options that we can pass to our plugin</span>
  <span class="n">team</span> <span class="o">:=</span> <span class="n">flags</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"team"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="s">"Filtering team"</span><span class="p">)</span>

  <span class="n">protogen</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
    <span class="n">ParamFunc</span><span class="o">:</span> <span class="n">flags</span><span class="o">.</span><span class="n">Set</span><span class="p">,</span> <span class="c">// the protobuf library will set the option into the flags variable</span>
  <span class="p">}</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">gen</span> <span class="o">*</span><span class="n">protogen</span><span class="o">.</span><span class="n">Plugin</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">gen</span><span class="o">.</span><span class="n">Files</span> <span class="p">{</span> <span class="c">// iterates over all the proto files given as source</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">file</span><span class="o">.</span><span class="n">Generate</span> <span class="p">{</span>
        <span class="k">continue</span>
      <span class="p">}</span>

      <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">message</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">file</span><span class="o">.</span><span class="n">Messages</span> <span class="p">{</span> <span class="c">// iterates over the messages in the current file</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">field</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">message</span><span class="o">.</span><span class="n">Fields</span> <span class="p">{</span> <span class="c">// iterates over the fields in the current message</span>
          <span class="n">option</span> <span class="o">:=</span> <span class="n">field</span><span class="o">.</span><span class="n">Desc</span><span class="o">.</span><span class="n">Options</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">FieldOptions</span><span class="p">)</span> <span class="c">// try to get an option</span>

          <span class="k">if</span> <span class="n">option</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span> <span class="c">// if no option we skip</span>
            <span class="k">continue</span>
          <span class="p">}</span>

          <span class="n">extension</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">option</span><span class="p">,</span> <span class="n">pb</span><span class="o">.</span><span class="n">E_SilentOption</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">SilentOption</span><span class="p">)</span> <span class="c">// try to cast this option in SilentOption</span>

          <span class="k">if</span> <span class="n">extension</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="n">extension</span><span class="o">.</span><span class="n">Owner</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">team</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">extension</span><span class="o">.</span><span class="n">Owner</span> <span class="o">==</span> <span class="o">*</span><span class="n">team</span> <span class="p">{</span>
            <span class="c">// in here we have a SilentOption which as the owner equal to the team option pass in command line.</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">Desc</span><span class="o">.</span><span class="n">Name</span><span class="p">(),</span> <span class="n">field</span><span class="p">,</span> <span class="n">extension</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 2e66e101-ee0b-4ab3-875e-0d9142deba53"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2e66e101-ee0b-4ab3-875e-0d9142deba53')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/plugin.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/code_generator.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/descriptor.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/io/printer.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;google/protobuf/compiler/command_line_interface.h&gt;</span><span class="cp">
#include</span> <span class="cpf">"proto/silent_option.pb.h"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">io</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="o">::</span><span class="n">compiler</span><span class="p">;</span>

<span class="c1">// implementation of Generator interface</span>
<span class="k">class</span> <span class="nc">AuditGenerator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">CodeGenerator</span> <span class="p">{</span>
 <span class="nl">public:</span>
  <span class="c1">// iterates over the files and call the Generate function</span>
  <span class="c1">// we are skipping error handling</span>
  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">GenerateAll</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">FileDescriptor</span><span class="o">*&gt;</span> <span class="o">&amp;</span><span class="n">files</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">parameter</span><span class="p">,</span>
    <span class="n">GeneratorContext</span> <span class="o">*</span><span class="n">generator_context</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">error</span>
  <span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;&amp;</span><span class="n">file</span> <span class="o">:</span> <span class="n">files</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="o">-&gt;</span><span class="n">Generate</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">generator_context</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// analyzes a file</span>
  <span class="k">virtual</span> <span class="kt">bool</span> <span class="n">Generate</span><span class="p">(</span>
    <span class="k">const</span> <span class="n">FileDescriptor</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">parameter</span><span class="p">,</span>
    <span class="n">GeneratorContext</span> <span class="o">*</span><span class="n">generator_context</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">*</span><span class="n">error</span>
  <span class="p">)</span> <span class="k">const</span> <span class="k">override</span> <span class="p">{</span>
    <span class="c1">// iterates over the messages in the current file</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">message_type_count</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">message</span> <span class="o">=</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">message_type</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

      <span class="c1">// iterates over the fields in the current message</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">field_count</span><span class="p">();</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">field</span> <span class="o">=</span> <span class="n">message</span><span class="o">-&gt;</span><span class="n">field</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">options</span> <span class="o">=</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">options</span><span class="p">.</span><span class="n">HasExtension</span><span class="p">(</span><span class="n">silent_option</span><span class="p">))</span> <span class="p">{</span><span class="k">continue</span><span class="p">;}</span> <span class="c1">// if no SilentOption we skip</span>

        <span class="k">auto</span> <span class="n">extension</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">silent_option</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">extension</span><span class="p">.</span><span class="n">IsInitialized</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">parameter</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">extension</span><span class="p">.</span><span class="n">owner</span><span class="p">()</span> <span class="o">==</span> <span class="n">parameter</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// in here we have a SilentOption which as the owner equal to the team option pass in command line.</span>
          <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">file</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">": "</span> <span class="o">&lt;&lt;</span> <span class="n">field</span><span class="o">-&gt;</span><span class="n">DebugString</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="n">AuditGenerator</span> <span class="n">generator</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">PluginMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">generator</span><span class="p">);</span> <span class="c1">// registers the generator</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>To compile this code, we need to create a BUILD.bazel file which will generate a binary for our application.</p>
<ul class="code-tab-container 49afdbf4-36e3-4f47-b5a6-216548a7ddc0"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '49afdbf4-36e3-4f47-b5a6-216548a7ddc0', 0)">BUILD.bazel (Go)</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '49afdbf4-36e3-4f47-b5a6-216548a7ddc0', 1)">BUILD.bazel (C++)</a></li></ul><ul class="code-tab-switcher 49afdbf4-36e3-4f47-b5a6-216548a7ddc0"><li class="code_switcher_container_parent active-tab code_switcher_shell 5490357f-82a8-4151-855c-342299f5931d"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('5490357f-82a8-4151-855c-342299f5931d')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel run //:gazelle
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python a09097ae-b632-4642-aa0e-46586ed3372f"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('a09097ae-b632-4642-aa0e-46586ed3372f')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">"@rules_cc//cc:defs.bzl"</span><span class="p">,</span> <span class="s">"cc_binary"</span><span class="p">)</span>

<span class="n">cc_binary</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit"</span><span class="p">,</span>
  <span class="n">srcs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"main.cc"</span><span class="p">],</span>
  <span class="n">deps</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"//proto:silent_option_cc_proto"</span><span class="p">,</span>
    <span class="s">"@com_google_protobuf//:protobuf"</span><span class="p">,</span>
    <span class="s">"@com_google_protobuf//:protoc_lib"</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h4 id="go-2">Go</h4>
<p>Same naming problem as the Protobuf section. Let us rename that.</p>
<ul class="code-tab-container f34a8bad-0c6d-4dc9-a2b8-bcfb45ed5525"><li class="active-tab code_switcher_python"><a onclick="selectTab('code_switcher_python', 'f34a8bad-0c6d-4dc9-a2b8-bcfb45ed5525', 0)">BUILD.bazel</a></li></ul><ul class="code-tab-switcher f34a8bad-0c6d-4dc9-a2b8-bcfb45ed5525"><li class="code_switcher_container_parent active-tab code_switcher_python 602b181f-cbc5-4c07-af83-e2da4bcdefe2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># gazelle related code ...
</span>
<span class="n">go_library</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit_lib"</span><span class="p">,</span>
  <span class="c1">#...
</span><span class="p">)</span>

<span class="n">go_binary</span><span class="p">(</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s">"protoc-gen-audit"</span><span class="p">,</span>
  <span class="n">embed</span> <span class="o">=</span> <span class="p">[</span><span class="s">":protoc-gen-audit_lib"</span><span class="p">],</span>
  <span class="c1">#...
</span><span class="p">)</span>
</code></pre></div></div>
</li></ul>
<h3 id="running">Running</h3>
<p>We can now build our binaries by running:</p>
<div class="code_switcher_container_parent d18101a1-048e-4aca-bb29-a14eb165e846"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('d18101a1-048e-4aca-bb29-a14eb165e846')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bazel build //:protoc-gen-audit
</code></pre></div></div>
</div>
<p>We also need to have a proto file to test our plugin.</p>
<ul class="code-tab-container 5fc198a5-96e0-420a-9ca5-b01bb85cf733"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '5fc198a5-96e0-420a-9ca5-b01bb85cf733', 0)">test.proto (Go)</a></li><li class=" code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '5fc198a5-96e0-420a-9ca5-b01bb85cf733', 1)">test.proto (C++)</a></li></ul><ul class="code-tab-switcher 5fc198a5-96e0-420a-9ca5-b01bb85cf733"><li class="code_switcher_container_parent active-tab code_switcher_proto 29ce78ea-e1d5-4ea9-8211-db71d2869a26"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('29ce78ea-e1d5-4ea9-8211-db71d2869a26')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"proto/silent_option.proto"</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"another_test.com"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team1"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team1@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
  <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team2"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team2@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_proto 2929c458-5117-4f7e-b8f2-3bec918bf11a"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('2929c458-5117-4f7e-b8f2-3bec918bf11a')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"proto/silent_option.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Bar</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">a</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team1"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team1@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
  <span class="kt">int32</span> <span class="na">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">[</span>
    <span class="p">(</span><span class="n">silent_option</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span>
      <span class="n">owner</span><span class="o">:</span> <span class="s">"team2"</span><span class="p">,</span>
      <span class="n">email</span><span class="o">:</span> <span class="s">"team2@company.com"</span>
    <span class="p">}</span>
  <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now that we have our binaries in the <code>bazel-bin</code> directory, we can use them with protoc as plugins. To do so we use the <code>--plugin</code> option which takes the path of our binary and the option related to our plugin. For example, our plugin is called <code>protoc-gen-audit</code>, so now we can use the <code>--audit_out</code> option.</p>
<blockquote>
<p>Note: we also added a team flag in Go. This lets us use <code>--audit_opt=team=THE_TEAM_NAME</code>.</p>
</blockquote>
<ul class="code-tab-container 602246d9-9298-420e-aea4-90caa0b73656"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '602246d9-9298-420e-aea4-90caa0b73656', 0)">Go</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '602246d9-9298-420e-aea4-90caa0b73656', 1)">C++</a></li></ul><ul class="code-tab-switcher 602246d9-9298-420e-aea4-90caa0b73656"><li class="code_switcher_container_parent active-tab code_switcher_shell 94c05ee3-fe6b-422a-9691-73cbae66f58d"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('94c05ee3-fe6b-422a-9691-73cbae66f58d')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--plugin</span><span class="o">=</span>protoc-gen-audit<span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span>/bazel-bin/protoc-gen-audit_/protoc-gen-audit <span class="nt">--audit_out</span><span class="o">=</span><span class="nb">.</span> <span class="nt">--audit_opt</span><span class="o">=</span><span class="nv">team</span><span class="o">=</span>team1 test.proto
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell dc6d62ea-5313-404a-b5d7-0c7a3f84652b"><div class="code_switcher_code_action_container"><button class="code_switcher_copy_button" title="Copy" onclick="copyText('dc6d62ea-5313-404a-b5d7-0c7a3f84652b')"></button><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>protoc <span class="nt">--plugin</span><span class="o">=</span>protoc-gen-audit<span class="o">=</span><span class="si">$(</span>PWD<span class="si">)</span>/bazel-bin/protoc-gen-audit <span class="nt">--audit_out</span><span class="o">=</span>team1:. test.proto
</code></pre></div></div>
</li></ul>
<p>You can now play with your plugin and test with other team names.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Obviously, we can improve the solution in this post but the most important is that we saw that we can create custom options and protoc plugins. This can be interesting for compile time analysis or generating code. Finally, we saw that in this auditing use case, but we could use this in more advanced use cases (e.g.: <a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-gateway</a>).</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="C++" /><category term="Go" /><summary type="html"><![CDATA[Recently, I answered a StackOverflow question related to writing protoc plugins and Protobuf custom options. I thought this would be interesting to share how to write one because I believe this is quite an involved process and it fits the context of an article.]]></summary></entry><entry><title type="html">One Character to Save 200 Bytes</title><link href="https://clement-jean.github.io/one_character_to_save_200_bytes/" rel="alternate" type="text/html" title="One Character to Save 200 Bytes" /><published>2023-01-14T00:00:00+08:00</published><updated>2023-01-14T00:00:00+08:00</updated><id>https://clement-jean.github.io/one_character_to_save_200_bytes</id><content type="html" xml:base="https://clement-jean.github.io/one_character_to_save_200_bytes/"><![CDATA[<p>Recently, I've been working with <a href="https://techhub.social/@coderbyheart@chaos.social">Markus Tacker</a> on improving his <a href="https://github.com/coderbyheart/json-protobuf-comparison-wifi-site-survey">comparison of JSON vs. Protobuf for a Wifi Site Survey</a>. This has been a lot of fun and I thought I could do a simple post about what went well and what my mistakes were.</p>
<h2 id="looking-at-the-proto-file">Looking at the proto file</h2>
<p>Here is the proto file at the moment I was looking at it:</p>
<div class="code_switcher_container_parent 7b5f2ced-33f7-4aba-91ab-e7bf5ffe86cc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">WiFiSiteSurvey</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="n">AP</span> <span class="na">accesspoints</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">AP</span> <span class="p">{</span>
  <span class="kt">int64</span> <span class="na">mac</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">ssid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">rssi</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">channel</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The first thing that made me think about improving this schema is the use of repeated on a complex object. If you don't know why, I go into more details about why it is less efficient to use complex objects in a repeated field, in the article called <a href="https://clement-jean.github.io/packed_vs_unpacked_repeated_fields/">Packed vs. Unpacked Repeated Fields</a>.</p>
<p>Other than that, I didn't have any other idea at that point. I needed to analyze the data.</p>
<h2 id="analyzing-the-data">Analyzing the Data</h2>
<p>The first thing to do when you are dealing with data is to understand it and get a sense of the possible values you can have. One thing that came out directly after running the comparison script and analyzing the <a href="https://github.com/coderbyheart/json-protobuf-comparison-wifi-site-survey/blob/saga/sitesurvey.json">sitesurvey.json</a> is that all <code>rssi</code> properties are negative.</p>
<p>Now, I'm not an expert in wifi protocol but after searching online what <code>rssi</code> meant, I found that it's an acronym for Received Signal Strength Indicator and that it will always be a negative value ranging from -30 to -90 (see <a href="https://corecabling.com/understanding-received-signal-strength-rssi-in-your-wifi-network/">here</a>).</p>
<p>This is interesting because by knowing this range we know that we are dealing with a range that fits in the 32 bytes integers and we know that the numbers are all negative so we will prefer to use a sint instead of an int (TODO: article about sint vs int). And, if you look at the proto file shown above the <code>rssi</code> field has the type <code>int32</code>, which means that we are encoding all the values into 10 bytes (because negative values are encoded as big positive numbers).</p>
<p>OK, so, before applying the change, Markus got the following result:</p>
<div class="code_switcher_container_parent 23cac668-db16-4713-a8d3-0a4c14915bc1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 30
JSON payload length: 1949 bytes
Protobuf payload length: 966 bytes
</code></pre></div></div>
</div>
<p>This is already very nice because we save 50% of bytes in our payload. But, after changing <code>int32 rssi = 3;</code> to <code>sint32 rssi = 3;</code>, we got the following result:</p>
<div class="code_switcher_container_parent 4a0cbe59-6b6c-4dd6-b93e-8793180bb1b1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 30
JSON payload length: 1949 bytes
Protobuf payload length: 713 bytes
</code></pre></div></div>
</div>
<p>Two hundred+ bytes gone, with one character added. Pretty cool!</p>
<h2 id="back-to-the-original-idea">Back to the Original Idea</h2>
<p>Even though we saved 200 bytes, that wasn't my original idea on how to improve this proto file. As I mentioned I wanted to see if making the repeated field act on simple data could help.</p>
<p>Now, this is important to note that everything that comes after this wasn't added to the repository since we didn't entirely understand the requirements for the data. So I will show the assumption that we were making at that time and we will see how it was dismissed later. Here are the assumption:</p>
<ul>
<li>None of the fields are optional if an info is missing treat the data as erroneous.</li>
</ul>
<p>This is important because with that assumption we could make multiple repeated fields instead of having the <code>AP</code> message and we would save encoding a complex object. This would be lowering the payload size and then later on because all the lists have the same length we could do a zip between these lists to get the objects back (first object get first element of all the lists). So the proto file changed like so:</p>
<div class="code_switcher_container_parent d21e32fb-4e47-486c-8fcd-14623132e1a6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">WiFiSiteSurvey</span> <span class="p">{</span>
  <span class="kt">uint32</span> <span class="na">timestamp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int64</span> <span class="na">macs</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">ssids</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">rssis</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">int32</span> <span class="na">channels</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<blockquote>
<p>Note: <code>string</code> is a complex object so we are still using unpacked repeated field on <code>ssids</code>.</p>
</blockquote>
<p>We first filtered all the erroneous data in the dataset and rerun the comparison. Here is the result:</p>
<div class="code_switcher_container_parent 24440ede-f7f8-46f8-8d19-34803961a938"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>node compare.js
Found APs 24
JSON payload length: 1949 bytes
Protobuf payload length: 510 bytes
</code></pre></div></div>
</div>
<p>Another 200 bytes gone.</p>
<h2 id="why-the-repeated-trick-didnt-work">Why the repeated 'trick' didn't work</h2>
<p>This mostly didn't work because some of the fields in <code>AP</code> are actually optional. This means that either we would have to add empty wrappers into the lists to get the lists have the same length (not worth, the payload size would be bigger than 713 bytes) or we go back to our <code>AP</code> message after the <code>sint32</code> improvement.</p>
<p>The second thing that is not making this approach work is that, if you noticed, we are lowering the payload but we are doing more computation in our code. We need to do a zip afterwards. This might be fine if this is internal to your company and well documented. However, if this is a client facing proto file, this might just make their life harder.</p>
<p><strong>Lesson: Know your data requirements!</strong></p>
<h2 id="other-improvements">Other Improvements</h2>
<p>Here is a list of further improvements, added or not yet added, that are not impacting payload size:</p>
<ul>
<li>Change <code>uint32 timestamp = 1;</code> to <code>uint64 timestamp = 1;</code> for accepting a bigger range of numbers.</li>
<li>Change <code>int32 channel = 4;</code> to <code>uint32 channel = 4;</code> for invalidating negative numbers on the client side.</li>
<li>Change <code>int64 mac = 1;</code> to <code>uint64 mac = 1;</code> for invalidating negative numbers on the client side (I'm not sure yet, but this seems possible).</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>We saw that by knowing your data and knowing the encoding algorithm behind Protobuf, we can get really big payload size improvements. However, we still need to care about the usage of our proto files and be more accurate on the different data requirements; otherwise we will implement obscure 'fixes' and in the end they will not be needed.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><summary type="html"><![CDATA[Recently, I've been working with Markus Tacker on improving his comparison of JSON vs. Protobuf for a Wifi Site Survey. This has been a lot of fun and I thought I could do a simple post about what went well and what my mistakes were.]]></summary></entry></feed>