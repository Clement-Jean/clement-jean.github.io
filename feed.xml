<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://clement-jean.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://clement-jean.github.io/" rel="alternate" type="text/html" /><updated>2025-05-26T17:00:23+08:00</updated><id>https://clement-jean.github.io/feed.xml</id><title type="html">Clément Jean</title><subtitle>Eternal learner and challenges lover</subtitle><author><name>Clément Jean</name></author><entry><title type="html">Introducing codetabs.el</title><link href="https://clement-jean.github.io/introducing_codetabs/" rel="alternate" type="text/html" title="Introducing codetabs.el" /><published>2025-05-26T00:00:00+08:00</published><updated>2025-05-26T00:00:00+08:00</updated><id>https://clement-jean.github.io/introducing_codetabs</id><content type="html" xml:base="https://clement-jean.github.io/introducing_codetabs/"><![CDATA[<style>
    .org-src-container pre .custom-1 { color: white; background-color: #0000ff; }
    .org-src-container pre .custom { color: black; background-color: #0ff; }
</style>

<div class="alert alert-warning" role="alert">
  <h4 class="alert-heading">Warning!</h4>
  <p>Some features might not yet be added to the codetabs.el repo! This blog is experimenting with what could be done. If you are interested in how it works check <a href="https://github.com/Clement-Jean/clement-jean.github.io/blob/working/_org/lisp/codetabs.el">_org/lisp/codetabs.el</a> and <a href="https://github.com/Clement-Jean/clement-jean.github.io/blob/working/js/codetabs.js">js/codetabs.js</a></p>
</div>
<div id="outline-container-org87b0a59" class="outline-2">
<h2 id="org87b0a59">Description</h2>
<div class="outline-text-2" id="text-org87b0a59">
<p>
Recently, I've been trying to change the way I write blog posts here. Up until now I was using Jekyll+Markdown to write and publish. However, I decided I didn't want Markdown anymore and instead use Org Mode (I use Emacs BTW!). The reason is very simple: <b>CUSTOMIZATION</b>.
</p>

<p>
If you read some of my previous blog post, I have code snippets that are grouped under tabs. This is because I often want to write multi-language code or simply have a beautiful code snippet and the name of a file as the tab name. Previous articles were relying on <a href="https://github.com/jdvp/jdvp-codetabs-commonmark">jdvp-codetabs-commonmark</a> but I was missing some features and I already bothered the maintainer enough that I didn't feel like asking anymore. These features were:
</p>

<ul class="org-ul">
<li>Custom code highlighting (change color theme)</li>
<li>Code emphasis (emphasize errors and warnings in code)</li>
<li>Small animations (not important, but looks good)</li>
</ul>

<p>
So, I decided to implement this my way. During this process, I came up with <a href="https://github.com/Clement-Jean/codetabs.el">codetabs.el</a> and this article will demonstrate its features.
</p>
</div>
</div>
<div id="outline-container-org80fde2f" class="outline-2">
<h2 id="org80fde2f">Behavior</h2>
<div class="outline-text-2" id="text-org80fde2f">
</div>
<div id="outline-container-orgf322bf9" class="outline-4">
<h4 id="orgf322bf9">Naming</h4>
<div class="outline-text-4" id="text-orgf322bf9">
<p>
With <code>codetabs</code> we can either get tabs named after the org babel language like so:
</p>

<div lang="go" class="org-src-container">
 <pre class="src src-go"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
}
</pre>
</div>

<div lang="cpp" class="org-src-container">
 <pre class="src src-cpp"><span class="org-type">int</span> <span class="org-function-name">main</span>() { <span class="org-keyword">return</span> 0; }
</pre>
</div>

<p>
or we can rename them with a simple <code>#+name</code>:
</p>

<div name="main.go" lang="go" class="org-src-container">
 <pre class="src src-go" id="org3432789"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
}
</pre>
</div>

<div name="main.cc" lang="cpp" class="org-src-container">
 <pre class="src src-cpp" id="org0a96ec4"><span class="org-type">int</span> <span class="org-function-name">main</span>() { <span class="org-keyword">return</span> 0; }
</pre>
</div>

<p>
For single <code>src-blocks</code>, it is similar:
</p>

<div name="Shell" lang="shell" class="org-src-container">
 <pre class="src src-shell" id="org2028d35">ls
</pre>
</div>
</div>
</div>
<div id="outline-container-org8f4beb1" class="outline-4">
<h4 id="org8f4beb1">Skipping</h4>
<div class="outline-text-4" id="text-org8f4beb1">
<p>
We can skip some blocks. For example, the BQN block is consecutive but uses the attr <code>:skip</code>:
</p>

<div name="C++" lang="cpp" class="org-src-container">
 <pre class="src src-cpp" id="org30a9de4"><span class="org-constant">std</span>::cout &lt;&lt; <span class="org-string">"hello"</span> &lt;&lt; <span class="org-constant">std</span>::endl;
</pre>
</div>

<div name="Python" lang="python" class="org-src-container">
 <pre class="src src-python" id="orga1a5d12"><span class="org-keyword">def</span> <span class="org-function-name">test</span>():
   <span class="org-builtin">print</span>(1)
</pre>
</div>

<div class="org-src-container">
<pre class="src src-bqn"><span class="org-bqn-primitive-function">&lt;</span><span class="org-bqn-primitive-two-modifier">&#10204;</span><span class="org-string">'a'</span><span class="org-bqn-primitive-two-modifier">&#8888;</span><span class="org-bqn-primitive-function">/</span> <span class="org-string">"Big Questions Notation"</span>
</pre>
</div>

<div name="C++" lang="cpp" class="org-src-container">
 <pre class="src src-cpp" id="orgf3a5f14"><span class="org-constant">std</span>::cout &lt;&lt; <span class="org-string">"world"</span> &lt;&lt; <span class="org-constant">std</span>::endl;
</pre>
</div>

<div name="Python" lang="python" class="org-src-container">
 <pre class="src src-python" id="orga9b5c7f"><span class="org-keyword">def</span> <span class="org-function-name">test</span>():
   <span class="org-builtin">print</span>(2)
</pre>
</div>

<p>
And it also works for single <code>src-blocks</code>:
</p>

<div class="org-src-container">
<pre class="src src-sh" id="org25c35ca">ls
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf4f579e" class="outline-4">
<h4 id="orgf4f579e">Copying</h4>
<div class="outline-text-4" id="text-orgf4f579e">
<p>
We can also enable copy of code with the <code>:copy</code> attribute (check the top right corner!):
</p>

<div name="Go" copy="nil" lang="go" class="org-src-container">
 <pre class="src src-go" id="org1e0d616"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org3aaf8b5" class="outline-4">
<h4 id="org3aaf8b5">State</h4>
<div class="outline-text-4" id="text-org3aaf8b5">
<p>
The language preference is reflected across the whole article. For example, if you click on C++ because you prefer reading in this language, all the C++ codes will be selected. Try it:
</p>

<div name="Go" lang="go" class="org-src-container">
 <pre class="src src-go" id="org73027d7"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
}
</pre>
</div>

<div name="C++" lang="cpp" class="org-src-container">
 <pre class="src src-cpp" id="orgd906eee"><span class="org-type">int</span> <span class="org-function-name">main</span>() { <span class="org-keyword">return</span> 0; }
</pre>
</div>

<p>
SOME TEXT HERE&#x2026;.
</p>

<div name="Go" lang="go" class="org-src-container">
 <pre class="src src-go" id="org3be1da5"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
}
</pre>
</div>

<div name="C++" lang="cpp" class="org-src-container">
 <pre class="src src-cpp" id="org5336d8f"><span class="org-type">int</span> <span class="org-function-name">main</span>() { <span class="org-keyword">return</span> 0; }
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org8f68327" class="outline-2">
<h2 id="org8f68327">Styling</h2>
<div class="outline-text-2" id="text-org8f68327">
</div>
<div id="outline-container-orgf18f871" class="outline-4">
<h4 id="orgf18f871">CSS</h4>
<div class="outline-text-4" id="text-orgf18f871">
<p>
With <code>org-html-htmlize-output-type</code> set to <code>css</code> you can customize your CSS to make any token the color you want (see the function name difference in light and dark theme):
</p>

<div name="Go" lang="go" class="org-src-container">
 <pre class="src src-go" id="org5a18d93"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
}
</pre>
</div>

<p>
This is just done like so:
</p>

<div name="CSS" lang="css" class="org-src-container">
 <pre class="src src-css" id="orgacdfb0b"><span class="org-css-selector">.org-src-container pre .org-function-name</span> {
  <span class="org-comment-delimiter">/* </span><span class="org-comment">font-lock-function-name-face</span><span class="org-comment-delimiter"> */</span>
  <span class="org-css-property">color</span>: <span class="custom-1">#0000ff</span>;
}
<span class="org-css-selector">.org-src-container pre.dark-mode .org-function-name</span> {
  <span class="org-comment-delimiter">/* </span><span class="org-comment">font-lock-function-name-face</span><span class="org-comment-delimiter"> */</span>
  <span class="org-css-property">color</span>: <span class="custom">#0ff</span>;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgf805a16" class="outline-4">
<h4 id="orgf805a16">Emphasis</h4>
<div class="outline-text-4" id="text-orgf805a16">
<p>
By using the <code>:emphasize</code> attr we can also define the styling for a given portion of code:
</p>

<div emphasize-class="squiggly-error,squiggly-warning" emphasize-end="⊸,⊣" emphasize-start="⟜,⊢" name="Go" lang="go" class="org-src-container">
 <pre class="src src-go" id="org2a0fe36"><span class="org-keyword">func</span> <span class="org-function-name">main</span>() {
  fmt.<span class="org-function-name">Printf</span>(<span class="org-string">"%d\n"</span>, ⟜<span class="org-string">"I pass a string"</span>⊸)
  fmt.<span class="org-function-name">Printf</span>(⊢<span class="org-string">"%d\n"</span>⊣)
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgdd5f3f5" class="outline-2">
<h2 id="orgdd5f3f5">Misc</h2>
<div class="outline-text-2" id="text-orgdd5f3f5">
<p>
I customized the code snippets theme based on: <a href="https://github.com/tokyo-night/tokyo-night-vscode-theme">tokyo-night-vscode-theme</a>
</p>

<p>
I added the following animations:
</p>

<ul class="org-ul">
<li>Switching to/from dark mode</li>
<li>Tab transitions</li>
</ul>
</div>
</div>]]></content><author><name>Clément Jean</name></author><category term="Elisp" /><category term="Emacs" /><summary type="html"><![CDATA[Recently, I've been trying to change the way I write blog posts here. Up until now I was using Jekyll+Markdown to write and publish. However, I decided I didn't want Markdown anymore...]]></summary></entry><entry><title type="html">Binary Search Tree with SIMD</title><link href="https://clement-jean.github.io/simd_binary_search_tree/" rel="alternate" type="text/html" title="Binary Search Tree with SIMD" /><published>2024-07-09T00:00:00+08:00</published><updated>2024-07-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/simd_binary_search_tree</id><content type="html" xml:base="https://clement-jean.github.io/simd_binary_search_tree/"><![CDATA[<div class="alert alert-warning" role="alert">
  <h4 class="alert-heading">Warning!</h4>
  <p>The code (ASM) part of this article is not fully correct and doesn't scale to more layers of the tree. While I solved this problem offline, I did not update this article. Once I do, this warning will be off.</p>
</div>
<p>Recently, I've been looking at cache friendly algorithm for common data structures like trees, tries, ... One such algorithm kept coming up to mind and that's why I decided to implement it in Go. You can find the paper describing the algorithm <a href="https://dl.acm.org/doi/10.1145/1807167.1807206">here</a>.</p>
<h2 id="the-intuition">The Intuition</h2>
<p>Let's assume that we have a binary tree:</p>
<div class="code_switcher_container_parent 3ffb4550-4441-492d-b21b-80892d26dec2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>      ┌────── 41 ──────┐
      │                │
   ┌──23──┐       ┌───61───┐
   │      │       │        │
┌─11─┐  ┌─31─┐  ┌─47─┐  ┌─73─┐
│    │  │    │  │    │  │    │
2   19  29  37  43  53  67  79
</code></pre></div>
<p>A normal way of representing a binary tree into an array is by representing it like so:</p>
<div class="code_switcher_container_parent dce4a712-6a91-4d2b-9d2d-e00189951d5a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┬────┬────┬────┬────┬───┬────┬────┬────┬────┬────┬────┬────┐
│ 41 │ 23 │ 61 │ 11 │ 31 │ 47 │ 73 │ 2 │ 19 │ 29 │ 37 │ 43 │ 53 │ 67 │ 79 │
└────┴────┴────┴────┴────┴────┴────┴───┴────┴────┴────┴────┴────┴────┴────┘
</code></pre></div>
<p>or, in other words, we have the level nodes layed out consecutively.</p>
<p>This approach however, is not that cache friendly. While the locality of the data for a level is good, in a binary search, we actually care more about the parent-children locality. This is because, by keeping the children next to the parent, we wouldn't need to jump far ahead in the array.</p>
<p>The paper mentionned at the beginning, propose to have a binary tree layed out like the following:</p>
<div class="code_switcher_container_parent 9c8a1279-e266-4cf9-8ea8-9298d7431e8f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┬────┬───┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┐
│ 41 │ 23 │ 61 │ 11 │ 2 │ 19 │ 31 │ 29 │ 37 │ 47 │ 43 │ 53 │ 73 │ 67 │ 79 │
└────┴────┴────┴────┴───┴────┴────┴────┴────┴────┴────┴────┴────┴────┴────┘
</code></pre></div>
<p>And if you take time to understand how this maps back to the binary tree, you will notice that we are storing parent-children triangles. With this, we can now apply SIMD operations on both the parent and the children in order to either dtermine if the data we are looking for is in the triangle, or if we should continue our search.</p>
<p>The next important thing to understand is how we do the search of elements.</p>
<p>Let's take an example to make things clearer. Let's say that we are looking for the number 62. We will start by loading 41, 23, 61 into a vector.</p>
<div class="code_switcher_container_parent dd479a0d-fb0f-4904-b167-12369ba0df5a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 41 │ 23 │ 61 │
└────┴────┴────┘
</code></pre></div>
<p>Then, we will compare (smaller than) each number with the element we are looking for:</p>
<div class="code_switcher_container_parent 3d9552cc-e9ca-46f1-985b-100aaf82e250"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 41 │ 23 │ 61 │
└────┴────┴────┘
        &lt;
┌────┬────┬────┐
│ 62 │ 62 │ 62 │
└────┴────┴────┘
        =
┌────┬────┬────┐
│  1 │  1 │  1 │
└────┴────┴────┘
</code></pre></div>
<p>and with the mask we get, we can map to an index in the following subtrees. Here is the full mapping:</p>
<div class="code_switcher_container_parent a2b251a0-8f34-4c7c-b7f2-0fc1fe1ba4c4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code> 0 0 0 -&gt; 0
 0 1 0 -&gt; 1
 1 1 0 -&gt; 2
 1 1 1 -&gt; 3
</code></pre></div>
<p>It's actually a popcount.</p>
<p>So, with our <code>[1, 1, 1]</code>, we should access the 4th child (mapping is 0 indexed).</p>
<p>If you look at the binary tree, this means that we need to go to the number 73 and we now have the vector:</p>
<div class="code_switcher_container_parent b0c1c1e2-0787-44ba-b43d-57e7651576dd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 73 │ 67 │ 79 │
└────┴────┴────┘
</code></pre></div>
<p>Now, we can obviously repeat the process.</p>
<p>On top of the lookup for index, we also need to be able to check the equality of the search vector and the curr loaded vector. This is as simple as:</p>
<div class="code_switcher_container_parent 5e029f38-e7ad-44dc-9f17-15a00bb4b18b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>┌────┬────┬────┐
│ 41 │ 23 │ 61 │
└────┴────┴────┘
       ==
┌────┬────┬────┐
│ 62 │ 62 │ 62 │
└────┴────┴────┘
        =
┌────┬────┬────┐
│  0 │  0 │  0 │
└────┴────┴────┘
</code></pre></div>
<p>If we found a 1, it would mean that the element is in the tree. Otherwise, we keep running as long as we are within the boundaries of the array.</p>
<p>Hopefully, this all makes sense. Let us move to the code.</p>
<h2 id="the-code">The Code</h2>
<p>As <a href="https://github.com/golang/go/issues/67520">my proposal for adding SIMD intrinsics</a> is still not evaluated/accepted, we will need to write Go assembly (ARM64) to make use of SIMD instructions. I'll try to be as clear as possible on what each instruction is doing but you should know at least basics of assembly.</p>
<p>Let's start by defining the function definition in our <code>main.go</code>:</p>
<ul class="code-tab-container 1aa867bd-09b7-4c61-a2fa-9c0e2d2ae460"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '1aa867bd-09b7-4c61-a2fa-9c0e2d2ae460', 0)">main.go</a></li></ul><ul class="code-tab-switcher 1aa867bd-09b7-4c61-a2fa-9c0e2d2ae460"><li class="code_switcher_container_parent active-tab code_switcher_go e14a1801-ccf8-42f1-bbe6-4f26b17a3177"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">func</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">,</span> <span class="n">n</span> <span class="kt">uint32</span><span class="p">)</span> <span class="kt">bool</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>You can see that we are working with uint32s. This is because on ARM64 Neon, we only have 128 bits, and as we need to load at least 3 elements per triangle, uint32 is our best choice.</p>
<p>Next, we will jump to our <code>main.s</code> file and start defining our function:</p>
<ul class="code-tab-container b13384d3-eebf-419b-abce-9361f6224439"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'b13384d3-eebf-419b-abce-9361f6224439', 0)">main.s</a></li></ul><ul class="code-tab-switcher b13384d3-eebf-419b-abce-9361f6224439"><li class="code_switcher_container_parent active-tab code_switcher_c bf67bc2b-968d-4aaf-93dd-47cf285ed388"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"textflag.h"</span><span class="cp">
</span>
<span class="c1">//func binarySearch(arr []int, n int) bool</span>
<span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>The most important thing here is the <code>$0-33</code> part. We are saying that we do not have local variables (0) and that our arguments/return value take 33 bytes (24 for the slice, 8 for the int, and 1 for the bool).</p>
<p>Next, as part of my function, I generally like to define some names for the register. It helps me remember what each register is supposed to contain. This looks like this:</p>
<ul class="code-tab-container ff46e6f1-fc73-4f8f-b1bd-1da6313b8387"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'ff46e6f1-fc73-4f8f-b1bd-1da6313b8387', 0)">main.s</a></li></ul><ul class="code-tab-switcher ff46e6f1-fc73-4f8f-b1bd-1da6313b8387"><li class="code_switcher_container_parent active-tab code_switcher_c 3cd32e4e-2dbc-4a42-996d-f10b4c3d0870"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="cp">#define data R0
#define dataLen R1
#define toFind R2
#define curr R3
#define tmp R4
#define child_idx R5
#define nb_subtree R6
#define level R7
#define searchKey V0
#define mask V1
#define idx V2
#define one V3
#define equalMask V4
</span></code></pre></div></div>
</li></ul>
<p>With that, we can initialize the registers and check the base cases:</p>
<ul class="code-tab-container 7a12ed7f-7278-46b7-a5db-a0b2ac4bdfb3"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', '7a12ed7f-7278-46b7-a5db-a0b2ac4bdfb3', 0)">main.s</a></li></ul><ul class="code-tab-switcher 7a12ed7f-7278-46b7-a5db-a0b2ac4bdfb3"><li class="code_switcher_container_parent active-tab code_switcher_c 1a905c2c-6ad3-4925-bbbd-ff0ac22e877e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

  <span class="c1">// initialize registers</span>
  <span class="n">MOVD</span> <span class="n">arr</span><span class="o">+</span><span class="mi">0</span><span class="p">(</span><span class="n">FP</span><span class="p">),</span> <span class="n">data</span>
  <span class="n">MOVD</span> <span class="n">arr_len</span><span class="o">+</span><span class="mi">8</span><span class="p">(</span><span class="n">FP</span><span class="p">),</span> <span class="n">dataLen</span>
  <span class="n">MOVD</span> <span class="n">n</span><span class="o">+</span><span class="mi">24</span><span class="p">(</span><span class="n">FP</span><span class="p">),</span> <span class="n">toFind</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">level</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">nb_subtree</span>
  <span class="n">VDUP</span> <span class="n">level</span><span class="p">,</span> <span class="n">one</span><span class="p">.</span><span class="n">S4</span>

  <span class="c1">// if array len is 0 return false</span>
  <span class="n">CMP</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">dataLen</span>
  <span class="n">BEQ</span> <span class="n">not_found</span>

  <span class="c1">// if array len &gt; 1 start the work</span>
  <span class="c1">// otherwise check if the first element is equal</span>
  <span class="c1">//  to the one we are looking for</span>
  <span class="n">CMP</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">dataLen</span>
  <span class="n">BGT</span> <span class="n">load</span>
  <span class="n">MOVD</span> <span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">tmp</span>
  <span class="n">CMP</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">toFind</span>
  <span class="n">BEQ</span> <span class="n">found</span>
  <span class="n">B</span> <span class="n">not_found</span>

  <span class="c1">//...</span>

<span class="n">not_found</span><span class="o">:</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">R19</span> <span class="c1">// false</span>
  <span class="n">MOVD</span> <span class="n">R19</span><span class="p">,</span> <span class="n">ret</span><span class="o">+</span><span class="mi">32</span><span class="p">(</span><span class="n">FP</span><span class="p">)</span>
  <span class="n">RET</span>

<span class="n">found</span><span class="o">:</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">R19</span> <span class="c1">// true</span>
  <span class="n">MOVD</span> <span class="n">R19</span><span class="p">,</span> <span class="n">ret</span><span class="o">+</span><span class="mi">32</span><span class="p">(</span><span class="n">FP</span><span class="p">)</span>
  <span class="n">RET</span>
</code></pre></div></div>
</li></ul>
<p>Now, we can start the real work. We will have a simple loop which we load 4 elements at the <code>curr</code> position in <code>data</code>:</p>
<ul class="code-tab-container 651d794f-8bf6-40a4-8750-d874f8b183ff"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', '651d794f-8bf6-40a4-8750-d874f8b183ff', 0)">main.s</a></li></ul><ul class="code-tab-switcher 651d794f-8bf6-40a4-8750-d874f8b183ff"><li class="code_switcher_container_parent active-tab code_switcher_c 956e4db5-a3e7-40a7-bea7-5eb90a054eb8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">load</span><span class="o">:</span>
  <span class="n">VDUP</span> <span class="n">toFind</span><span class="p">,</span> <span class="n">searchKey</span><span class="p">.</span><span class="n">S4</span>

<span class="n">check</span><span class="o">:</span>
  <span class="n">CMP</span> <span class="n">dataLen</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">BGE</span> <span class="n">not_found</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">4</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">MUL</span> <span class="n">R19</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">ADD</span> <span class="n">curr</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">VLD1</span> <span class="p">(</span><span class="n">R19</span><span class="p">),</span> <span class="p">[</span><span class="n">mask</span><span class="p">.</span><span class="n">S4</span><span class="p">]</span>

  <span class="c1">//TODO update curr</span>

  <span class="n">B</span> <span class="n">check</span>
</code></pre></div></div>
</li></ul>
<p>Notice that we are multiplying <code>curr</code> by 4. This is because we are working with uint32s (4 bytes) so our index (<code>curr</code>) need to be moved by <code>curr * 4</code> bytes.</p>
<p>Then, inside the loop, we will check for equality between the four loaded elements and the search vector:</p>
<ul class="code-tab-container e4e32c94-638c-44a1-92ba-caef423f5cc4"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'e4e32c94-638c-44a1-92ba-caef423f5cc4', 0)">main.s</a></li></ul><ul class="code-tab-switcher e4e32c94-638c-44a1-92ba-caef423f5cc4"><li class="code_switcher_container_parent active-tab code_switcher_c d2d3b408-75b8-456e-ac6a-cc29664a0a33"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="c1">//...</span>

  <span class="n">VCMEQ</span> <span class="n">mask</span><span class="p">.</span><span class="n">S4</span><span class="p">,</span> <span class="n">searchKey</span><span class="p">.</span><span class="n">S4</span><span class="p">,</span> <span class="n">equalMask</span><span class="p">.</span><span class="n">S4</span>
  <span class="n">WORD</span> <span class="err">$</span><span class="mh">0x6eb0a893</span> <span class="c1">//umaxv.4s s19, v4</span>
  <span class="n">FMOVS</span> <span class="n">F19</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">CMP</span> <span class="err">$</span><span class="mi">4294967295</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">BEQ</span> <span class="n">found</span>

  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>You can notice that if the maximum value inside <code>equalMask</code> is <code>math.MaxUint32</code> (4294967295), it means that we found the element and thus we can return.</p>
<p>After that, we fall into the binary search algorithm. We will first start by looking for the index:</p>
<ul class="code-tab-container 356a083f-35da-408e-ba42-9e0d328e7d97"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', '356a083f-35da-408e-ba42-9e0d328e7d97', 0)">main.s</a></li></ul><ul class="code-tab-switcher 356a083f-35da-408e-ba42-9e0d328e7d97"><li class="code_switcher_container_parent active-tab code_switcher_c bba0d488-2a56-443c-b1cd-4a4279dc387f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="c1">//...</span>

  <span class="n">WORD</span> <span class="err">$</span><span class="mh">0x6ea13401</span> <span class="c1">//cmhi.4s v1, v0, v1</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">0</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">VMOV</span> <span class="n">R19</span><span class="p">,</span> <span class="n">mask</span><span class="p">.</span><span class="n">S</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
  <span class="n">VAND</span> <span class="n">mask</span><span class="p">.</span><span class="n">B16</span><span class="p">,</span> <span class="n">one</span><span class="p">.</span><span class="n">B16</span><span class="p">,</span> <span class="n">idx</span><span class="p">.</span><span class="n">B16</span>
  <span class="n">WORD</span> <span class="err">$</span><span class="mh">0x6eb0384f</span> <span class="c1">//uaddlv.4s d15, v2</span>
  <span class="n">FMOVD</span> <span class="n">F15</span><span class="p">,</span> <span class="n">child_idx</span>

  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>The <code>cmhi</code> checks whether the data we are looking for is bigger that the data we loaded. Then, we bitwise AND the loaded vector with ones and finally, we do a basic popcount to determine the <code>child_idx</code>.</p>
<p>Finally, we need to update the <code>curr</code>, <code>level</code>, and the <code>nb_subtree</code>. As mentionned, the former is telling us from where to read the data in the array. The two last ones actually help us calculate the <code>curr</code> by running the following formula: <code>curr = nb_subtree * 3 + (3 * (child_idx + 1))</code>.</p>
<ul class="code-tab-container c9bcb05d-a43c-409d-add5-214281fffcbd"><li class="active-tab code_switcher_c"><a onclick="selectTab('code_switcher_c', 'c9bcb05d-a43c-409d-add5-214281fffcbd', 0)">main.s</a></li></ul><ul class="code-tab-switcher c9bcb05d-a43c-409d-add5-214281fffcbd"><li class="code_switcher_container_parent active-tab code_switcher_c 02f8632f-8f8c-4eb7-a2c5-d96817a39cc3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TEXT</span> <span class="err">·</span><span class="n">binarySearch</span><span class="p">(</span><span class="n">SB</span><span class="p">),</span><span class="n">NOSPLIT</span><span class="p">,</span><span class="err">$</span><span class="mi">0</span><span class="o">-</span><span class="mi">33</span>
<span class="c1">//...</span>

<span class="n">loop</span><span class="o">:</span>
  <span class="c1">//...</span>

  <span class="c1">//curr = nb_subtree * 3 + (3 * (child_idx + 1))</span>
  <span class="n">MOVD</span> <span class="n">child_idx</span><span class="p">,</span> <span class="n">tmp</span>
  <span class="n">ADD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">tmp</span>
  <span class="n">MOVD</span> <span class="err">$</span><span class="mi">3</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">MUL</span> <span class="n">R19</span><span class="p">,</span> <span class="n">tmp</span>
  <span class="n">MOVD</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">curr</span>
  <span class="n">MUL</span> <span class="n">R19</span><span class="p">,</span> <span class="n">nb_subtree</span><span class="p">,</span> <span class="n">R19</span>
  <span class="n">ADD</span> <span class="n">R19</span><span class="p">,</span> <span class="n">curr</span>

  <span class="c1">//nb_subtree = level &lt;&lt; 2</span>
  <span class="n">LSL</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">nb_subtree</span>

  <span class="c1">//level++</span>
  <span class="n">ADD</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="n">level</span>

  <span class="c1">//...</span>
</code></pre></div></div>
</li></ul>
<p>And that actually is all for the binary search algorithm.</p>
<h2 id="a-demo">A Demo</h2>
<p>We can now go back to our <code>main.go</code> and try it.</p>
<ul class="code-tab-container f06d8f3d-d139-4c98-bdff-bdc01677c8f0"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f06d8f3d-d139-4c98-bdff-bdc01677c8f0', 0)">main.go</a></li></ul><ul class="code-tab-switcher f06d8f3d-d139-4c98-bdff-bdc01677c8f0"><li class="code_switcher_container_parent active-tab code_switcher_go 81db36a3-e4ee-4a06-bd4a-63011f5dfa21"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">,</span> <span class="n">n</span> <span class="kt">uint32</span><span class="p">)</span> <span class="kt">bool</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">{</span><span class="m">41</span><span class="p">,</span> <span class="m">23</span><span class="p">,</span> <span class="m">61</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">37</span><span class="p">,</span> <span class="m">47</span><span class="p">,</span> <span class="m">43</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">73</span><span class="p">,</span> <span class="m">67</span><span class="p">,</span> <span class="m">79</span><span class="p">}</span>

  <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="m">19</span><span class="p">))</span>
  <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="m">100</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and if we run, we should have:</p>
<div class="code_switcher_container_parent ca4f1c9e-6f9a-4d96-b7e3-f812b0628fea"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run <span class="nb">.</span>
<span class="nb">true
false</span>
</code></pre></div></div>
</div>
<h2 id="benchmark">Benchmark</h2>
<ul class="code-tab-container bb6a0e7e-aae0-4c59-92fd-1104a51a13e2"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'bb6a0e7e-aae0-4c59-92fd-1104a51a13e2', 0)">main_test.go</a></li><li class=" code_switcher_sh"><a onclick="selectTab('code_switcher_sh', 'bb6a0e7e-aae0-4c59-92fd-1104a51a13e2', 1)">result</a></li></ul><ul class="code-tab-switcher bb6a0e7e-aae0-4c59-92fd-1104a51a13e2"><li class="code_switcher_container_parent active-tab code_switcher_go 8dad2590-ce97-4798-a668-4f44ca3d8d06"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>
  <span class="s">"slices"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">ok</span> <span class="kt">bool</span>

<span class="k">func</span> <span class="n">BenchmarkBinarySearchSIMD</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">nbs</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">{</span><span class="m">41</span><span class="p">,</span> <span class="m">23</span><span class="p">,</span> <span class="m">61</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">37</span><span class="p">,</span> <span class="m">47</span><span class="p">,</span> <span class="m">43</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">73</span><span class="p">,</span> <span class="m">67</span><span class="p">,</span> <span class="m">79</span><span class="p">}</span>

  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">nbs</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">binarySearch</span><span class="p">(</span><span class="n">nbs</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
        <span class="n">b</span><span class="o">.</span><span class="n">Fail</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkBinarySearch</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">arr</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">uint32</span><span class="p">{</span><span class="m">41</span><span class="p">,</span> <span class="m">23</span><span class="p">,</span> <span class="m">11</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">31</span><span class="p">,</span> <span class="m">29</span><span class="p">,</span> <span class="m">37</span><span class="p">,</span> <span class="m">61</span><span class="p">,</span> <span class="m">47</span><span class="p">,</span> <span class="m">43</span><span class="p">,</span> <span class="m">53</span><span class="p">,</span> <span class="m">73</span><span class="p">,</span> <span class="m">67</span><span class="p">,</span> <span class="m">79</span><span class="p">}</span>
  <span class="n">slices</span><span class="o">.</span><span class="n">Sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">arr</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">slices</span><span class="o">.</span><span class="n">BinarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
        <span class="n">b</span><span class="o">.</span><span class="n">Fail</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_sh 5dbbcc16-b021-44bf-abe4-c45e7d210700"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> <span class="nt">-run</span><span class="o">=</span>Benchmark <span class="nt">-bench</span><span class="o">=</span><span class="nb">.</span> <span class="nt">-count</span><span class="o">=</span>10 <span class="nb">.</span>
goos: darwin
goarch: arm64
BenchmarkBinarySearchSIMD-10            29052963                40.82 ns/op
BenchmarkBinarySearchSIMD-10            29059149                40.80 ns/op
BenchmarkBinarySearchSIMD-10            29166654                40.83 ns/op
BenchmarkBinarySearchSIMD-10            29083417                40.83 ns/op
BenchmarkBinarySearchSIMD-10            29022134                40.84 ns/op
BenchmarkBinarySearchSIMD-10            29075196                40.83 ns/op
BenchmarkBinarySearchSIMD-10            28986556                40.81 ns/op
BenchmarkBinarySearchSIMD-10            29005532                40.81 ns/op
BenchmarkBinarySearchSIMD-10            29118674                40.79 ns/op
BenchmarkBinarySearchSIMD-10            28919640                40.79 ns/op
BenchmarkBinarySearch-10                12682536                94.19 ns/op
BenchmarkBinarySearch-10                12656307                94.20 ns/op
BenchmarkBinarySearch-10                12666488                94.19 ns/op
BenchmarkBinarySearch-10                12660024                94.68 ns/op
BenchmarkBinarySearch-10                12671432                94.22 ns/op
BenchmarkBinarySearch-10                12671989                94.25 ns/op
BenchmarkBinarySearch-10                12659746                94.19 ns/op
BenchmarkBinarySearch-10                12688084                94.23 ns/op
BenchmarkBinarySearch-10                12639111                94.21 ns/op
BenchmarkBinarySearch-10                12664016                94.24 ns/op
PASS
</code></pre></div></div>
</li></ul>
<h2 id="conclusion">Conclusion</h2>
<p>In this article we saw a cache friendly version of the binary search using SIMD. While, we focused on the algorithm itself, I worked on this as part of a data structure. It is an AVL Tree that can be frozen at any point, and once frozen, it will let you do the binary search described in this article.</p>
<p>If you would like to have more details on the data structure implemented, or if you have feedback on this article, let me know in the comments section!</p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="SIMD" /><summary type="html"><![CDATA[Recently, I've been looking at cache friendly algorithm for common data structures like trees, tries, ... One such algorithm kept coming up to mind and that's why I decided to implement it in Go.]]></summary></entry><entry><title type="html">Pagination in gRPC</title><link href="https://clement-jean.github.io/pagination_in_grpc/" rel="alternate" type="text/html" title="Pagination in gRPC" /><published>2023-08-24T00:00:00+08:00</published><updated>2023-08-24T00:00:00+08:00</updated><id>https://clement-jean.github.io/pagination_in_grpc</id><content type="html" xml:base="https://clement-jean.github.io/pagination_in_grpc/"><![CDATA[<p>Looking into optimizing one of my APIs, I recently stumbled upon the following resource: <a href="https://cloud.google.com/apis/design/design_patterns">Common design patterns</a>. This contains a lot of insights on how to design proto files in order to make gRPC APIs more idiomatic or more efficient. Within this document, I found the pagination part interesting and decided to write an article on how to implement it.</p>
<h2 id="a-disclaimer">A disclaimer</h2>
<p>In this article I assume that you already know how to create a simple server in gRPC. <strong>I will not show all the boilerplate, you can check it in <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-08-24-pagination_in_grpc">here</a></strong>.</p>
<p>Finally, this article contains data from <a href="https://subscription.packtpub.com/search">Packt</a>. They do not sponsor this article in any way. I'm not getting any money promoting these books (except mine), I simply needed some interesting data for this article.</p>
<h2 id="an-explanation">An explanation</h2>
<p>Before starting the implementation, let's first understand what we are implementing.</p>
<h3 id="what">What</h3>
<p>Pagination is a mechanism which allows the consumer of the API to get a subset of the available resources. This is done in order to limit the payload size returned by the API and thus make the API response faster.</p>
<p>This is generally implemented with the combination of <code>page_size</code> and <code>page_token</code> fields. The former tells how big is the subset we want, and the latter act as an index from which we are going to get the next subset.</p>
<p>Let's see an example of such a pagination. We have the following data:</p>
<div class="code_switcher_container_parent b8fe9c82-88e5-4b0c-8b18-b1bbb33cedc7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"books"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"gRPC Go for Professionals"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"In recent years, the popularity of microservice architecture has surged, bringing forth a new set of requirements."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Clément Jean"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-07-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">260</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781837638840"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Full-Stack Web Development with Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Go is a modern programming language with capabilities to enable high-performance app development."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Nanik Tolaram"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"Nick Glynn"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-02-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">302</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781803234199"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Domain-Driven Design with Golang"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Domain-driven design (DDD) is one of the most sought-after skills in the industry."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Matthew Boyle"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-12-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">204</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804613450"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Building Modern CLI Applications in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Although graphical user interfaces (GUIs) are intuitive and user-friendly, nothing beats a command-line interface"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Marian Montagnino"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-03-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">406</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804611654"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Functional Programming in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"While Go is a multi-paradigm language that gives you the option to choose whichever paradigm works best"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Dylan Meeus"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-03-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">248</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781801811163"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Event-Driven Architecture in Golang"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Event-driven architecture in Golang is an approach used to develop applications that shares state changes asynchronously, internally, and externally using messages."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Michael Stack"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-11-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">384</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781803238012"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Test-Driven Development in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Experienced developers understand the importance of designing a comprehensive testing strategy to ensure efficient shipping and maintaining services in production."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Adelina Simion"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-04-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">342</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781803247878"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mastering Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Mastering Go is the essential guide to putting Go to work on real production systems."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Mihalis Tsoukalos"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-08-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">682</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781801079310"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Network Automation with Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Go’s built-in first-class concurrency mechanisms make it an ideal choice for long-lived low-bandwidth I/O operations, which are typical requirements of network automation and network operations applications."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Nicolas Leiva"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-01-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">442</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781800560925"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Microservices with Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"This book covers the key benefits and common issues of microservices, helping you understand the problems microservice architecture helps to solve, the issues it usually introduces, and the ways to tackle them."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Alexander Shuiskov"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2022-11-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">328</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804617007"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Effective Concurrency in Go"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The Go language has been gaining momentum due to its treatment of concurrency as a core language feature, making concurrent programming more accessible than ever."</span><span class="p">,</span><span class="w">
      </span><span class="nl">"authors"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"Burak Serdar"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"published"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-04-01T00:00:00Z"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"pages"</span><span class="p">:</span><span class="w"> </span><span class="mi">212</span><span class="p">,</span><span class="w">
      </span><span class="nl">"isbn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"9781804619070"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
</div>
<p>As expected, if we start by requesting subset of size 2, we will get the first two books (<code>gRPC Go for Professionals</code> and <code>Full-Stack Web Development with Go</code>). On top of that result, a page token will be returned to us. If we now use this token and request a subset of size 2 we will get the 2 following books (<code>Domain-Driven Design with Golang</code> and <code>Building Modern CLI Applications in Go</code>).</p>
<p>This is pretty much it. It is simple to grasp and also simple to implement.</p>
<h2 id="the-setup">The setup</h2>
<p>In this article:</p>
<ul>
<li>I will be using Postgres to store our books' data. You can find the initialization script <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-08-24-pagination_in_grpc/db">here</a></li>
<li>I will run Postgres and the gRPC with Docker Compose. You can find the YAML file <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-08-24-pagination_in_grpc/docker-compose.yml">here</a></li>
</ul>
<h2 id="protobuf">Protobuf</h2>
<p>If you check the <a href="https://cloud.google.com/apis/design/design_patterns#list_pagination">List Pagination</a> section, you will see that we have the following protobuf schema:</p>
<div class="code_switcher_container_parent 27305bee-543f-4de5-a7f1-c8414054f1dc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">rpc</span> <span class="n">ListBooks</span><span class="p">(</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">ListBooksResponse</span><span class="p">);</span>

<span class="kd">message</span> <span class="nc">ListBooksRequest</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">parent</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">int32</span> <span class="na">page_size</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">page_token</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ListBooksResponse</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="n">Book</span> <span class="na">books</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">next_page_token</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This code is mostly correct but we are going to remove the <code>parent</code> field. If you are interested in knowing what this is used for, check the <a href="https://cloud.google.com/apis/design/design_patterns#list_sub-collections">List Sub-Collections</a> section.</p>
<p>So we now have:</p>
<div class="code_switcher_container_parent c7dbc349-173f-411c-8e72-7fd0f84a0be7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">ListBooksRequest</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">page_size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">page_token</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ListBooksResponse</span> <span class="p">{</span>
  <span class="k">repeated</span> <span class="n">Book</span> <span class="na">books</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">next_page_token</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">service</span> <span class="n">BookStoreService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">ListBooks</span><span class="p">(</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">ListBooksResponse</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The last thing that we need to do is defining the <code>Book</code> message:</p>
<div class="code_switcher_container_parent ec12303a-501e-44df-9f89-cea92e69f729"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"google/protobuf/timestamp.proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">Book</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">description</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
  <span class="k">repeated</span> <span class="kt">string</span> <span class="na">authors</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
  <span class="n">google.protobuf.Timestamp</span> <span class="na">published</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
  <span class="kt">uint32</span> <span class="na">pages</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="kt">string</span> <span class="na">isbn</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>There is nothing fancy here. We simply laid out all the information needed to represent our books.</p>
<h2 id="listbooks">ListBooks</h2>
<p>Let's get started with an empty implementation for <code>ListBooks</code>:</p>
<div class="code_switcher_container_parent 2cc16861-a8df-4a87-8306-cad8f1f0f4a9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">server</span><span class="p">)</span> <span class="n">ListBooks</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>The first step in every endpoint implementation is to validate arguments. In our case we will validate the <code>page_size</code>. We mostly need to check that the <code>page_size</code> is not too big because it defeats the purpose of pagination, and if no <code>page_size</code> is provided we are going to set it to a default value.</p>
<div class="code_switcher_container_parent d18ae2cc-9d4a-4782-b03d-74bd22252ef7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="p">(</span>
  <span class="n">defaultPageSize</span> <span class="o">=</span> <span class="m">10</span>
  <span class="n">maxPageSize</span>     <span class="o">=</span> <span class="m">30</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">validatePageSize</span><span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksRequest</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span> <span class="o">&gt;</span> <span class="n">maxPageSize</span> <span class="p">{</span>
    <span class="n">msg</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span>
      <span class="s">"expected page size between 0 and %d, got %d"</span><span class="p">,</span>
      <span class="n">maxPageSize</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span> <span class="c">// no page_size provided</span>
    <span class="n">req</span><span class="o">.</span><span class="n">PageSize</span> <span class="o">=</span> <span class="n">defaultPageSize</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This means that we can now do the following in <code>ListBooks</code>:</p>
<div class="code_switcher_container_parent 16958407-e362-4a58-a805-50de5c6feca3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">validatePageSize</span><span class="p">(</span><span class="n">req</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">status</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">InvalidArgument</span><span class="p">,</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span><span class="o">.</span><span class="n">Err</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Next, we need to validate <code>page_token</code>. In this implementation, I decided to use <a href="https://github.com/ulid/spec">ULIDs</a>. This is because they are short ids and they are lexicographically sortable. The sortability part is interesting because we will sort the books by their IDs which are ULIDs.</p>
<p>Fortunately for us oklog provides an <a href="https://github.com/oklog/ulid">ULID implementation</a> for us to verify if a ULID is valid or not. In <code>ListBooks</code>, we can simply do:</p>
<div class="code_switcher_container_parent 0ef957f3-e201-4efd-8c37-a4c94bc288fe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ulid</span><span class="o">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">);</span> <span class="nb">len</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
  <span class="n">msg</span> <span class="o">:=</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"expected valid ULID, got error %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
  <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">status</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">InvalidArgument</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span><span class="o">.</span><span class="n">Err</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Notice that the <code>page_token</code> is optional (<code>len(req.PageToken) != 0</code>). When we do not provide one we will start from the beginning of the dataset.</p>
<p>Then, we need to generate the SQL query in order to get the subsets. We need to create the following SQL:</p>
<div class="code_switcher_container_parent 49e6701c-d49e-4d64-9c60-d24583ea6611"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span>
<span class="k">FROM</span> <span class="n">book</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="n">page_token</span>
<span class="k">LIMIT</span> <span class="n">page_size</span>
<span class="k">ORDER</span> <span class="n">id</span> <span class="k">ASC</span>
</code></pre></div></div>
</div>
<p>Obviously, because the page_token is optional, the where clause is optional too.</p>
<p>Using <a href="https://gorm.io/">GORM</a>, we can easily create the request by writing the following:</p>
<div class="code_switcher_container_parent e26f0a91-734b-498d-99cd-d774fcde48ce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">query</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="s">"book"</span><span class="p">)</span><span class="o">.</span><span class="n">Limit</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageSize</span><span class="p">))</span><span class="o">.</span><span class="n">Order</span><span class="p">(</span><span class="s">"id ASC"</span><span class="p">)</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
  <span class="n">query</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">Where</span><span class="p">(</span><span class="s">"id &gt; ?"</span><span class="p">,</span> <span class="n">req</span><span class="o">.</span><span class="n">PageToken</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Now that we have the query, we can simply execute it and map the result into our Protobuf <code>Book</code> model:</p>
<div class="code_switcher_container_parent 97b1e084-7ff5-441a-89b1-a9199f9b1581"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">queryRes</span> <span class="o">=</span> <span class="p">[]</span><span class="n">Book</span><span class="p">{}</span>
<span class="n">query</span><span class="o">.</span><span class="n">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="n">queryRes</span><span class="p">)</span> <span class="c">// execute query</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queryRes</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
  <span class="c">// short circuit if not results</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksResponse</span><span class="p">{},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="n">books</span> <span class="o">:=</span> <span class="n">utils</span><span class="o">.</span><span class="n">Map</span><span class="p">(</span><span class="n">queryRes</span><span class="p">,</span> <span class="n">mapBookToBookPb</span><span class="p">)</span>
</code></pre></div></div>
</div>
<p>Finally, we can get the ID (ULID) of the last item in subset (<code>queryRes</code>) and this will represent the <code>page_token</code> from where a subsequent request need to start getting new result.</p>
<div class="code_switcher_container_parent 2e942837-3be1-48d5-93f5-935f314425fe"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lastItemIdx</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">queryRes</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span>
<span class="n">nextPageToken</span> <span class="o">:=</span> <span class="n">queryRes</span><span class="p">[</span><span class="n">lastItemIdx</span><span class="p">]</span><span class="o">.</span><span class="n">ID</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queryRes</span><span class="p">)</span> <span class="o">&lt;</span> <span class="kt">int</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">PageSize</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// no more pages</span>
  <span class="n">nextPageToken</span> <span class="o">=</span> <span class="s">""</span>
<span class="p">}</span>

<span class="k">return</span> <span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">ListBooksResponse</span><span class="p">{</span>
  <span class="n">Books</span><span class="o">:</span>         <span class="n">books</span><span class="p">,</span>
  <span class="n">NextPageToken</span><span class="o">:</span> <span class="n">nextPageToken</span><span class="p">,</span>
<span class="p">},</span> <span class="no">nil</span>
</code></pre></div></div>
</div>
<p>And we now have pagination! Let's go ahead and test it.</p>
<h2 id="testing">Testing</h2>
<p>The first thing we can test is the case where the consumer doesn't provide a <code>page_token</code> and <code>page_size</code>. This should return 10 results (see <code>defaultPageSize</code>) from the beginning of the data.</p>
<div class="code_switcher_container_parent 06250244-a314-4b5c-ad24-f1c160ecf35d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Full-Stack Web Development with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Domain-Driven Design with Golang"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Building Modern CLI Applications in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Functional Programming in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Event-Driven Architecture in Golang"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Test-Driven Development in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Mastering Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Network Automation with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Microservices with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Effective Concurrency in Go"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"nextPageToken"</span>: <span class="s2">"01H8EH4VYYCS6M4BFVZ90RP7FS"</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>First, you can notice that we had 11 datum and that because we asked for 10 we didn't get &quot;gRPC Go for Professionals&quot;. And secondly, we can see that we got the <code>nextPageToken</code> field.</p>
<p>Let's now use the <code>nextPageToken</code> as <code>page_token</code>:</p>
<div class="code_switcher_container_parent b44b1ae9-3147-4a79-a147-45e4ec664f02"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{"page_token": "01H8EH4VYYCS6M4BFVZ90RP7FS"}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"gRPC Go for Professionals"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>And here we get our 11th datum!</p>
<p>Finally, we can try mixing the <code>page_token</code> and <code>page_size</code> fields. Let's say that we are going to have a <code>page_size</code> of 2. We will do the first request without <code>page_token</code> to get the 2 first elements:</p>
<div class="code_switcher_container_parent 9bd6653e-acae-4dcf-8d20-fda8c5a469ec"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{"page_size": 2}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Full-Stack Web Development with Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Domain-Driven Design with Golang"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"nextPageToken"</span>: <span class="s2">"01H8EH2RM7HVFJG4HYA4XTV0R5"</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>and then we can use the <code>nextPageToken</code> to get the 3rd and 4th elements:</p>
<div class="code_switcher_container_parent 96a01341-4bd2-49ad-b0b2-d50845e4403c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/store.proto <span class="se">\</span>
          <span class="nt">-d</span> <span class="s1">'{"page_size": 2, "page_token": "01H8EH2RM7HVFJG4HYA4XTV0R5"}'</span> <span class="se">\</span>
          0.0.0.0:50051 BookStoreService.ListBooks

<span class="o">{</span>
  <span class="s2">"books"</span>: <span class="o">[</span>
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Building Modern CLI Applications in Go"</span>,
      ...
    <span class="o">}</span>,
    <span class="o">{</span>
      <span class="s2">"name"</span>: <span class="s2">"Functional Programming in Go"</span>,
      ...
    <span class="o">}</span>
  <span class="o">]</span>,
  <span class="s2">"nextPageToken"</span>: <span class="s2">"01H8EH3CKPT5BX263G0NGGKQCQ"</span>
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>Here we go! Everything workks as expected!</p>
<h2 id="conclusion">Conclusion</h2>
<p>We saw that we can implement pagination quite easily in gRPC with the combination of <code>page_token</code> and <code>page_size</code> fields in the request. We also saw that the API endpoint will return a <code>next_page_token</code> that we can later use as an index for the next page we want to get.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="gRPC" /><summary type="html"><![CDATA[Looking into optimizing one of my APIs, I recently stumbled upon the following resource: Common design patterns. This contains a lot of insights on how to design proto files in order to make gRPC APIs more idiomatic or more efficient. Within this document, I found the pagination part interesting and decided to write an article on how to implement it.]]></summary></entry><entry><title type="html">Authorization with gRPC and Envoy</title><link href="https://clement-jean.github.io/grpc_authz_envoy/" rel="alternate" type="text/html" title="Authorization with gRPC and Envoy" /><published>2023-06-07T00:00:00+08:00</published><updated>2023-06-07T00:00:00+08:00</updated><id>https://clement-jean.github.io/grpc_authz_envoy</id><content type="html" xml:base="https://clement-jean.github.io/grpc_authz_envoy/"><![CDATA[<p>Recently, I've been looking for a good alternative to <a href="https://traefik.io/traefik/">Traefik</a> as Reverse Proxy for gRPC services. Traefik has great support for gRPC and other common features, but Envoy comes with Protobuf-backed configuration and even greater support for gRPC services. In the article, I want to show how you can make Envoy use your custom authorization logic before redirecting (or not) the request to other services.</p>
<h2 id="the-code">The code</h2>
<p>The code is available <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-06-07-grpc_authz_envoy">here</a>.</p>
<h2 id="disclaimer">Disclaimer</h2>
<p>This post has been inspired from this <a href="https://ekhabarov.com/post/envoy-as-an-api-gateway-authentication-and-authorization/">article</a>. I thought it would be nice to have a little bit more details and explain how to run the whole thing.</p>
<h2 id="envoy">Envoy</h2>
<p>If you don't know Envoy, it is a <a href="https://en.wikipedia.org/wiki/Reverse_proxy">Reverse Proxy</a>. This is basically a server relaying client requests to other servers (your services). It is generally used to protect the services from direct access and potential abuse. As such, Reverse Proxies can load balance, rate limit, and much more.</p>
<p>Envoy is a project originally designed by Lyft and it is described as &quot;a high performance C++ distributed proxy designed for single services and applications, as well as a communication bus and “universal data plane” designed for large microservice “service mesh” architectures&quot;. That's a lot of buzz words! But for us, the most important is this feature:</p>
<blockquote>
<p>HTTP/2 AND GRPC SUPPORT</p>
<p>Envoy has first class support for HTTP/2 and gRPC for both incoming and outgoing connections. It is a transparent HTTP/1.1 to HTTP/2 proxy.</p>
</blockquote>
<p>One of the interesting features coming out of this support is the fact that Envoy can use custom gRPC services you develop. An example of this is the authorization service that I want to show you here.</p>
<h2 id="protobuf">Protobuf</h2>
<p>Before everything else, let us start by defining the service that we want to protect. Nothing fancy, we are going to use a simple GreetService:</p>
<div class="code_switcher_container_parent 761b8dbb-a3f6-4099-8546-ae2ce2ca8ca4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="kn">package</span> <span class="nn">greet</span><span class="p">;</span>

<span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/Clement-Jean/clement-jean.github.io/proto"</span><span class="p">;</span>

<span class="kd">message</span> <span class="nc">GreetRequest</span> <span class="p">{}</span>
<span class="kd">message</span> <span class="nc">GreetResponse</span> <span class="p">{}</span>

<span class="kd">service</span> <span class="n">GreetService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">Greet</span> <span class="p">(</span><span class="n">GreetRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">GreetResponse</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>After that, Envoy provides us with its own protobuf definition for authorization. We can take a look at <a href="https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/external_auth.proto">external_auth.proto</a> which contains the following:</p>
<div class="code_switcher_container_parent 37a8a746-e6b9-4933-a33e-8a75f8bd7e88"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A generic interface for performing authorization check on incoming</span>
<span class="c1">// requests to a networked service.</span>
<span class="kd">service</span> <span class="n">Authorization</span> <span class="p">{</span>
  <span class="c1">// Performs authorization check based on the attributes associated with the</span>
  <span class="c1">// incoming request, and returns status `OK` or not `OK`.</span>
  <span class="k">rpc</span> <span class="n">Check</span><span class="p">(</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">CheckResponse</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This means that we need to implement the Check unary endpoint and register the Authorization service.</p>
<h2 id="go-control-plane">go-control-plane</h2>
<p>Envoy provides us with a project called go-control-plane. This contains a collection of services such as Authorization that we can implement in our project.</p>
<p>To get it, we simply execute:</p>
<div class="code_switcher_container_parent bcd19045-e7fd-4092-87b8-6e497e1baa47"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go get github.com/envoyproxy/go-control-plane
</code></pre></div></div>
</div>
<p>This gives us access to <code>github.com/envoyproxy/go-control-plane/envoy/service/auth/v3</code> which contains the following structs:</p>
<ul>
<li>CheckRequest</li>
<li>CheckResponse</li>
<li>AutorizationServer (which is an interface containing <code>Check</code>)</li>
</ul>
<p>In our code we can now implement the <code>Check</code> function for our server type. This looks like this:</p>
<div class="code_switcher_container_parent cc297f85-70a2-4f41-b986-9d4a35b9e0d6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="n">auth</span> <span class="s">"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"</span>

<span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Check</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>If you are familiar with gRPC, this should look familiar.</p>
<p>And to register the Authorization service we can simply register like we normally would:</p>
<div class="code_switcher_container_parent 20c0ce18-3e41-408e-a792-d79885dd34ee"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="n">auth</span> <span class="s">"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"</span>
  <span class="n">pb</span> <span class="s">"github.com/Clement-Jean/clement-jean.github.io/proto"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Server</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">pb</span><span class="o">.</span><span class="n">UnimplementedGreetServiceServer</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="n">srv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Server</span><span class="p">{}</span>
  <span class="n">auth</span><span class="o">.</span><span class="n">RegisterAuthorizationServer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">srv</span><span class="p">)</span>
  <span class="n">pb</span><span class="o">.</span><span class="n">RegisterGreetServiceServer</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">srv</span><span class="p">)</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Notice that we are registering both services on the server here. This is not necessary. You could have a microservice specifically dedicated to authorization and the other one to greeting people.</p>
<h2 id="envoy-configuration">Envoy Configuration</h2>
<p>Now, in order to make Envoy do what we want, we need to create some YAML configuration. This configuration generally contains the ports on which Envoy listens, filters for filtering requests based on some properties, and clusters which are a collection of one or more endpoints.</p>
<p>In our case we are going to create two clusters. One for the authorization service and the other service. This is in fact not necessary since we registered both services on the same server, but I wanted to show you that you can split clusters for different microservices.</p>
<p>The clusters definition looks like the following:</p>
<div class="code_switcher_container_parent be636e5b-9ab8-464d-a441-8582fb80932b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">clusters</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">grpc_auth</span>
    <span class="na">http2_protocol_options</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">lb_policy</span><span class="pi">:</span> <span class="s">round_robin</span>
    <span class="na">load_assignment</span><span class="pi">:</span>
      <span class="na">cluster_name</span><span class="pi">:</span> <span class="s">grpc_auth</span>
      <span class="na">endpoints</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">lb_endpoints</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">endpoint</span><span class="pi">:</span>
            <span class="na">address</span><span class="pi">:</span>
              <span class="na">socket_address</span><span class="pi">:</span>
                <span class="na">address</span><span class="pi">:</span> <span class="s">0.0.0.0</span>
                <span class="na">port_value</span><span class="pi">:</span> <span class="m">50051</span>

  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">grpc_greet</span>
    <span class="na">http2_protocol_options</span><span class="pi">:</span> <span class="pi">{}</span>
    <span class="na">lb_policy</span><span class="pi">:</span> <span class="s">round_robin</span>
    <span class="na">load_assignment</span><span class="pi">:</span>
      <span class="na">cluster_name</span><span class="pi">:</span> <span class="s">grpc_greet</span>
      <span class="na">endpoints</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">lb_endpoints</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">endpoint</span><span class="pi">:</span>
            <span class="na">address</span><span class="pi">:</span>
              <span class="na">socket_address</span><span class="pi">:</span>
                <span class="na">address</span><span class="pi">:</span> <span class="s">0.0.0.0</span>
                <span class="na">port_value</span><span class="pi">:</span> <span class="m">50051</span>
</code></pre></div></div>
</div>
<p>I hope we can agree on the fact that they are very similar so let's only dissect the authorization one.</p>
<p><code>http2_protocol_options: {}</code> simply means that we are enabling HTTP/2 for this cluster. This is required for gRPC services since gRPC is basically Protobuf over HTTP/2.</p>
<p>Then we have <code>lb_policy: round_robin</code>. This is not required for us since we will have only one instance of each service but in the case you scale things up, you will have to balance the load across the multiple services.</p>
<p>And finally, all the rest is basically defining a cluster with the name <code>grpc_auth</code> which can be reached at the address <code>0.0.0.0:50051</code>.</p>
<p>Now that we have that, we can take a look at the listener. Let's see the first part of the listener which is simply defining on which address and port Envoy will listen.</p>
<div class="code_switcher_container_parent a31fe0fe-2747-4dc2-87aa-fa20e81b2c4f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
  <span class="na">address</span><span class="pi">:</span>
    <span class="na">socket_address</span><span class="pi">:</span>
      <span class="na">address</span><span class="pi">:</span> <span class="s">0.0.0.0</span>
      <span class="na">port_value</span><span class="pi">:</span> <span class="m">50050</span>
</code></pre></div></div>
</div>
<p>Once again Envoy will listen on <code>0.0.0.0:50050</code>. Now, note that even if you had <code>0.0.0.0:50051</code> there will be no conflict with the <code>0.0.0.0:50051</code> address set in the cluster. This is because generally the gRPC server will be containerized separately from Envoy and thus will listen on its own 50051 port.</p>
<p>Finally, things get a little bit more interesting when we talk about the filters. We need to start with a <code>http_connection_manager</code> that defines the route that we want to protect with authorization.</p>
<div class="code_switcher_container_parent bb6c572a-19fe-4ea5-8d70-75069a4f372d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
    <span class="c1"># address</span>
    <span class="na">filter_chains</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">filters</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.network.http_connection_manager</span>
        <span class="na">typed_config</span><span class="pi">:</span>
          <span class="s2">"</span><span class="s">@type"</span><span class="err">:</span> <span class="s">type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager</span>
          <span class="s">stat_prefix</span><span class="err">:</span> <span class="s">grpc_json</span>
          <span class="s">codec_type</span><span class="err">:</span> <span class="s">AUTO</span>
          <span class="s">route_config</span><span class="err">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">route</span>
            <span class="na">virtual_hosts</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">vh</span>
              <span class="na">domains</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">*"</span><span class="pi">]</span>
              <span class="na">routes</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">prefix</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/greet.GreetService/"</span><span class="pi">,</span> <span class="nv">grpc</span><span class="pi">:</span> <span class="pi">{}</span> <span class="pi">}</span>
                <span class="na">route</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">cluster</span><span class="pi">:</span> <span class="nv">grpc_greet</span><span class="pi">,</span> <span class="nv">timeout</span><span class="pi">:</span> <span class="pi">{</span> <span class="nv">seconds</span><span class="pi">:</span> <span class="nv">60</span> <span class="pi">}</span> <span class="pi">}</span>
</code></pre></div></div>
</div>
<p>The most important part is the virtual_hosts one. We say that we will accept requests from any domain (not recommended in prod), and then we basically that every request made on route matching <code>/greet.GreetService/</code> will be redirected to the <code>grpc_greet</code> cluster</p>
<p>After that, we will configure the external authorization.</p>
<div class="code_switcher_container_parent e4636d49-9af4-46bf-90fb-26b989069a38"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
    <span class="c1"># address</span>
    <span class="na">filter_chains</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">filters</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.network.http_connection_manager</span>
        <span class="na">typed_config</span><span class="pi">:</span>
          <span class="c1"># route matching</span>
          <span class="na">http_filters</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.http.ext_authz</span>
            <span class="na">typed_config</span><span class="pi">:</span>
              <span class="s2">"</span><span class="s">@type"</span><span class="err">:</span> <span class="s">type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz</span>
              <span class="s">grpc_service</span><span class="err">:</span>
                <span class="na">envoy_grpc</span><span class="pi">:</span>
                  <span class="na">cluster_name</span><span class="pi">:</span> <span class="s">grpc_auth</span>
                <span class="na">timeout</span><span class="pi">:</span> <span class="s">0.5s</span>
              <span class="na">transport_api_version</span><span class="pi">:</span> <span class="s">V3</span>
              <span class="na">failure_mode_allow</span><span class="pi">:</span> <span class="no">false</span>
              <span class="na">with_request_body</span><span class="pi">:</span>
                <span class="na">max_request_bytes</span><span class="pi">:</span> <span class="m">8192</span>
                <span class="na">allow_partial_message</span><span class="pi">:</span> <span class="no">true</span>
                <span class="na">pack_as_bytes</span><span class="pi">:</span> <span class="no">true</span>
              <span class="na">status_on_error</span><span class="pi">:</span>
                <span class="na">code</span><span class="pi">:</span> <span class="m">503</span>
</code></pre></div></div>
</div>
<p>The most important things in this part of the config are:</p>
<ul>
<li><code>cluster_name: grpc_auth</code>. We are specifying that the Authorization service can be found in the <code>grpc_auth</code> cluster.</li>
<li><code>code: 503</code>. If any error happens such as not finding the <code>Check</code> endpoint, Envoy will return a 503 error code.</li>
<li><code>with_request_body</code> forwards HTTP body to the Authorization service.</li>
</ul>
<p>Finally, we need to tell Envoy to actually route the requests. We simply do that by adding a <code>envoy.filters.http.router</code> at the end of the <code>http_filters</code>.</p>
<div class="code_switcher_container_parent a47f26b8-8bbe-4d50-a1cb-6e02309d05ce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">listeners</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">listener_grpc</span>
    <span class="c1"># address</span>
    <span class="na">filter_chains</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">filters</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.network.http_connection_manager</span>
        <span class="na">typed_config</span><span class="pi">:</span>
          <span class="c1"># route matching</span>
          <span class="na">http_filters</span><span class="pi">:</span>
          <span class="c1"># ext_authz</span>
          <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">envoy.filters.http.router</span>
            <span class="na">typed_config</span><span class="pi">:</span>
              <span class="s1">'</span><span class="s">@type'</span><span class="err">:</span> <span class="s">type.googleapis.com/envoy.extensions.filters.http.router.v3.Router</span>
</code></pre></div></div>
</div>
<h2 id="lets-codecheckcode">Let's <code>Check</code></h2>
<p>Now that we have our Envoy config ready, it is time to implement the <code>Check</code> endpoint. We will first create a small demo environment where we will receive a token as header. We will check:</p>
<ul>
<li>If the token is empty/doesn't exist -&gt; Deny</li>
<li>If the token value is different from 'authz' -&gt; Deny</li>
<li>Otherwise -&gt; Allow</li>
</ul>
<p>Token checks would normally involve a database of some sort but here, as this is a small demo, let's create a simple function.</p>
<div class="code_switcher_container_parent ace3da00-4742-4ece-a17d-e836bb1681de"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">containsToken</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">false</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"empty key"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="s">"authz"</span><span class="p">),</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Nothing fancy.</p>
<p>Now, in <code>Check</code> we will be receiving headers, not as metadata, but as part of the request. I will let you check <a href="https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/external_auth.proto">external_auth.proto</a> and <a href="https://github.com/envoyproxy/envoy/blob/main/api/envoy/service/auth/v3/attribute_context.proto">attribute_context.proto</a> to understand a little bit more about the data that we will receive as part of <code>CheckRequest</code>.</p>
<p>So we now get the token from the headers and pass it through <code>containsToken</code>.</p>
<div class="code_switcher_container_parent e2c2106a-aae9-46f0-aa6b-d56448df37da"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Check</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">headers</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">Attributes</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">Http</span><span class="o">.</span><span class="n">Headers</span>
  <span class="n">ok</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">containsToken</span><span class="p">(</span><span class="n">headers</span><span class="p">[</span><span class="s">"token"</span><span class="p">])</span>
  <span class="c">//...</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Finally, we still have to do error handling. <code>ok</code> will tell us whether the key is in the 'database' and the <code>err</code> will be errors like <code>empty key</code>. Now, returning an error with <code>go-control-plane</code> and Envoy is a little bit different that what you might expect. This is because instead of returning the error as status like we normally do in gRPC is not compatible with Envoy. Instead, we need to return the status as part of the <code>CheckResponse</code>.</p>
<p>Two helpers functions aiming at creating a <code>Allow</code> and <code>Deny</code> response, that I found <a href="https://ekhabarov.com/post/envoy-as-an-api-gateway-authentication-and-authorization/">here</a>, are pretty self describing:</p>
<div class="code_switcher_container_parent 762c65c4-fe48-40a1-b7b1-0239a2ec91e4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="c">//...</span>
  <span class="s">"google.golang.org/genproto/googleapis/rpc/status"</span>
  <span class="s">"google.golang.org/grpc/codes"</span>

  <span class="n">envoy_type</span> <span class="s">"github.com/envoyproxy/go-control-plane/envoy/type/v3"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">denied</span><span class="p">(</span><span class="n">code</span> <span class="kt">int32</span><span class="p">,</span> <span class="n">body</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">{</span>
    <span class="n">Status</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">status</span><span class="o">.</span><span class="n">Status</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="n">code</span><span class="p">},</span>
    <span class="n">HttpResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse_DeniedResponse</span><span class="p">{</span>
      <span class="n">DeniedResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">DeniedHttpResponse</span><span class="p">{</span>
        <span class="n">Status</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">envoy_type</span><span class="o">.</span><span class="n">HttpStatus</span><span class="p">{</span>
          <span class="n">Code</span><span class="o">:</span> <span class="n">envoy_type</span><span class="o">.</span><span class="n">StatusCode</span><span class="p">(</span><span class="n">code</span><span class="p">),</span>
        <span class="p">},</span>
        <span class="n">Body</span><span class="o">:</span> <span class="n">body</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">allowed</span><span class="p">()</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">{</span>
    <span class="n">Status</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">status</span><span class="o">.</span><span class="n">Status</span><span class="p">{</span><span class="n">Code</span><span class="o">:</span> <span class="kt">int32</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">OK</span><span class="p">)},</span>
    <span class="n">HttpResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse_OkResponse</span><span class="p">{</span>
      <span class="n">OkResponse</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">auth</span><span class="o">.</span><span class="n">OkHttpResponse</span><span class="p">{</span>
        <span class="n">HeadersToRemove</span><span class="o">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"token"</span><span class="p">},</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Notice that we are not using the traditional <code>google.golang.org/grpc/status</code> here. We are using <code>google.golang.org/genproto/googleapis/rpc/status</code>. <strong>As of the time of writing this, I'm not aware of why this is the case. I might come back and update that when I learned why.</strong></p>
<p>Finally, we can finish the implementation of both <code>Check</code> and <code>Greet</code>. We will make <code>Greet</code> return an empty response. And we will make <code>Check</code> return the result of <code>denied</code> in case of error and wrong token, or return the result of <code>allowed</code> if everything goes well.</p>
<div class="code_switcher_container_parent cd752292-8339-4a8e-86ed-1469a4449de6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="s">"net/http"</span>
  <span class="c">//...</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Check</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">auth</span><span class="o">.</span><span class="n">CheckResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">headers</span> <span class="o">:=</span> <span class="n">req</span><span class="o">.</span><span class="n">Attributes</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">Http</span><span class="o">.</span><span class="n">Headers</span>
  <span class="n">ok</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">containsToken</span><span class="p">(</span><span class="n">headers</span><span class="p">[</span><span class="s">"token"</span><span class="p">])</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">denied</span><span class="p">(</span>
      <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span>
      <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"failed retrieving the api key: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">),</span>
    <span class="p">),</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">denied</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusUnauthorized</span><span class="p">,</span> <span class="s">"unauthorized"</span><span class="p">),</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">allowed</span><span class="p">(),</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="o">*</span><span class="n">Server</span><span class="p">)</span> <span class="n">Greet</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">req</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">GreetRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">GreetResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&amp;</span><span class="n">pb</span><span class="o">.</span><span class="n">GreetResponse</span><span class="p">{},</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<h2 id="demo-time">Demo Time!</h2>
<p>Here we are! It's demo time baby!</p>
<p>To test all of this, we will run our server:</p>
<div class="code_switcher_container_parent 75e015ea-7082-46eb-8aa4-9be4bb699d44"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run server/<span class="k">*</span>.go
listening at 0.0.0.0:50051
</code></pre></div></div>
</div>
<p>After that, let's use <a href="https://func-e.io/">func-e</a> to run our Envoy instance:</p>
<div class="code_switcher_container_parent 31f326b0-3c29-4023-9789-4c649b6016bc"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>func-e run <span class="nt">-c</span> envoy/config.yaml
</code></pre></div></div>
</div>
<p>And finally, I will use <a href="https://github.com/fullstorydev/grpcurl">grpcurl</a> to query the Greet endpoint on <code>0.0.0.0:50050</code> (Envoy listener). Let's start with the happy path scenario:</p>
<div class="code_switcher_container_parent e63b427d-db11-4941-8800-002b7cc65bae"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/greet.proto <span class="se">\</span>
          <span class="nt">-rpc-header</span><span class="o">=</span><span class="s2">"token: authz"</span> <span class="se">\</span>
          0.0.0.0:50050 greet.GreetService/Greet
<span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>
</div>
<p>We get an empty <code>GreetResponse</code>, as expected.</p>
<p>Now, we can try without token:</p>
<div class="code_switcher_container_parent a2cfa4de-c45d-46a4-a932-0b5717741630"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/greet.proto <span class="se">\</span>
          0.0.0.0:50050 greet.GreetService/Greet
ERROR:
  Code: Internal
  Message: failed retrieving the api key: empty key
</code></pre></div></div>
</div>
<p>We get an Internal error with the message &quot;empty key&quot;.</p>
<p>And finally, we test with a wrong token:</p>
<div class="code_switcher_container_parent 15696e5d-fffb-4d11-9d39-4ca868886208"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grpcurl <span class="nt">-plaintext</span> <span class="se">\</span>
          <span class="nt">-proto</span> proto/greet.proto <span class="se">\</span>
          <span class="nt">-rpc-header</span><span class="o">=</span><span class="s2">"token: authd"</span> <span class="se">\</span>
          0.0.0.0:50050 greet.GreetService/Greet
ERROR:
  Code: Unauthenticated
  Message: unauthorized
</code></pre></div></div>
</div>
<p>Unauthorized! Great everything is working as expected.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post we saw that we can use Envoy to sit between our services and call an Authorization service to decide whether or not to forward the request to a given route. In our case, we worked on a simple token checking logic but this should look similar for your real-life scenario. I hope this was interesting, thank you for reading!</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="gRPC" /><category term="Envoy" /><summary type="html"><![CDATA[Recently, I've been looking for a good alternative to Traefik as Reverse Proxy for gRPC services. Traefik has great support for gRPC and other common features, but Envoy comes with Protobuf-backed configuration and even greater support for gRPC services. In the article, I want to show how you can make Envoy use your custom authorization logic before redirecting (or not) the request to other services.]]></summary></entry><entry><title type="html">Range Testing in Strings</title><link href="https://clement-jean.github.io/range_testing_in_strings/" rel="alternate" type="text/html" title="Range Testing in Strings" /><published>2023-06-02T00:00:00+08:00</published><updated>2023-06-02T00:00:00+08:00</updated><id>https://clement-jean.github.io/range_testing_in_strings</id><content type="html" xml:base="https://clement-jean.github.io/range_testing_in_strings/"><![CDATA[<p>Recently, I've been working on adding support for <code>SourceCodeInfo</code> into <a href="https://github.com/Clement-Jean/protein">Protein</a>. This required checking a lot of Column/Line ranges in string. An example of this is the following. Given a oneof like this:</p>
<div class="code_switcher_container_parent 8f1fffb5-95eb-489f-84d0-fcfedf0ae39e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">oneof</span> <span class="n">Test</span> <span class="p">{</span>
  <span class="kt">int32</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>we should come up with the following ranges:</p>
<div class="code_switcher_container_parent 47ab5c8f-00e7-4622-8b11-16fc920fdf05"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>
  // line,column
  <span class="o">{</span>0, 0, 2, 1<span class="o">}</span> // oneof - from 0,0 to 2, 1
  <span class="o">{</span>1, 2, 15<span class="o">}</span>   // oneof field - from 1,2 to 1,15 <span class="o">(</span>same lines get ommited<span class="o">)</span>
  <span class="o">{</span>1, 2, 7<span class="o">}</span>    // oneof field <span class="nb">type</span> - from 1,2 to 1,7
  <span class="o">{</span>1, 8, 10<span class="o">}</span>   // oneof field name - from 1,8 to 1,10
  <span class="o">{</span>1, 13, 14<span class="o">}</span>  // oneof field tage - from 1,13 to 1,14
<span class="o">]</span>
</code></pre></div></div>
</div>
<p>This might seem like a daunting and it was until I found out how to test ranges correctly for these kind of situations.</p>
<h2 id="sourcecodeinfo">SourceCodeInfo</h2>
<p>Before starting with the whole testing thing. It is important to get a sense of what a Protobuf's <code>SourceCodeInfo</code> is. As its name suggests this is information about the source code. This information is basically lines and columns for tokens (called spans) and some tags sequence starting from <code>FileDescriptorProto</code> (called path). This info is mostly important for tools like what Protein will be: linters, LSPs, ... It gives us a way to find elements both in terms of position (line 1, column 10) in code and in terms of context (a oneof inside a message).</p>
<p>While the second part is pretty interesting, we are not going to cover that. We will focus on testing the spans correctly. However, if you are interested in learning more about paths, I'd be happy to write an article on it. Leave a comment if you are.</p>
<h2 id="naive-testing">Naive Testing</h2>
<p>Now that we know what are <code>SourceCodeInfo</code> we can start with the testing. A naive and rather manual solution to solve this is probably writing every span by hand. This is pretty much what I did in the introduction of this article. This could mean something like this:</p>
<div class="code_switcher_container_parent dc5d9094-fbd1-4ea5-8412-1b837902722f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
  <span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span>
  <span class="n">info</span> <span class="p">[]</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">SourceCodeInfo_Location</span><span class="p">,</span>
  <span class="n">expectedSpans</span> <span class="p">[][]</span><span class="kt">int32</span><span class="p">,</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"expected info"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">info</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">expectedSpans</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"expected %v, got: %v"</span><span class="p">,</span> <span class="n">expectedSpans</span><span class="p">,</span> <span class="n">info</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">expectedSpan</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">expectedSpans</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Span</span><span class="p">,</span> <span class="n">expectedSpan</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"path %d wrong. expected %v, got: %v"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">expectedSpan</span><span class="p">,</span> <span class="n">info</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Span</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestOneofSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// Arrange</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">)</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

  <span class="c">// Act</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="no">nil</span><span class="p">)</span>

  <span class="c">// Assert</span>
  <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
    <span class="n">t</span><span class="p">,</span>
    <span class="n">info</span><span class="p">,</span>
    <span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">45</span><span class="p">},</span>  <span class="c">// oneof - from 0,0 to 0, 45</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">26</span><span class="p">},</span> <span class="c">// oneof field - from 0,13 to 0,26</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">18</span><span class="p">},</span> <span class="c">// oneof field type - from 0,13 to 0,18</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">19</span><span class="p">,</span> <span class="m">21</span><span class="p">},</span> <span class="c">// oneof field name - from 0,19 to 0,21</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="m">24</span><span class="p">,</span> <span class="m">25</span><span class="p">},</span> <span class="c">// oneof field tage - from 0,24 to 0,25</span>
      <span class="c">// etc...</span>
    <span class="p">},</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This looks rather simple and if we stick to testing small pieces of code, it is feasible to get our way through. However, as you might expect, this is tiring and very repetitive work. Imagine doing that for every single concept in Protobuf...</p>
<h2 id="a-better-way">A Better Way</h2>
<p>For full disclosure, this idea for testing ranges in strings is not my idea. This is an idea I discovered after reading Protobuf documentation and unit tests. An example of this is the documentation for <code>SourceCodeInfo</code> in the descriptor.proto file:</p>
<div class="code_switcher_container_parent ed0a0a77-1bb8-4032-b4c5-0a2d6425dd95"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Let's look at just the field definition:</span>
<span class="c">//   optional string foo = 1;</span>
<span class="c">//   ^       ^^     ^^  ^  ^^^</span>
<span class="c">//   a       bc     de  f  ghi</span>
<span class="c">// We have the following locations:</span>
<span class="c">//   span   path               represents</span>
<span class="c">//   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.</span>
<span class="c">//   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).</span>
<span class="c">//   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).</span>
<span class="c">//   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).</span>
<span class="c">//   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).</span>
</code></pre></div></div>
</div>
<p>We can just focus on the span and how they mark the beginning and end of them with letters. <code>optional</code> as a span of [a, b) (from a to b non-inclusive). Meaning that we go from column 0 to column 8 (length of the work optional) but you can see that <code>b</code> is marking the space character so we do not include that.</p>
<p>Now, even I didn't get the original idea, I believe that implementing it in Go (original in C++) and adding line support is quite interesting. Let us start by the v1 which didn't support multiline code.</p>
<p>The idea is that we are going to have function calculating indices from a string full of separator characters and letters. For example, if we say that the separator is '-', we could have a string like this:</p>
<div class="code_switcher_container_parent dcc77a76-0a6d-4b40-8a3d-a0021828d3ae"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a------------b----cd-e--fghi-----jk---l--mno-p
</code></pre></div></div>
</div>
<p>that would match a oneof like this one:</p>
<div class="code_switcher_container_parent c6b328d8-4f90-48c6-91ef-09ee7268e402"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">oneof</span> <span class="n">Test</span> <span class="p">{</span> <span class="kt">int32</span> <span class="na">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kt">string</span> <span class="na">uuid</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>
</div>
<p>To better see it we will have a function that takes both the original Protobuf code and the reference string (that is what I called the separator-full string) as parameters:</p>
<div class="code_switcher_container_parent 8b803830-f872-4a49-bd13-ce2e4dba1ac4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">referenceString</span><span class="p">(</span>
  <span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
  <span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>This nicely matches and it is easier to visually see where the span starts and ends when we know the letter. If I told you there should be a span [b, h), you can clearly understand that these references to the id field definition.</p>
<p>Now, how should we represent all of this in terms of data structure? The naive approach is to create a <code>map[rune]int32</code>. The <code>rune</code> will be the letterm and we are return <code>int32</code> instead of <code>int</code> simply because <code>SourceCodeInfo</code> is expecting <code>int32</code>s. Then, when we will want to check the value of <code>a</code>, we can simply do:</p>
<div class="code_switcher_container_parent 9aee8a27-3ae7-46c0-a9d6-06aef3610af4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">:=</span> <span class="n">refs</span><span class="p">[</span><span class="sc">'a'</span><span class="p">]</span>
</code></pre></div></div>
</div>
<p>This doesn't seem that bad right? Well, what if you need to access letters a to z? You basically have 26 of these variables around. Feasible but not that ergonomic.</p>
<h2 id="an-even-better-way">An Even Better Way</h2>
<p>My second thought on how to improve this comes from my early interest in reflection. I find it amazing that we take a look at the guts of our program and manipulate it programmatically. An example of that is listing all the fields in a struct and/or set values to them. I don't know what you think but for me this is just so powerful (and dangerous!).</p>
<p>Enough about my geekiness on reflection. What if we could simply have an object into which we will set the values of our spans. This would let us write something like following for accessing values:</p>
<div class="code_switcher_container_parent 57224d39-8131-4c59-9bb0-f9ca1be50932"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ref</span><span class="o">.</span><span class="n">A</span>
</code></pre></div></div>
</div>
<p>How nice would that be? We would only have one variable (ref) and we could access the fields.</p>
<p>It turns out that we can do it pretty easily. Think about a <code>struct</code> like the following:</p>
<div class="code_switcher_container_parent d65c3045-44a4-427a-9c7a-610b92cf3b84"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Ref</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">,</span> <span class="n">K</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">O</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="p">,</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Z</span> <span class="kt">int32</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>I agree that this definition is not that beautiful but it will make our test code easier to read.</p>
<p>With that <code>Ref</code>, we will now use reflection to set <code>A</code> (uppercase because reflection require exported fields) when we see a <code>a</code> in the string. This will look like this:</p>
<div class="code_switcher_container_parent fa1118aa-1417-4685-9aef-4eeeba7e4277"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// referenceString returns the original string and the newly created Ref</span>
<span class="c">// the sep argument is the separator we skip (e.g `-`)</span>
<span class="k">func</span> <span class="n">referenceString</span><span class="p">(</span><span class="n">src</span> <span class="kt">string</span><span class="p">,</span> <span class="n">indices</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sep</span> <span class="kt">rune</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">Ref</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// indices should always be longer than src by 1 rune</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">+</span><span class="m">1</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="s">"wrong indices"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">ref</span> <span class="o">:=</span> <span class="n">Ref</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">indices</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="n">sep</span> <span class="p">{</span>
      <span class="c">// checks valid characters (lowercase letter)</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLower</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v is not a lowercase letter"</span><span class="p">,</span> <span class="n">index</span><span class="p">))</span>
      <span class="p">}</span>

      <span class="c">// this is the index of the letter in our Ref struct!</span>
      <span class="c">// e.g A is at index 0 and Z is at index 25</span>
      <span class="n">idx</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="kt">byte</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span> <span class="c">// ASCII trick to get index of letter in alphabet</span>

      <span class="c">// set the value of i to the field at index idx</span>
      <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">src</span><span class="p">,</span> <span class="n">ref</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>with that we can simply write the following:</p>
<div class="code_switcher_container_parent 2a85b5d0-e8b2-4ec9-8812-fdd4e7560f66"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
  <span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
  <span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>and if we print <code>ref</code> we get:</p>
<div class="code_switcher_container_parent 4450e9e3-c961-40f0-ab0f-720df4da0795"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Ref</span> <span class="p">{</span><span class="n">A</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">B</span><span class="o">:</span> <span class="m">13</span><span class="p">,</span> <span class="n">C</span><span class="o">:</span> <span class="m">18</span><span class="p">,</span> <span class="n">D</span><span class="o">:</span> <span class="m">19</span><span class="p">,</span> <span class="n">E</span><span class="o">:</span> <span class="m">21</span><span class="p">,</span> <span class="n">F</span><span class="o">:</span> <span class="m">24</span><span class="p">,</span> <span class="n">G</span><span class="o">:</span> <span class="m">25</span><span class="p">,</span> <span class="n">H</span><span class="o">:</span> <span class="m">26</span><span class="p">,</span> <span class="n">I</span><span class="o">:</span> <span class="m">27</span><span class="p">,</span> <span class="n">J</span><span class="o">:</span> <span class="m">33</span><span class="p">,</span> <span class="n">K</span><span class="o">:</span> <span class="m">34</span><span class="p">,</span> <span class="n">L</span><span class="o">:</span> <span class="m">38</span><span class="p">,</span> <span class="n">M</span><span class="o">:</span> <span class="m">41</span><span class="p">,</span> <span class="n">N</span><span class="o">:</span> <span class="m">42</span><span class="p">,</span> <span class="n">O</span><span class="o">:</span> <span class="m">43</span><span class="p">,</span> <span class="n">P</span><span class="o">:</span> <span class="m">45</span><span class="p">,</span> <span class="n">Q</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">R</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">S</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">T</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">U</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">V</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">W</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">X</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">Y</span><span class="o">:</span> <span class="m">0</span><span class="p">,</span> <span class="n">Z</span><span class="o">:</span> <span class="m">0</span><span class="p">}</span>
</code></pre></div></div>
</div>
<p>If we check at the span [b, h), we can see that we have [13, 26). This is quite powerful and way more readable. If we rewrite the <code>TestOneofSourceCodeInfo</code> function with the use of <code>Ref</code>, we have:</p>
<div class="code_switcher_container_parent 85a77079-25fc-49e8-be42-68790540b452"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOneofSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="c">// Arrange</span>
  <span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
    <span class="s">"oneof Test { int32 id = 1; string uuid = 2; }"</span><span class="p">,</span>
    <span class="s">"a------------b----cd-e--fghi-----jk---l--mno-p"</span><span class="p">,</span>
    <span class="sc">'-'</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>

  <span class="c">// Act</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="no">nil</span><span class="p">)</span>

  <span class="c">// Assert</span>
  <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
    <span class="n">t</span><span class="p">,</span>
    <span class="n">info</span><span class="p">,</span>
    <span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">P</span><span class="p">},</span>  <span class="c">// oneof - from 0,0 to 0, 45</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">H</span><span class="p">},</span> <span class="c">// oneof field - from 0,13 to 0,26</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">C</span><span class="p">},</span> <span class="c">// oneof field type - from 0,13 to 0,18</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">E</span><span class="p">},</span> <span class="c">// oneof field name - from 0,19 to 0,21</span>
      <span class="p">{</span><span class="m">0</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">F</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">G</span><span class="p">},</span> <span class="c">// oneof field tage - from 0,24 to 0,25</span>
      <span class="c">// etc...</span>
    <span class="p">},</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>This now look a little bit less magic than before with all these numbers everywhere.</p>
<h2 id="supporting-lines">Supporting lines</h2>
<p>As you can see, we still have these 0s for each line. They actually represent lines. Could we also support multiline code? This would let us write something like:</p>
<div class="code_switcher_container_parent ee9ceb45-9d6b-4ac4-843b-7b9d90e90b67"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
  <span class="s">`oneof Test {
int32 id = 1;
string uuid = 2;
}`</span><span class="p">,</span>
  <span class="s">`a------------
b----cd-e--fgh
i-----jk---l--mno
-p`</span><span class="p">,</span>
  <span class="sc">'-'</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>
</div>
<p>Without indentation that looks a little bit weird but this is already letting us testing a little bit more in depth.</p>
<p>The first thing that we are going to do is adding fields in <code>Ref</code> for lines. This looks like:</p>
<div class="code_switcher_container_parent e2086c00-5f60-4bc4-b73e-8f78c8115864"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Ref</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="n">LA</span><span class="p">,</span> <span class="n">LB</span><span class="p">,</span> <span class="n">LC</span><span class="p">,</span> <span class="n">LD</span><span class="p">,</span> <span class="n">LE</span><span class="p">,</span> <span class="n">LF</span><span class="p">,</span> <span class="n">LG</span><span class="p">,</span> <span class="n">LH</span><span class="p">,</span> <span class="n">LI</span><span class="p">,</span> <span class="n">LJ</span><span class="p">,</span> <span class="n">LK</span><span class="p">,</span> <span class="n">LL</span><span class="p">,</span> <span class="n">LM</span><span class="p">,</span> <span class="n">LN</span><span class="p">,</span> <span class="n">LO</span><span class="p">,</span> <span class="n">LP</span><span class="p">,</span> <span class="n">LQ</span><span class="p">,</span> <span class="n">LR</span><span class="p">,</span> <span class="n">LS</span><span class="p">,</span> <span class="n">LT</span><span class="p">,</span> <span class="n">LU</span><span class="p">,</span> <span class="n">LV</span><span class="p">,</span> <span class="n">LW</span><span class="p">,</span> <span class="n">LX</span><span class="p">,</span> <span class="n">LY</span><span class="p">,</span> <span class="n">LZ</span> <span class="kt">int32</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Cringing a little? It's fine! Keep in mind that this is for the sake of having more expressive tests.</p>
<p>Now, in referenceString we will keep track of columns and lines and, for <code>a</code>, we are going to set <code>A</code> to the column and <code>LA</code> to the line. We now have:</p>
<div class="code_switcher_container_parent d52c4caa-9d79-4e87-9158-6b3a3048a143"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">referenceString</span><span class="p">(</span><span class="n">src</span> <span class="kt">string</span><span class="p">,</span> <span class="n">indices</span> <span class="kt">string</span><span class="p">,</span> <span class="n">sep</span> <span class="kt">rune</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">Ref</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">strings</span><span class="o">.</span><span class="n">ReplaceAll</span><span class="p">(</span><span class="n">indices</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">""</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span><span class="o">+</span><span class="m">1</span> <span class="p">{</span>
    <span class="nb">panic</span><span class="p">(</span><span class="s">"wrong indices"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="n">ref</span> <span class="o">:=</span> <span class="n">Ref</span><span class="p">{}</span>
  <span class="n">line</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c">// the line</span>
  <span class="n">column</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="m">0</span><span class="p">)</span> <span class="c">// the column - do not use i anymore</span>

  <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">index</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">indices</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">!=</span> <span class="n">sep</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">!=</span> <span class="sc">'\n'</span> <span class="p">{</span> <span class="c">// also check '\n'</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLetter</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">unicode</span><span class="o">.</span><span class="n">IsLower</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">panic</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%v is not a lowercase letter"</span><span class="p">,</span> <span class="n">index</span><span class="p">))</span>
      <span class="p">}</span>

      <span class="n">idx</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="kt">byte</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="p">)</span>

      <span class="c">// set the column</span>
      <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">column</span><span class="p">))</span>

      <span class="c">// set the line</span>
      <span class="n">reflect</span><span class="o">.</span><span class="n">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ref</span><span class="p">)</span><span class="o">.</span><span class="n">Elem</span><span class="p">()</span><span class="o">.</span><span class="n">Field</span><span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="m">26</span><span class="p">)</span><span class="o">.</span><span class="n">SetInt</span><span class="p">(</span><span class="kt">int64</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="n">column</span> <span class="o">+=</span> <span class="m">1</span>

    <span class="c">// on newline reset column and increase line</span>
    <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="p">{</span>
      <span class="n">line</span><span class="o">++</span>
      <span class="n">column</span> <span class="o">=</span> <span class="m">0</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">src</span><span class="p">,</span> <span class="n">ref</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>With that we can now write a test for multiline like this:</p>
<div class="code_switcher_container_parent 66c02a47-8fa4-4702-a3b6-80f5c4be490c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOneofMultilineSourceCodeInfo</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">pb</span><span class="p">,</span> <span class="n">ref</span> <span class="o">:=</span> <span class="n">referenceString</span><span class="p">(</span>
    <span class="s">`oneof Test {
int32 id = 1;
string uuid = 2;
}`</span><span class="p">,</span>
    <span class="s">`a------------
b----cd-e--fgh
i-----jk---l--mno
-p`</span><span class="p">,</span>
    <span class="sc">'-'</span><span class="p">,</span>
  <span class="p">)</span>

  <span class="n">l</span> <span class="o">:=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">pb</span><span class="p">)</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
  <span class="n">ctx</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">oneofContext</span><span class="p">{}</span>

  <span class="c">// Act</span>
  <span class="n">_</span><span class="p">,</span> <span class="n">info</span> <span class="o">:=</span> <span class="n">augmentParse</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">)</span><span class="o">.</span><span class="n">parseOneof</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">Impl</span><span class="p">),</span> <span class="n">ctx</span><span class="p">)</span>

  <span class="c">// Assert</span>
  <span class="n">runSourceCodeInfoCheck</span><span class="p">(</span>
    <span class="n">t</span><span class="p">,</span>
    <span class="n">info</span><span class="p">,</span>
    <span class="p">[][]</span><span class="kt">int32</span><span class="p">{</span>
      <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LA</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">LP</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">P</span><span class="p">},</span>
      <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LB</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">H</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LB</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">C</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LD</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">E</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LF</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">F</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">G</span><span class="p">},</span>
      <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LI</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">I</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">O</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LI</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">I</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">J</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LK</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">K</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">L</span><span class="p">},</span> <span class="p">{</span><span class="n">ref</span><span class="o">.</span><span class="n">LM</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">M</span><span class="p">,</span> <span class="n">ref</span><span class="o">.</span><span class="n">N</span><span class="p">},</span>
    <span class="p">},</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Take your time to wrap your mind around it. We just made the all things look a little bit more verbose but less magical and frightening.</p>
<h2 id="advantages">Advantages</h2>
<ul>
<li>New developers looking at these tests will probably be less afraid of writing a new test.</li>
<li>Fewer places where we can make typos. Most typos will be in the reference string.</li>
<li>Changing the spans or separators requires us to only update the reference strings, not all the numbers in int32 arrays.</li>
<li>Reflection is letting us create a map out of a struct and have fewer variables.</li>
</ul>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>More verbose.</li>
<li>Reflection is kind of magical too. However, magic is only happening in <code>referenceString</code>. Not everywhere like before.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I hope this makes you as interested as I am on how to improve testing code. I already loved creating readable and deterministic tests but now with this other tool in my tool belt, I'm interested in thinking more about readability and developer onboarding.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="Protobuf" /><summary type="html"><![CDATA[Recently, I've been working on adding support for SourceCodeInfo into Protein. This required checking a lot of Column/Line ranges in string. An example of this is the following. Given a oneof like this:]]></summary></entry><entry><title type="html">Custom RPC Options in Protobuf</title><link href="https://clement-jean.github.io/custom_rpc_options/" rel="alternate" type="text/html" title="Custom RPC Options in Protobuf" /><published>2023-04-17T00:00:00+08:00</published><updated>2023-04-17T00:00:00+08:00</updated><id>https://clement-jean.github.io/custom_rpc_options</id><content type="html" xml:base="https://clement-jean.github.io/custom_rpc_options/"><![CDATA[<p>Recently I had to design authentication for a Blazor Application. After finishing implementing, I soon faced the need to know which RPC endpoint needs authentication and which doesn't. And while part of the problem is a solved one, I still needed a mechanism to let me define this. Let's see how.</p>
<blockquote>
<p>All the code (<strong>only running through Bazel right now</strong>) is available <a href="https://github.com/Clement-Jean/clement-jean.github.io/tree/working/src/2023-04-17-custom_rpc_options">here</a></p>
</blockquote>
<h2 id="custom-options">Custom Options</h2>
<p>Before explaining what my solution to the problem is, I'd like to make sure you understand what are custom options in Protobuf and how to define one. If you are confident about this skill, feel free to skip to the next section.</p>
<p><strong>A custom option is a way to define metadata for a proto file, message, enum, fields, service and rpc</strong>. Generally, we are used to these:</p>
<div class="code_switcher_container_parent 1002749b-c528-4ae1-9cf8-ed7989ef72e6"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">option</span> <span class="na">go_package</span> <span class="o">=</span> <span class="s">"github.com/Clement-Jean/test"</span><span class="p">;</span>
</code></pre></div></div>
</div>
<p>being placed at the top of the proto file. But it is important to know that you can make a field or message deprecated like so:</p>
<div class="code_switcher_container_parent 012f8242-a30c-4ff3-9bd9-93f376041367"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">Test</span> <span class="p">{</span>
  <span class="k">option</span> <span class="na">deprecated</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="kt">int32</span> <span class="na">field</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">[</span> <span class="na">deprecated</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Now, I agree that, in most of the cases, these option are more informational than anything else. They do not necessarily impact the code generation but they are here to document the code. Also, knowing that Protobuf has reflection, we can use them in our code. This means that we could have a tool checking for deprecated messages, fields, ... and give us warnings when we use them in our code base.</p>
<p>How do we define one, though? Well, it turns out that this is pretty simple. We need to use the <code>extend</code> concept and define which kind of option we want to extend. Let's first take a look at what kind of options we have:</p>
<ul class="code-tab-container 4e6d9128-ddda-41bc-8678-6837f0aa999b"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '4e6d9128-ddda-41bc-8678-6837f0aa999b', 0)">descriptor.proto</a></li></ul><ul class="code-tab-switcher 4e6d9128-ddda-41bc-8678-6837f0aa999b"><li class="code_switcher_container_parent active-tab code_switcher_proto 9ab99140-d0dd-4337-a89e-514dde303b7c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">message</span> <span class="nc">FileOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>

  <span class="c1">// Clients can define custom options in extensions of this message. See above.</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">MessageOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">FieldOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">OneofOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">EnumOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">EnumValueOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">ServiceOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">message</span> <span class="nc">MethodOptions</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="k">extensions</span> <span class="mi">1000</span> <span class="k">to</span> <span class="k">max</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>That's actually every concept that we have in Protobuf! So let's define a simple option now. We will define an option called <code>hello</code> of type string. And for making this related to the problem that I'm trying to solve, let's define that option in <code>MethodOptions</code> which represents the options for RPC endpoints.</p>
<p>So we will extend <code>MethodOptions</code>:</p>
<ul class="code-tab-container b5da795a-b2ce-4b2b-b921-4245570156bd"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'b5da795a-b2ce-4b2b-b921-4245570156bd', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher b5da795a-b2ce-4b2b-b921-4245570156bd"><li class="code_switcher_container_parent active-tab code_switcher_proto 324f734f-e0f0-4e4f-bb4e-01f82ca124da"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"google/protobuf/descriptor.proto"</span><span class="p">;</span>

<span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And then inside this <code>extend</code> we can just write the hello field:</p>
<ul class="code-tab-container c32cf882-524b-466c-99bf-f450f239d332"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', 'c32cf882-524b-466c-99bf-f450f239d332', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher c32cf882-524b-466c-99bf-f450f239d332"><li class="code_switcher_container_parent active-tab code_switcher_proto 29a2bfbb-b76c-4e26-b79b-a7fdf9a203b5"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">hello</span> <span class="o">=</span> <span class="err">??</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But what is the tag that we need to use? Well, if you noticed in the <code>descriptor.proto</code> we have an extension range. These are the numbers we can use for tag. For now, we will use 1000, however, be aware that some of these tags are reserved by some already defined options. <strong>So if you were to use a tool that defines options that have the same tag number, there would be conflicts</strong>.</p>
<p>We now have:</p>
<ul class="code-tab-container 34099478-5fcc-4a69-8acf-6df5e0d01e8b"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '34099478-5fcc-4a69-8acf-6df5e0d01e8b', 0)">hello.proto</a></li></ul><ul class="code-tab-switcher 34099478-5fcc-4a69-8acf-6df5e0d01e8b"><li class="code_switcher_container_parent active-tab code_switcher_proto 7e3564b2-58f8-42cd-a9cc-ffbffd70e66b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="na">hello</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="reflection">Reflection</h2>
<p>Let us now use that option and read the value in code.</p>
<p>To use it, this is pretty simple, we just need to import the file in which we wrote the <code>extend</code> and make sure we use the option on an RPC endpoint.</p>
<ul class="code-tab-container 67509fa2-4ec5-4e23-948a-2399a6826cf1"><li class="active-tab code_switcher_proto"><a onclick="selectTab('code_switcher_proto', '67509fa2-4ec5-4e23-948a-2399a6826cf1', 0)">world.proto</a></li></ul><ul class="code-tab-switcher 67509fa2-4ec5-4e23-948a-2399a6826cf1"><li class="code_switcher_container_parent active-tab code_switcher_proto e122b89d-8002-4e2b-b624-ecf527d32284"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">syntax</span> <span class="o">=</span> <span class="s">"proto3"</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"hello.proto"</span><span class="p">;</span>

<span class="c1">//...</span>

<span class="kd">service</span> <span class="n">HelloWorldService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">HelloWorld</span> <span class="p">(</span><span class="n">HelloWorldRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloWorldResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">hello</span><span class="p">)</span> <span class="o">=</span> <span class="s">"world"</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We can generate the proto files out of world.proto and hello.proto. And after that we can take a bottom-up approach to read this value through reflection. By bottom up, I mean that we are going to first see how to read the value of a <code>MethodOptions</code>, then we will go to getting a <code>MethodDescriptor</code> out of a <code>ServiceDescriptor</code>, and finally getting a <code>ServiceDescriptor</code> out a <code>FileDescriptor</code>.</p>
<h3 id="getting-an-option-value">Getting an Option Value</h3>
<p>The first thing we are going to deal with is <code>MethodOptions</code>. These represent the options set on an RPC endpoint. In most of the implementations, we can check the existence of an option so this is as simple as &quot;check if there is the option with a given id on this method, if yes return the value, otherwise return null&quot;.</p>
<ul class="code-tab-container 9d188342-8d81-4d90-b592-0dd03116bb75"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '9d188342-8d81-4d90-b592-0dd03116bb75', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '9d188342-8d81-4d90-b592-0dd03116bb75', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '9d188342-8d81-4d90-b592-0dd03116bb75', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '9d188342-8d81-4d90-b592-0dd03116bb75', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '9d188342-8d81-4d90-b592-0dd03116bb75', 4)">main.cs</a></li></ul><ul class="code-tab-switcher 9d188342-8d81-4d90-b592-0dd03116bb75"><li class="code_switcher_container_parent active-tab code_switcher_go 6632b5da-aaa0-41f9-97e7-729aaea169ce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
  <span class="s">"google.golang.org/protobuf/proto"</span>
  <span class="s">"google.golang.org/protobuf/reflect/protoreflect"</span>
  <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">getOptionValue</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span> <span class="c">// T is not covering all types...</span>
  <span class="n">opts</span> <span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">MethodOptions</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="n">value</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">proto</span><span class="o">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">ok</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">value</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 810ec051-f5fa-428a-9c3f-8e582f2d3a7a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">google</span><span class="o">::</span><span class="n">protobuf</span><span class="p">;</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">OPT_T</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">OPT_T</span><span class="o">&gt;</span> <span class="n">get_option_value</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">MethodOptions</span> <span class="o">&amp;</span><span class="n">opts</span><span class="p">,</span>
  <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">id</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">opts</span><span class="p">.</span><span class="n">HasExtension</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="o">?</span>
    <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="n">GetExtension</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java ea3ec2ee-fc87-4ec2-8d67-c74646184026"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.DescriptorProtos</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.google.protobuf.GeneratedMessage</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getOptionValue</span><span class="o">(</span>
  <span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span> <span class="n">opts</span><span class="o">,</span>
  <span class="nc">GeneratedMessage</span><span class="o">.</span><span class="na">GeneratedExtension</span><span class="o">&lt;</span><span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">id</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">opts</span><span class="o">.</span><span class="na">hasExtension</span><span class="o">(</span><span class="n">id</span><span class="o">)</span> <span class="o">?</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">((</span><span class="no">T</span><span class="o">)</span><span class="n">opts</span><span class="o">.</span><span class="na">getExtension</span><span class="o">(</span><span class="n">id</span><span class="o">))</span> <span class="o">:</span>
    <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python e33a4651-4db0-4473-9679-9d988a31c1e8"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_option_value</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">field</span> <span class="ow">in</span> <span class="n">opts</span><span class="p">.</span><span class="n">ListFields</span><span class="p">():</span>
    <span class="p">(</span><span class="n">desc</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="o">=</span> <span class="n">field</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="s">""</span> <span class="ow">and</span> <span class="n">desc</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="nb">id</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 0752702e-64db-4b5b-b817-d76be1702360"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">pb</span> <span class="p">=</span> <span class="k">global</span><span class="p">::</span><span class="n">Google</span><span class="p">.</span><span class="n">Protobuf</span><span class="p">;</span>

<span class="k">static</span> <span class="k">private</span> <span class="n">T</span> <span class="n">GetOptionValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
  <span class="k">this</span> <span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span> <span class="n">md</span><span class="p">,</span> <span class="c1">// MethodDescriptor and not MethodOptions as promised (sorry!)</span>
  <span class="n">pb</span><span class="p">::</span><span class="n">Extension</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodOptions</span><span class="p">,</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">id</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="n">md</span><span class="p">.</span><span class="nf">GetOptions</span><span class="p">().</span><span class="nf">GetExtension</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</code></pre></div></div>
</li></ul>
<h3 id="getting-a-method">Getting a Method</h3>
<p>The next step is to get a <code>MethodDescriptor</code> out of a <code>ServiceDescriptor</code>. This is done so that we can later call the GetOptionValue function on the options of that method (if any). We will basically loop over all the methods of a service and check for a predicate on each. If the predicate returns true, we &quot;select&quot; that method.</p>
<ul class="code-tab-container d30abdcc-47a1-4a09-a812-e124e47c391e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd30abdcc-47a1-4a09-a812-e124e47c391e', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', 'd30abdcc-47a1-4a09-a812-e124e47c391e', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', 'd30abdcc-47a1-4a09-a812-e124e47c391e', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', 'd30abdcc-47a1-4a09-a812-e124e47c391e', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', 'd30abdcc-47a1-4a09-a812-e124e47c391e', 4)">main.cs</a></li></ul><ul class="code-tab-switcher d30abdcc-47a1-4a09-a812-e124e47c391e"><li class="code_switcher_container_parent active-tab code_switcher_go bc63c1b0-f10c-4ac2-80cc-718ce356c227"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">getServiceMethod</span><span class="p">(</span>
  <span class="n">sd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ServiceDescriptor</span><span class="p">,</span>
  <span class="n">fn</span> <span class="k">func</span><span class="p">(</span><span class="n">md</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span><span class="p">)</span> <span class="kt">bool</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">.</span><span class="n">Methods</span><span class="p">()</span><span class="o">.</span><span class="n">Len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="n">md</span> <span class="o">:=</span> <span class="n">sd</span><span class="o">.</span><span class="n">Methods</span><span class="p">()</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">fn</span><span class="p">(</span><span class="n">md</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">&amp;</span><span class="n">md</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp d2dd015e-846b-4020-b242-7982ac7d58ac"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*&gt;</span> <span class="n">get_service_method</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">ServiceDescriptor</span> <span class="o">*</span><span class="n">sd</span><span class="p">,</span>
  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">predicate</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">-&gt;</span><span class="n">method_count</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">md</span> <span class="o">=</span> <span class="n">sd</span><span class="o">-&gt;</span><span class="n">method</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">predicate</span><span class="p">(</span><span class="n">md</span><span class="p">))</span>
      <span class="k">return</span> <span class="n">md</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 8ad84fc4-0456-4f39-bd31-2e938a226444"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.google.protobuf.Descriptors</span><span class="o">;</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span><span class="o">&gt;</span> <span class="nf">getServiceMethod</span><span class="o">(</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">ServiceDescriptor</span> <span class="n">sd</span><span class="o">,</span>
  <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span><span class="o">,</span> <span class="nc">Boolean</span><span class="o">&gt;</span> <span class="n">predicate</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sd</span><span class="o">.</span><span class="na">getMethods</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Descriptors</span><span class="o">.</span><span class="na">MethodDescriptor</span> <span class="n">method</span> <span class="o">=</span> <span class="n">sd</span><span class="o">.</span><span class="na">getMethods</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">predicate</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">method</span><span class="o">))</span>
      <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">method</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python ff6f57cd-936d-4124-bd89-25ca78126bb0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="n">predicate</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">method_name</span> <span class="ow">in</span> <span class="n">sd</span><span class="p">.</span><span class="n">methods_by_name</span><span class="p">:</span>
    <span class="n">md</span> <span class="o">=</span> <span class="n">sd</span><span class="p">.</span><span class="n">methods_by_name</span><span class="p">[</span><span class="n">method_name</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">predicate</span><span class="p">(</span><span class="n">md</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">md</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp a347ea08-dc7c-4f0e-ad36-42fba49fae8b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span><span class="p">&gt;</span> <span class="nf">GetServiceMethod</span><span class="p">(</span>
  <span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">ServiceDescriptor</span><span class="p">&gt;</span> <span class="n">services</span><span class="p">,</span>
  <span class="n">Func</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodDescriptor</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;</span> <span class="n">predicate</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="k">from</span> <span class="n">svc</span> <span class="k">in</span> <span class="n">services</span>
     <span class="k">from</span> <span class="n">method</span> <span class="k">in</span> <span class="n">svc</span><span class="p">.</span><span class="n">Methods</span>
     <span class="k">where</span> <span class="nf">predicate</span><span class="p">(</span><span class="n">method</span><span class="p">)</span>
     <span class="k">select</span> <span class="n">method</span><span class="p">;</span>
</code></pre></div></div>
</li></ul>
<h3 id="putting-everything-together">Putting Everything Together</h3>
<p>And finally the idea is to call <code>GetServiceMethod</code> on all the <code>ServiceDescriptor</code>s and with the predicate is true we can call <code>GetOptionValue</code> on the method selected.</p>
<ul class="code-tab-container 8cdd2964-9fad-47f7-ba13-64a3c694bf8f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8cdd2964-9fad-47f7-ba13-64a3c694bf8f', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '8cdd2964-9fad-47f7-ba13-64a3c694bf8f', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '8cdd2964-9fad-47f7-ba13-64a3c694bf8f', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '8cdd2964-9fad-47f7-ba13-64a3c694bf8f', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '8cdd2964-9fad-47f7-ba13-64a3c694bf8f', 4)">main.cs</a></li></ul><ul class="code-tab-switcher 8cdd2964-9fad-47f7-ba13-64a3c694bf8f"><li class="code_switcher_container_parent active-tab code_switcher_go 9aa129a7-4025-4df2-9b81-954ce6fd05af"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">getMethodOptionValue</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span>
  <span class="n">sd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ServiceDescriptor</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">value</span> <span class="o">*</span><span class="n">T</span> <span class="o">=</span> <span class="no">nil</span>

  <span class="n">getServiceMethod</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">md</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">MethodDescriptor</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="n">opts</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">md</span><span class="o">.</span><span class="n">Options</span><span class="p">()</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">descriptorpb</span><span class="o">.</span><span class="n">MethodOptions</span><span class="p">)</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">false</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tmp</span> <span class="o">:=</span> <span class="n">getOptionValue</span><span class="p">[</span><span class="n">T</span><span class="p">](</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span> <span class="n">tmp</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">tmp</span>
      <span class="k">return</span> <span class="no">true</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">false</span>
  <span class="p">})</span>

  <span class="k">return</span> <span class="n">value</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">getMethodExtension</span><span class="p">[</span><span class="n">T</span> <span class="kt">string</span> <span class="o">|</span> <span class="kt">int</span> <span class="o">|</span> <span class="kt">bool</span><span class="p">](</span>
  <span class="n">fd</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">FileDescriptor</span><span class="p">,</span>
  <span class="n">id</span> <span class="n">protoreflect</span><span class="o">.</span><span class="n">ExtensionType</span><span class="p">,</span>
<span class="p">)</span> <span class="o">*</span><span class="n">T</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fd</span><span class="o">.</span><span class="n">Services</span><span class="p">()</span><span class="o">.</span><span class="n">Len</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="n">sd</span> <span class="o">:=</span> <span class="n">fd</span><span class="o">.</span><span class="n">Services</span><span class="p">()</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">:=</span> <span class="n">getMethodOptionValue</span><span class="p">[</span><span class="n">T</span><span class="p">](</span><span class="n">sd</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span> <span class="n">value</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">value</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 2ae817b4-b41e-4a67-b844-323457f40aaa"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">U</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">get_method_option_value</span><span class="p">(</span>
  <span class="k">const</span> <span class="n">ServiceDescriptor</span> <span class="o">*</span><span class="n">sd</span><span class="p">,</span> <span class="c1">// in C++ we can access the ServiceDescriptor directly</span>
  <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">id</span>
<span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">sd</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>

  <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">;</span>

  <span class="n">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">id</span><span class="p">](</span><span class="k">const</span> <span class="n">MethodDescriptor</span> <span class="o">*</span><span class="n">md</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="n">opts</span> <span class="o">=</span> <span class="n">md</span><span class="o">-&gt;</span><span class="n">options</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">get_option_value</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="n">id</span><span class="p">))</span>
      <span class="n">value</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">value</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java 1b1ef9c7-53a3-4cc5-b05e-3b0365fcc47c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">getMethodExtension</span><span class="o">(</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">FileDescriptor</span> <span class="n">fd</span><span class="o">,</span>
  <span class="nc">GeneratedMessage</span><span class="o">.</span><span class="na">GeneratedExtension</span><span class="o">&lt;</span><span class="nc">DescriptorProtos</span><span class="o">.</span><span class="na">MethodOptions</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">id</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">fd</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Descriptors</span><span class="o">.</span><span class="na">ServiceDescriptor</span> <span class="n">sd</span> <span class="o">=</span> <span class="n">fd</span><span class="o">.</span><span class="na">getServices</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">world</span> <span class="o">=</span> <span class="n">getMethodOptionValue</span><span class="o">(</span><span class="n">sd</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">hello</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">world</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
      <span class="k">return</span> <span class="n">world</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 5072d817-55fc-4054-91f4-56dd4b0173a4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_method_option_value</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="n">md</span> <span class="o">=</span> <span class="n">get_service_method</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">md</span><span class="p">:</span> <span class="n">get_option_value</span><span class="p">(</span><span class="n">md</span><span class="p">.</span><span class="n">GetOptions</span><span class="p">(),</span> <span class="nb">id</span><span class="p">)</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">)</span>

  <span class="k">return</span> <span class="n">get_option_value</span><span class="p">(</span><span class="n">md</span><span class="p">.</span><span class="n">GetOptions</span><span class="p">(),</span> <span class="nb">id</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_method_extension</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">svc_name</span> <span class="ow">in</span> <span class="n">fd</span><span class="p">.</span><span class="n">services_by_name</span><span class="p">:</span>
    <span class="n">sd</span> <span class="o">=</span> <span class="n">fd</span><span class="p">.</span><span class="n">services_by_name</span><span class="p">[</span><span class="n">svc_name</span><span class="p">]</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">get_method_option_value</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp 588b7102-3814-4cf4-8d8c-4ae8b2a14307"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">private</span> <span class="n">T</span> <span class="n">GetMethodOptionValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
  <span class="k">this</span> <span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">FileDescriptor</span> <span class="n">fd</span><span class="p">,</span>
  <span class="n">pb</span><span class="p">::</span><span class="n">Extension</span><span class="p">&lt;</span><span class="n">pb</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">MethodOptions</span><span class="p">,</span> <span class="n">T</span><span class="p">&gt;</span> <span class="n">id</span>
<span class="p">)</span> <span class="p">=&gt;</span> <span class="n">fd</span><span class="p">.</span><span class="n">Services</span>
       <span class="p">.</span><span class="nf">GetServiceMethod</span><span class="p">(</span><span class="n">md</span> <span class="p">=&gt;</span> <span class="n">md</span><span class="p">.</span><span class="nf">GetOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
       <span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">()</span>
       <span class="p">.</span><span class="nf">GetOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</code></pre></div></div>
</li></ul>
<h3 id="usage">Usage</h3>
<p>Let's see how to use that in our main function.</p>
<ul class="code-tab-container 8b316adf-86b1-4811-a008-fe0767732e7f"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '8b316adf-86b1-4811-a008-fe0767732e7f', 0)">main.go</a></li><li class=" code_switcher_cpp"><a onclick="selectTab('code_switcher_cpp', '8b316adf-86b1-4811-a008-fe0767732e7f', 1)">main.cc</a></li><li class=" code_switcher_java"><a onclick="selectTab('code_switcher_java', '8b316adf-86b1-4811-a008-fe0767732e7f', 2)">main.java</a></li><li class=" code_switcher_python"><a onclick="selectTab('code_switcher_python', '8b316adf-86b1-4811-a008-fe0767732e7f', 3)">main.py</a></li><li class=" code_switcher_csharp"><a onclick="selectTab('code_switcher_csharp', '8b316adf-86b1-4811-a008-fe0767732e7f', 4)">main.cs</a></li></ul><ul class="code-tab-switcher 8b316adf-86b1-4811-a008-fe0767732e7f"><li class="code_switcher_container_parent active-tab code_switcher_go 684b1675-7729-4859-bcaf-e971c0c93512"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c">// pb.File_proto_world_proto is the generated FileDescriptor</span>
  <span class="c">// and pb.E_Hello the generated custom option</span>
  <span class="n">world</span> <span class="o">:=</span> <span class="n">getMethodExtension</span><span class="p">[</span><span class="kt">string</span><span class="p">](</span><span class="n">pb</span><span class="o">.</span><span class="n">File_proto_world_proto</span><span class="p">,</span> <span class="n">pb</span><span class="o">.</span><span class="n">E_Hello</span><span class="p">)</span>

  <span class="k">if</span> <span class="n">world</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">*</span><span class="n">world</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_cpp 7a192601-85c7-4299-bcf0-08d633c37c3d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// HelloWorldService is the generated service</span>
  <span class="k">auto</span> <span class="n">sd</span> <span class="o">=</span> <span class="n">HelloWorldService</span><span class="o">::</span><span class="n">descriptor</span><span class="p">();</span>
  <span class="c1">// hello is the generated custom option</span>
  <span class="k">auto</span> <span class="n">world</span> <span class="o">=</span> <span class="n">get_method_option_value</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sd</span><span class="p">,</span> <span class="n">hello</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">world</span><span class="p">)</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">world</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_java cbe3223c-3bc3-41f1-acfb-a46840202f7c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// World is the FileDescriptor for the file world.proto</span>
  <span class="nc">Descriptors</span><span class="o">.</span><span class="na">FileDescriptor</span> <span class="n">fd</span> <span class="o">=</span> <span class="nc">World</span><span class="o">.</span><span class="na">getDescriptor</span><span class="o">();</span>
  <span class="c1">// Hello.hello is the generated custom option</span>
  <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">world</span> <span class="o">=</span> <span class="n">getMethodExtension</span><span class="o">(</span><span class="n">fd</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">hello</span><span class="o">);</span>

  <span class="n">world</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">w</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">w</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_python 891fc860-49a2-4979-9e4d-1747a1a34e83"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">proto.world_pb2</span> <span class="kn">import</span> <span class="n">DESCRIPTOR</span> <span class="c1"># FileDescriptor for world.proto
</span>
<span class="k">print</span><span class="p">(</span><span class="n">get_method_extension</span><span class="p">(</span><span class="n">DESCRIPTOR</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">))</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_csharp c8e36400-bda3-4ed1-8e6e-95b9509ae38f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">public</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// HelloExtensions.Hello is the generated custom option</span>
  <span class="kt">var</span> <span class="n">id</span> <span class="p">=</span> <span class="n">HelloExtensions</span><span class="p">.</span><span class="n">Hello</span><span class="p">;</span>
  <span class="c1">// WorldReflection.Descriptor is the FileDescriptor for the file world.proto</span>
  <span class="kt">string</span> <span class="n">world</span> <span class="p">=</span> <span class="n">WorldReflection</span><span class="p">.</span><span class="n">Descriptor</span><span class="p">.</span><span class="nf">GetMethodOptionValue</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">world</span><span class="p">.</span><span class="n">Length</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">world</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="back-to-the-problem">Back to the Problem</h2>
<p>Now, as I mentioned I was trying to detect which routes need authentication with the help of such a custom option. It is not that hard to imagine the code we saw in the previous section work for an extension like the following:</p>
<div class="code_switcher_container_parent 49054411-1e4d-45f4-9dae-a6df11c76db2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extend</span> <span class="nc">google</span><span class="o">.</span><span class="n">protobuf.MethodOptions</span> <span class="p">{</span>
  <span class="kt">bool</span> <span class="na">is_authenticated</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>Then, we can use it like so:</p>
<div class="code_switcher_container_parent 23945910-5ee0-414a-a18c-2fa55acf5812"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-proto highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">service</span> <span class="n">CheckoutService</span> <span class="p">{</span>
  <span class="k">rpc</span> <span class="n">Checkout</span> <span class="p">(</span><span class="n">CheckoutRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">CheckoutResponse</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">option</span> <span class="p">(</span><span class="n">is_authenticated</span><span class="p">)</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>And with that we can get the value from the code we wrote earlier. We just need to be requesting the methods with Option having the id &quot;is_authenticated&quot; and make sure that we are asking for a boolean instead of a string.</p>
<h2 id="conclusion">Conclusion</h2>
<p>While this is a little bit hard to work directly with the Protobuf library, automating simple tasks like checking which routes need authentication save a lot of effort. I hope that you will find this content interesting and that you will share some of the extensions that you wrote.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Protobuf" /><summary type="html"><![CDATA[Recently I had to design authentication for a Blazor Application. After finishing implementing, I soon faced the need to know which RPC endpoint needs authentication and which doesn't. And while part of the problem is a solved one, I still needed a mechanism to let me define this. Let's see how.]]></summary></entry><entry><title type="html">Parse go module files</title><link href="https://clement-jean.github.io/parse_go_module_files/" rel="alternate" type="text/html" title="Parse go module files" /><published>2023-03-30T00:00:00+08:00</published><updated>2023-03-30T00:00:00+08:00</updated><id>https://clement-jean.github.io/parse_go_module_files</id><content type="html" xml:base="https://clement-jean.github.io/parse_go_module_files/"><![CDATA[<p>Did you ever need to know, inside your program, on which go version you are running? That's what we are going to solve today. The most common use case for this is logging. We want to be able to debug by reproducing the environment of where the binary is running as close as possible. This starts by knowing which version of go we are using.</p>
<h1 id="setup">Setup</h1>
<p>To get started doing that, we will need a go module. Let's create that:</p>
<div class="code_switcher_container_parent 3397fe19-6825-4387-bd4d-f110f29a1c68"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go mod init test.com
</code></pre></div></div>
</div>
<p>We should now have a go.mod file in our folder. If you inspect this file, we can get the go version which will be used for compiling the project. It looks like this:</p>
<ul class="code-tab-container 92b77c20-c908-4b01-944c-74b5edde6bdb"><li class="active-tab code_switcher_text"><a onclick="selectTab('code_switcher_text', '92b77c20-c908-4b01-944c-74b5edde6bdb', 0)">go.mod</a></li></ul><ul class="code-tab-switcher 92b77c20-c908-4b01-944c-74b5edde6bdb"><li class="code_switcher_container_parent active-tab code_switcher_text a902e46c-1aa9-4961-96b0-0ad1df999683"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module test.com

go 1.20
</code></pre></div></div>
</li></ul>
<p>That's pretty much it. We will use this file to get the info we want.</p>
<h1 id="go-command">Go Command</h1>
<p>One thing that I learned recently is that we can actually get a JSON representation of or modules, workspaces, ... via the command line. To do that, we can run the following command:</p>
<div class="code_switcher_container_parent 21bda397-2222-493d-a778-38a5296816a3"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go mod edit <span class="nt">-json</span>
<span class="o">{</span>
  <span class="s2">"Module"</span>: <span class="o">{</span>
    <span class="s2">"Path"</span>: <span class="s2">"test.com"</span>
  <span class="o">}</span>,
  <span class="s2">"Go"</span>: <span class="s2">"1.20"</span>,
  <span class="s2">"Require"</span>: null,
  <span class="s2">"Exclude"</span>: null,
  <span class="s2">"Replace"</span>: null,
  <span class="s2">"Retract"</span>: null
<span class="o">}</span>
</code></pre></div></div>
</div>
<p>And we have our JSON!</p>
<h1 id="parsing-json">Parsing JSON</h1>
<p>The only thing left to do is execute this command in our main, Unmarshal the JSON result and we should be able to get the version.</p>
<p>First, let's define the structs into which we will Unmarshal to.</p>
<ul class="code-tab-container da7d095d-e0aa-4a5a-9a88-a018ca892323"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'da7d095d-e0aa-4a5a-9a88-a018ca892323', 0)">main.go</a></li></ul><ul class="code-tab-switcher da7d095d-e0aa-4a5a-9a88-a018ca892323"><li class="code_switcher_container_parent active-tab code_switcher_go a84c9374-70f6-4b37-af89-924625f89f1b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Module</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Path</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">GoMod</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Module</span> <span class="n">Module</span>
  <span class="n">Go</span>     <span class="kt">string</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Notice here that I'm not taking Require, Exclude, ... into account. We only want the Go string.</p>
<p>After that, the rest is pretty easy. We can execute a command line and get its stdout result like so:</p>
<div class="code_switcher_container_parent 50e27069-8ef8-48de-af61-89ab6bc0ab7b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"mod"</span><span class="p">,</span> <span class="s">"edit"</span><span class="p">,</span> <span class="s">"-json"</span><span class="p">)</span><span class="o">.</span><span class="n">Output</span><span class="p">()</span>
</code></pre></div></div>
</div>
<p>I'm skipping the err handling here by dropping the error with _ but make sure to handle this for production-grade scripts.</p>
<p>And finally, we use <code>json.Unmarshal</code> function which takes the ouput of the command line, and the destination of where we want to populate the data. In our case, this is an instance of GoMod.</p>
<p>In the end, the main function looks like:</p>
<ul class="code-tab-container bcf5ddae-8cdb-4231-8e71-8559b5c811fb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'bcf5ddae-8cdb-4231-8e71-8559b5c811fb', 0)">main.go</a></li></ul><ul class="code-tab-switcher bcf5ddae-8cdb-4231-8e71-8559b5c811fb"><li class="code_switcher_container_parent active-tab code_switcher_go e54cc7c8-4fca-4313-bdca-084795c2743d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"encoding/json"</span>
  <span class="s">"fmt"</span>
  <span class="s">"os/exec"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Module</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Path</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">GoMod</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">Module</span> <span class="n">Module</span>
  <span class="n">Go</span>     <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="n">mod</span> <span class="n">GoMod</span>
  <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"go"</span><span class="p">,</span> <span class="s">"mod"</span><span class="p">,</span> <span class="s">"edit"</span><span class="p">,</span> <span class="s">"-json"</span><span class="p">)</span><span class="o">.</span><span class="n">Output</span><span class="p">()</span>

  <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mod</span><span class="p">);</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">mod</span><span class="o">.</span><span class="n">Go</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We can run that, and we get:</p>
<div class="code_switcher_container_parent c0105fd6-ad0c-4816-891e-bad8103e79d0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go run main.go
1.20
</code></pre></div></div>
</div>
<p>We now have our Go version at runtime and we can use it for logging, selecting features, ...</p>
<h1 id="the-problem">The Problem</h1>
<p>Obviously, what we saw is far from great. What if we compile our go project to binary and the go.mod is not around anymore. Well, basically it doesn't work.</p>
<p>I'm presenting to you this idea because combined with the right tool to build your project, you can actually embed the version inside your binary. This can be done with ldflags (check <a href="https://blog.alexellis.io/inject-build-time-vars-golang/">Alex Ellis blog post</a> on the subject). But this can also be done with Bazel and <a href="https://bazel.build/docs/user-manual#workspace-status">stamping</a>. If you are interested in knowing how to do that, let me know.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In this short post, we saw how to get the go version on which a go project is compiled at runtime. This can be used in multiple ways, but the use case that has come to me is mostly logging. I hope this is interesting for you.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><summary type="html"><![CDATA[Did you ever need to know, inside your program, on which go version you are running? That's what we are going to solve today. The most common use case for this is logging. We want to be able to debug by reproducing the environment of where the binary is running as close as possible. This starts by knowing which version of go we are using.]]></summary></entry><entry><title type="html">Go Monorepos - Intro</title><link href="https://clement-jean.github.io/go-monorepos-intro/" rel="alternate" type="text/html" title="Go Monorepos - Intro" /><published>2023-03-16T00:00:00+08:00</published><updated>2023-03-16T00:00:00+08:00</updated><id>https://clement-jean.github.io/go-monorepos-intro</id><content type="html" xml:base="https://clement-jean.github.io/go-monorepos-intro/"><![CDATA[<p>Recently I've discovered two interesting was in creating monorepos for go projects. In this article we are going to talk about the advantages and disadvantages of each of these techniques.</p>
<p>This article is an introduction. I will skip over details here because the setup is generally dependent on the technologies you use. <strong>If this article makes you want to know more about the subject, I invite you to tell me with which technology I should set a monorepo for (e.g. gRPC)</strong>.</p>
<h1 id="go-workspaces">Go Workspaces</h1>
<p>The first of these techniques are using Go workspaces. This is nice to be able to do that without any other technology than Go. The goal here is basically to create submodules and link them to the workspace. Let's see an example.</p>
<p>Let's say that we have a server and a client. We will then have the following file architecture:</p>
<div class="code_switcher_container_parent 0ffaa409-546f-4c3a-9518-b46cf1bac14a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div><pre><code>.
├── client
└── server
</code></pre></div>
<p>with that we can start initializing our modules. You can either go into each folder and run <code>go mod init &lt;module_name&gt;</code>, or you can automatize the process and run something like:</p>
<ul class="code-tab-container 16e062c1-22fe-4054-b757-fa38a82c3289"><li class="active-tab code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '16e062c1-22fe-4054-b757-fa38a82c3289', 0)">Linux/MacOS</a></li><li class=" code_switcher_shell"><a onclick="selectTab('code_switcher_shell', '16e062c1-22fe-4054-b757-fa38a82c3289', 1)">Windows (Powershell)</a></li></ul><ul class="code-tab-switcher 16e062c1-22fe-4054-b757-fa38a82c3289"><li class="code_switcher_container_parent active-tab code_switcher_shell 95d39a44-968d-436c-b192-5a20293009b0"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-maxdepth</span> 1 <span class="nt">-type</span> d <span class="nt">-not</span> <span class="nt">-path</span> <span class="nb">.</span> <span class="nt">-execdir</span> sh <span class="nt">-c</span> <span class="s2">"pushd {}; go mod init '&lt;module_name&gt;/{}'; popd"</span> <span class="s2">";"</span>
</code></pre></div></div>
</li><li class="code_switcher_container_parent code_switcher_shell c3084c84-4867-4ca2-b636-8b2784c9801c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Get-ChildItem <span class="nb">.</span> <span class="nt">-Name</span> <span class="nt">-Directory</span> | ForEach-Object <span class="o">{</span> Push-Location <span class="nv">$_</span><span class="p">;</span> go mod init <span class="s2">"&lt;module_name&gt;/</span><span class="nv">$_</span><span class="s2">"</span> <span class="p">;</span> Pop-Location <span class="o">}</span>
</code></pre></div></div>
</li></ul>
<p>These commands will enter each directory, run <code>go mod init</code>, and get out of the directories. <strong>Be careful though, if you have other folders that you don't want to use as modules, you will have to create more complex commands</strong>.</p>
<p>Once we have this, we can create our workspace. To do that, we simply run:</p>
<div class="code_switcher_container_parent bc5bfb2d-e6d7-431b-926e-edb760f997a7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go work init client server
</code></pre></div></div>
</div>
<p>And that's basically it. Client and Server and individual projects that can have their own set of dependencies and you can run each of them at the root folder by running:</p>
<div class="code_switcher_container_parent f679365d-c4d8-4313-afe0-46f69204d5e2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run ./server
</code></pre></div></div>
</div>
<p>and</p>
<div class="code_switcher_container_parent 0c25fb73-8f55-42c1-a265-bcb7298c51c2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run ./client
</code></pre></div></div>
</div>
<h2 id="advantages">Advantages</h2>
<ul>
<li>This is pretty low-tech. We only need Go.</li>
<li>Pretty quick setup for new projects.</li>
<li>Each of the module can get their own dependencies and they can also share some.</li>
</ul>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>All the subprojects need to be written in Go for it to work as intended.</li>
<li>Setup for already existing and complex projects might be hard.</li>
</ul>
<h1 id="bazel">Bazel</h1>
<p>Because setting up a project in Bazel is highly dependent on which technology you want to use, I will not go into to much details here. But the idea with Bazel is that we can have the same kind of monorepo as we saw but we can do this is multi-languages.</p>
<p>If we have a client written in JS and a backend written in Go, we will have a BUILD.bazel file for each subprojects defining how to build each part of the projects. And at the root level we will have a WORKSPACE.bazel file which describes all the build dependencies.</p>
<p>Finally, if you are working with Go modules, <a href="https://github.com/bazelbuild/bazel-gazelle">Gazelle</a> (a BUILD.bazel file generator) can help you write all the build boilerplate for you and let you focus on your code.</p>
<h2 id="advantages-1">Advantages</h2>
<ul>
<li>Once it is set up, it is very efficient to run commands.</li>
<li>Multi-language monorepos.</li>
<li>Setup for already existing and complex projects is easier with Gazelle. Note that this is only for Go.</li>
</ul>
<h2 id="disadvantages-1">Disadvantages</h2>
<ul>
<li>Harder upfront cost for setup.</li>
</ul>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we got an overview of two ways of building monorepos in Go or in multi-language setups. We saw that when we have a newer project we can use Go Workspaces as this is a low-tech way of starting building a monorepo. However, if we decide to have a multi-language setup we will have to move to Bazel. <strong>There are obviously more choices to be made depending on the kind of project you are making and that's why I want your feedback on what I should build</strong>.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>]]></content><author><name>Clement</name></author><category term="Go" /><category term="Bazel" /><summary type="html"><![CDATA[Recently I've discovered two interesting was in creating monorepos for go projects. In this article we are going to talk about the advantages and disadvantages of each of these techniques.]]></summary></entry><entry><title type="html">Protein: Parser (Part 1)</title><link href="https://clement-jean.github.io/protein_parser_part_1/" rel="alternate" type="text/html" title="Protein: Parser (Part 1)" /><published>2023-03-09T00:00:00+08:00</published><updated>2023-03-09T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_parser_part_1</id><content type="html" xml:base="https://clement-jean.github.io/protein_parser_part_1/"><![CDATA[<p>In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!</p>
<h2 id="boilerplate">Boilerplate</h2>
<p>As always, we need to think a little bit before to actually write the features themselves. The first thing that we can do to get us started is to write the Parser interface.</p>
<ul class="code-tab-container 6f77a8de-405a-4734-80b4-fb1a20b9b50e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '6f77a8de-405a-4734-80b4-fb1a20b9b50e', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher 6f77a8de-405a-4734-80b4-fb1a20b9b50e"><li class="code_switcher_container_parent active-tab code_switcher_go 53a5b54c-5d0a-4698-a4f1-37f2cfa5f433"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns ???</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="err">???</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This doesn't seem like a fancy interface but we do have a problem. What is our parser returning when finished? Well, it should return an AST, right? But how do we represent this AST. It turns out, we have two good possibilities:</p>
<ul>
<li>We roll our own serializable AST where each object is a Protobuf Message.</li>
<li>We use the descriptor.proto file which defines Messages for describing elements in a Protobuf file.</li>
</ul>
<p>Both have pros and cons. If we go with the first one we have more control over our serialization. It means that we can optimize some elements' serialized data. However, it also means that we are not compatible with the official way and that's not good.
For the &quot;using the official serialization&quot;, I think you get the idea. We have the pros being the cons of the other implementation, and the cons being the pros of the other implementation.</p>
<p>In the end, for the sake of compatibility, I will be sacrificing some performance. However, these performances are only saving a few bytes and having compatibility with programs serialized by protoc far overweights them.</p>
<h3 id="depending-on-protobuf">Depending on Protobuf</h3>
<p>To use the descriptor, we are going to depend on Protobuf's library. To do that we are going to add in our dependency:</p>
<div class="code_switcher_container_parent 7de82a06-979f-4d10-bf7d-deae0b8a853f"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go get google.golang.org/protobuf
</code></pre></div></div>
</div>
<p>This will let us access <code>descriptorpb</code> package, which contains the <code>FileDescriptorProto</code> struct. If you look at the definition of that struct, you will see the following comment:</p>
<div class="code_switcher_container_parent b0ee2882-e5d1-4af9-859b-c568013c41dd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// Describes a complete .proto file.</span>
<span class="k">type</span> <span class="n">FileDescriptorProto</span> <span class="k">struct</span>
</code></pre></div></div>
</div>
<p>That's exactly what we are trying to do.</p>
<h3 id="back-to-interface">Back to interface</h3>
<p>With that dependency on Protobuf, we can now finish our interface:</p>
<ul class="code-tab-container 007f0235-718a-44f0-94d5-4008310c7677"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '007f0235-718a-44f0-94d5-4008310c7677', 0)">parser/parser.go</a></li></ul><ul class="code-tab-switcher 007f0235-718a-44f0-94d5-4008310c7677"><li class="code_switcher_container_parent active-tab code_switcher_go 67fd6f24-04a8-449e-a83a-c26053bedde9"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>

<span class="c">// Parser is protein's parser</span>
<span class="k">type</span> <span class="n">Parser</span> <span class="k">interface</span> <span class="p">{</span>
  <span class="c">// Parse returns the representation of a file in Protobuf Descriptor</span>
  <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h2 id="implementation">Implementation</h2>
<p>Let's now implement the interface. But by now you know the drill. We are going to create a minimal implementation so that our first test fails. So what we need is an <code>Impl</code> struct and we need to implement <code>Parser</code> by writing the <code>Parse</code> function.</p>
<p>For now, the <code>Parse</code> function will simply return an empty <code>FileDescriptorProto</code>.</p>
<ul class="code-tab-container 7ec5784f-2cdd-4122-a3ce-635fe3c10723"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '7ec5784f-2cdd-4122-a3ce-635fe3c10723', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 7ec5784f-2cdd-4122-a3ce-635fe3c10723"><li class="code_switcher_container_parent active-tab code_switcher_go cd080357-bf7f-49fd-8332-4335f04166df"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="n">pb</span> <span class="s">"google.golang.org/protobuf/types/descriptorpb"</span>
<span class="p">)</span>

<span class="c">// Impl is the implementation for the Parser interface.</span>
<span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
<span class="p">}</span>

<span class="c">// New creates a new instance of the Parser</span>
<span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>

<span class="c">// Parse populates a FileDescriptorProto</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>
  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="first-test">First test</h3>
<p>As our first test we are going to create the test for a syntax statement. This test will take advantage of the fact that <code>Lexer</code> is an interface by creating a <code>FakeLexer</code>. This fake lexer will simply iterate over an array of tokens and return them one by one.</p>
<ul class="code-tab-container 3b350eb6-4d3f-4393-80d9-eac26ca8e50e"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '3b350eb6-4d3f-4393-80d9-eac26ca8e50e', 0)">parser/parser_test.go</a></li></ul><ul class="code-tab-switcher 3b350eb6-4d3f-4393-80d9-eac26ca8e50e"><li class="code_switcher_container_parent active-tab code_switcher_go 8524f922-b2e4-4851-ab0d-4cf97daaae76"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">FakeLexer</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">i</span>      <span class="kt">int</span>
  <span class="n">tokens</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">FakeLexer</span><span class="p">)</span> <span class="n">NextToken</span><span class="p">()</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">l</span><span class="o">.</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}}</span>
  <span class="p">}</span>

  <span class="n">token</span> <span class="o">:=</span> <span class="n">l</span><span class="o">.</span><span class="n">tokens</span><span class="p">[</span><span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="p">]</span>
  <span class="n">l</span><span class="o">.</span><span class="n">i</span><span class="o">++</span>
  <span class="k">return</span> <span class="n">token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This basically means that each time we are running a test in the parser, we are not going to run the lexer code. We are going to simply focus on our current features. So, if we encounter a bug, it means that it is in the parser, not anywhere else.</p>
<p>With that, we can write our first test for <code>syntax = &quot;proto3&quot;;</code>.</p>
<ul class="code-tab-container 4871aab5-42b6-47eb-bbda-40d4ba9fe536"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '4871aab5-42b6-47eb-bbda-40d4ba9fe536', 0)">parser/parser_syntax_test.go</a></li></ul><ul class="code-tab-switcher 4871aab5-42b6-47eb-bbda-40d4ba9fe536"><li class="code_switcher_container_parent active-tab code_switcher_go 2cc82b29-d3e0-479e-8ecf-03575d6a8234"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseSyntaxProto3</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"syntax"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"="</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">proto3</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"proto3"</span>

  <span class="k">if</span> <span class="n">syntax</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetSyntax</span><span class="p">();</span> <span class="n">syntax</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"syntax wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">syntax</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent 7b5c5b99-2b6f-4d5e-9f4a-b9710c6d074d"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseSyntaxProto3 <span class="o">(</span>0.00s<span class="o">)</span>
    parser_syntax_test.go:22: syntax wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'proto3'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<h3 id="parsing">Parsing</h3>
<p>We should now improve the <code>Parse</code> function to consume the <code>Lexer</code>'s tokens and do things with that. Here is the pseudo code:</p>
<div class="code_switcher_container_parent 060359f8-e5aa-4f20-8634-fe450b40422a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">currToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">Identifier</span> <span class="p">{</span>
    <span class="n">fn</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span> <span class="c">// find the function depending on keyword</span>
    <span class="n">fn</span><span class="p">(</span><span class="o">&amp;</span><span class="n">descriptor</span><span class="p">)</span> <span class="c">// populate the descriptor</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</div>
<p>You notice that we need a <code>currToken</code> representing the current token being parsed. We will also need the peek token for parsing syntax and other statements. This is because we are going to make sure each time that the peek token is correct, otherwise we will return an error. So <code>Impl</code> now has a <code>currToken</code> and <code>peekToken</code>:</p>
<ul class="code-tab-container c4eeda8b-563c-49f0-9390-cdce21d47e29"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'c4eeda8b-563c-49f0-9390-cdce21d47e29', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher c4eeda8b-563c-49f0-9390-cdce21d47e29"><li class="code_switcher_container_parent active-tab code_switcher_go f5c553c6-a206-4591-a9da-24ccfd68447a"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Impl</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span>
  <span class="n">curToken</span>  <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
  <span class="n">peekToken</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Token</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Now, we need to populate these tokens before being able to use them. The first time we need to initialize them is in the <code>New</code> function.</p>
<ul class="code-tab-container 70a86838-feb4-4482-a002-daa4fe4f0f0b"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '70a86838-feb4-4482-a002-daa4fe4f0f0b', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 70a86838-feb4-4482-a002-daa4fe4f0f0b"><li class="code_switcher_container_parent active-tab code_switcher_go a57f76bd-2752-478b-b0c8-c5505349b3b2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Lexer</span><span class="p">)</span> <span class="n">Parser</span> <span class="p">{</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Impl</span><span class="p">{</span><span class="n">l</span><span class="o">:</span> <span class="n">l</span><span class="p">}</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="n">p</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>But <code>nextToken</code> is not the <code>Lexer.NextToken</code>, this is a private function in <code>Parser</code>. This is a function that looks for the next non-space token.</p>
<ul class="code-tab-container f0903050-2924-4500-8168-a2e6fa5ca105"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'f0903050-2924-4500-8168-a2e6fa5ca105', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher f0903050-2924-4500-8168-a2e6fa5ca105"><li class="code_switcher_container_parent active-tab code_switcher_go 14fb8bf5-872e-4c00-ac71-8689f799e1db"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">nextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">();</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSpace</span><span class="p">;</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">NextToken</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With that we can start updating our <code>Parse</code> function.</p>
<ul class="code-tab-container 53c39bf5-07ef-4492-b444-85a2db6a909d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '53c39bf5-07ef-4492-b444-85a2db6a909d', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 53c39bf5-07ef-4492-b444-85a2db6a909d"><li class="code_switcher_container_parent active-tab code_switcher_go 9bb12f4d-4643-4455-a35b-a4fa91219ed2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="c">//Do something with token</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Finally, we are going to register all the parsing functions that we are gonna write in this and next articles. We are going to have a map mapping &quot;syntax&quot; to parseSyntax, ...</p>
<ul class="code-tab-container 791dda4e-46ab-4786-a311-de4b9f6cae3c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '791dda4e-46ab-4786-a311-de4b9f6cae3c', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 791dda4e-46ab-4786-a311-de4b9f6cae3c"><li class="code_switcher_container_parent active-tab code_switcher_go d0170ac1-e5ce-4f82-8e0d-24b6d5645bce"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>With this we can finalize the <code>Parse</code> function by looking at the relevant function for the <code>currToken.Literal</code>.</p>
<ul class="code-tab-container ac4a84be-03a4-48a2-8736-f7072992a559"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ac4a84be-03a4-48a2-8736-f7072992a559', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher ac4a84be-03a4-48a2-8736-f7072992a559"><li class="code_switcher_container_parent active-tab code_switcher_go b2cb26c2-f4d7-44aa-8d62-1fda3458255c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">Parse</span><span class="p">()</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span> <span class="p">{</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">{}</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">EOF</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
      <span class="n">fn</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">parseFuncs</span><span class="p">[</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">]</span>
      <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span> <span class="c">// keyword not found</span>
        <span class="k">break</span>
      <span class="p">}</span>
      <span class="n">fn</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">d</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<h3 id="parsesyntax">parseSyntax()</h3>
<p>Before actually parsing a syntax statement, we need two helper functions: <code>accept</code> and <code>acceptPeek</code>. <code>acceptPeek</code> will just call <code>accept</code> with the <code>peekToken.Type</code>. <code>accept</code> take a <code>TokenType</code> and checks if it exists in the following variadic arguments.</p>
<ul class="code-tab-container 30a4b74d-42a7-4ca2-a5af-4a73022bc340"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '30a4b74d-42a7-4ca2-a5af-4a73022bc340', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 30a4b74d-42a7-4ca2-a5af-4a73022bc340"><li class="code_switcher_container_parent active-tab code_switcher_go 2dd1b045-4722-4db6-b7c0-8303d9da68d4"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">accept</span><span class="p">(</span><span class="n">original</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">,</span> <span class="n">expected</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">slices</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">original</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// TODO: add error</span>
    <span class="k">return</span> <span class="no">false</span>
  <span class="p">}</span>

  <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>
  <span class="k">return</span> <span class="no">true</span>
<span class="p">}</span>

<span class="c">// acceptPeek returns true and advance token</span>
<span class="c">// if tt contains the peekToken.Type</span>
<span class="c">// else it returns false</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">acceptPeek</span><span class="p">(</span><span class="n">tt</span> <span class="o">...</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenType</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">p</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span><span class="p">,</span> <span class="n">tt</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now we ready for our <code>parseSyntax</code> function. We are first going to check that we have an <code>=</code> after syntax. Then we check that we have a String, if it’s the case we are going to take the value inside the quotes. And finally, we are going to check that there is a semicolon at the end of the statement.</p>
<ul class="code-tab-container b7c3f3d8-743f-4221-9d68-586cd936ec00"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b7c3f3d8-743f-4221-9d68-586cd936ec00', 0)">parser/syntax.go</a></li></ul><ul class="code-tab-switcher b7c3f3d8-743f-4221-9d68-586cd936ec00"><li class="code_switcher_container_parent active-tab code_switcher_go 1ba7fe40-ce70-4554-b3b8-420a7dc05081"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseSyntax</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenEqual</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The <code>destringify</code> function looks like the following:</p>
<ul class="code-tab-container 982bcb64-1ef4-4c0c-aa6d-8e1b97462adb"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '982bcb64-1ef4-4c0c-aa6d-8e1b97462adb', 0)">parser/utils.go</a></li></ul><ul class="code-tab-switcher 982bcb64-1ef4-4c0c-aa6d-8e1b97462adb"><li class="code_switcher_container_parent active-tab code_switcher_go d3a6717a-8520-4cf0-8f39-f0c7c6ea0461"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="s">"strings"</span>

<span class="k">func</span> <span class="n">destringify</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">strings</span><span class="o">.</span><span class="n">TrimFunc</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">r</span> <span class="kt">rune</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'\'</span><span class="err">'</span> <span class="o">||</span> <span class="n">r</span> <span class="o">==</span> <span class="sc">'"'</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>As mentioned, it takes the values between the quotes.</p>
<p>With our <code>parseSyntax</code> finished, we can rerun the test and:</p>
<div class="code_switcher_container_parent d88bc72d-ccfb-4879-b7bf-64e5a60383c7"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  1.361s
</code></pre></div></div>
</div>
<h3 id="parseimport">parseImport()</h3>
<p><code>parseImport</code> is really similar to <code>parseSyntax</code>. However, with imports, we get introduced to optional keywords. An import can be written in 3 ways:</p>
<ul>
<li><code>import &quot;my.proto&quot;;</code></li>
<li><code>import public &quot;my.proto&quot;;</code></li>
<li><code>import weak &quot;my.proto&quot;;</code></li>
</ul>
<p>Let's write the tests:</p>
<ul class="code-tab-container ee8f3acb-6b67-475a-a1d9-0a75ac8b2c74"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'ee8f3acb-6b67-475a-a1d9-0a75ac8b2c74', 0)">parser/parser_import_test.go</a></li></ul><ul class="code-tab-switcher ee8f3acb-6b67-475a-a1d9-0a75ac8b2c74"><li class="code_switcher_container_parent active-tab code_switcher_go 0ef11cdf-555f-4b7a-afa6-72eb5b8d6930"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParseImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePublicImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"public"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParseWeakImport</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"import"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"weak"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"</span><span class="se">\"</span><span class="s">google/protobuf/empty.proto</span><span class="se">\"</span><span class="s">"</span><span class="p">},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"google/protobuf/empty.proto"</span><span class="p">}</span>
  <span class="n">public</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{}</span>
  <span class="n">weak</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int32</span><span class="p">{</span><span class="m">0</span><span class="p">}</span>

  <span class="k">if</span> <span class="n">imp</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">imp</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">imp</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">p</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPublicDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">public</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"public import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">public</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="n">w</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetWeakDependency</span><span class="p">();</span> <span class="n">slices</span><span class="o">.</span><span class="n">Compare</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"weak import wrong. expected='%v', got='%v'"</span><span class="p">,</span> <span class="n">weak</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Obviously:</p>
<div class="code_switcher_container_parent dd4279a0-e431-4bdc-ae61-594ddf55d38e"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParseImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:25: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParsePublicImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:52: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
<span class="nt">---</span> FAIL: TestParseWeakImport <span class="o">(</span>0.00s<span class="o">)</span>
    parser_import_test.go:79: import wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'[google/protobuf/empty.proto]'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">'[]'</span>
FAIL
</code></pre></div></div>
</div>
<p>Even though the 2nd and 3rd one are rarely used, we still need to support them. To do so, we are going to need to create an enum called <code>DependencyType</code> which will have the variants: None, Public, and Weak. After that, we are going to check if we have an identifier and depending on the <code>Literal</code>, we are going to return the type.</p>
<ul class="code-tab-container d1d4d84e-68d3-4acf-be8b-f789cca56ae1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd1d4d84e-68d3-4acf-be8b-f789cca56ae1', 0)">parser/import.go</a></li></ul><ul class="code-tab-switcher d1d4d84e-68d3-4acf-be8b-f789cca56ae1"><li class="code_switcher_container_parent active-tab code_switcher_go 4281daea-c666-40fd-948b-57f3bd59d9fd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"fmt"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">DependencyType</span> <span class="kt">int</span>

<span class="k">const</span> <span class="p">(</span>
  <span class="n">None</span> <span class="n">DependencyType</span> <span class="o">=</span> <span class="no">iota</span>
  <span class="n">Public</span>
  <span class="n">Weak</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parseImport</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="n">DependencyType</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">,</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="n">depType</span> <span class="o">:=</span> <span class="n">None</span>

  <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"public"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Public</span>
    <span class="k">case</span> <span class="s">"weak"</span><span class="o">:</span>
      <span class="n">depType</span> <span class="o">=</span> <span class="n">Weak</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenStr</span><span class="p">)</span> <span class="p">{</span>
      <span class="c">// TODO: add error</span>
      <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">s</span> <span class="o">:=</span> <span class="n">destringify</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">None</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">depType</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And the last thing we need to do is register that to the <code>parseFuncs</code>.</p>
<ul class="code-tab-container 22ff73b6-98cf-4019-b871-e304c9623f8c"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '22ff73b6-98cf-4019-b871-e304c9623f8c', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 22ff73b6-98cf-4019-b871-e304c9623f8c"><li class="code_switcher_container_parent active-tab code_switcher_go ef8be32c-c108-4a55-9420-ad0ef86852a2"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>We basically append the dependency and if we have a public or weak dependency we add its index into <code>PublicDependency</code> and <code>WeakDependency</code> respectively.</p>
<p>We rerun our test:</p>
<div class="code_switcher_container_parent 2e584cb9-0b92-41fb-8694-62bfaeeabc03"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.450s
</code></pre></div></div>
</div>
<h3 id="parsepackage">parsePackage()</h3>
<p>Once again this function is pretty similar. The main difference is that we are going to look for identifiers and fully qualified names (identifiers separated by dots).</p>
<p>Let's write some tests.</p>
<ul class="code-tab-container b30de41c-d54d-41b4-a278-6fe4654fe784"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'b30de41c-d54d-41b4-a278-6fe4654fe784', 0)">parser/parser_package_test.go</a></li></ul><ul class="code-tab-switcher b30de41c-d54d-41b4-a278-6fe4654fe784"><li class="code_switcher_container_parent active-tab code_switcher_go 92855ec7-5e63-4459-8847-b73b171b64cd"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"testing"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestParsePackage</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">TestParsePackageFullIdentifier</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">tokens</span> <span class="o">:=</span> <span class="p">[]</span><span class="n">lexer</span><span class="o">.</span><span class="n">Token</span><span class="p">{</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"package"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"google"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"."</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">"protobuf"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
    <span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">,</span> <span class="n">Literal</span><span class="o">:</span> <span class="s">";"</span><span class="p">,</span> <span class="n">Position</span><span class="o">:</span> <span class="n">lexer</span><span class="o">.</span><span class="n">Position</span><span class="p">{}},</span>
  <span class="p">}</span>
  <span class="n">l</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">FakeLexer</span><span class="p">{</span><span class="n">tokens</span><span class="o">:</span> <span class="n">tokens</span><span class="p">}</span>
  <span class="n">p</span> <span class="o">:=</span> <span class="n">New</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">d</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>
  <span class="n">expected</span> <span class="o">:=</span> <span class="s">"google.protobuf"</span>

  <span class="k">if</span> <span class="n">pkg</span> <span class="o">:=</span> <span class="n">d</span><span class="o">.</span><span class="n">GetPackage</span><span class="p">();</span> <span class="n">pkg</span> <span class="o">!=</span> <span class="n">expected</span> <span class="p">{</span>
    <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"package wrong. expected='%s', got='%s'"</span><span class="p">,</span> <span class="n">expected</span><span class="p">,</span> <span class="n">pkg</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Let's fail our tests:</p>
<div class="code_switcher_container_parent 9fdc832c-323f-4765-a707-d5b49ab1fb7b"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
<span class="nt">---</span> FAIL: TestParsePackage <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:21: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
<span class="nt">---</span> FAIL: TestParsePackageFullIdentifier <span class="o">(</span>0.00s<span class="o">)</span>
    parser_package_test.go:39: package wrong. <span class="nv">expected</span><span class="o">=</span><span class="s1">'google.protobuf'</span>, <span class="nv">got</span><span class="o">=</span><span class="s1">''</span>
FAIL
</code></pre></div></div>
</div>
<p>And now we can implement the <code>parsePackage</code> function. We are going to check that we have at least one identifier, and then if we have a dot we are going to make sure that we have another identifier after. Finally, we will be looking for the semicolon.</p>
<ul class="code-tab-container 90ca0d1f-614b-47f2-a420-e6e1f3030148"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '90ca0d1f-614b-47f2-a420-e6e1f3030148', 0)">parser/package.go</a></li></ul><ul class="code-tab-switcher 90ca0d1f-614b-47f2-a420-e6e1f3030148"><li class="code_switcher_container_parent active-tab code_switcher_go c426748e-7a22-4787-9ffe-bcafa03b4f7c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">parser</span>

<span class="k">import</span> <span class="p">(</span>
  <span class="s">"strings"</span>

  <span class="s">"github.com/Clement-Jean/protein/lexer"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">parsePackage</span><span class="p">()</span> <span class="o">*</span><span class="kt">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">var</span> <span class="n">parts</span> <span class="p">[]</span><span class="kt">string</span>

  <span class="k">for</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">==</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span> <span class="p">{</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">curToken</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">peekToken</span><span class="o">.</span><span class="n">Type</span> <span class="o">!=</span> <span class="n">lexer</span><span class="o">.</span><span class="n">TokenDot</span> <span class="p">{</span>
      <span class="k">break</span>
    <span class="p">}</span>

    <span class="n">p</span><span class="o">.</span><span class="n">nextToken</span><span class="p">()</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenIdentifier</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="no">nil</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">s</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">Join</span><span class="p">(</span><span class="n">parts</span><span class="p">,</span> <span class="s">"."</span><span class="p">)</span>

  <span class="k">if</span> <span class="o">!</span><span class="n">p</span><span class="o">.</span><span class="n">acceptPeek</span><span class="p">(</span><span class="n">lexer</span><span class="o">.</span><span class="n">TokenSemicolon</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="no">nil</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="o">&amp;</span><span class="n">s</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>The last thing to do is to register this function in our <code>parseFuncs</code>.</p>
<ul class="code-tab-container 08a433db-2d93-412a-a025-07e0b08779a8"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '08a433db-2d93-412a-a025-07e0b08779a8', 0)">parser/impl.go</a></li></ul><ul class="code-tab-switcher 08a433db-2d93-412a-a025-07e0b08779a8"><li class="code_switcher_container_parent active-tab code_switcher_go 75931e8e-b640-40bf-82db-ee4cc2db6278"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">parseFuncs</span> <span class="o">=</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">){</span>
  <span class="s">"syntax"</span><span class="o">:</span>  <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Syntax</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseSyntax</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"package"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span> <span class="n">d</span><span class="o">.</span><span class="n">Package</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">parsePackage</span><span class="p">()</span> <span class="p">},</span>
  <span class="s">"import"</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">Impl</span><span class="p">,</span> <span class="n">d</span> <span class="o">*</span><span class="n">pb</span><span class="o">.</span><span class="n">FileDescriptorProto</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dep</span><span class="p">,</span> <span class="n">t</span> <span class="o">:=</span> <span class="n">p</span><span class="o">.</span><span class="n">parseImport</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">dep</span><span class="p">)</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
      <span class="n">i</span> <span class="o">:=</span> <span class="kt">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">))</span>
      <span class="n">d</span><span class="o">.</span><span class="n">Dependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">Dependency</span><span class="p">,</span> <span class="n">dep</span><span class="p">)</span>
      <span class="k">switch</span> <span class="n">t</span> <span class="p">{</span>
      <span class="k">case</span> <span class="n">Public</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">PublicDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">case</span> <span class="n">Weak</span><span class="o">:</span>
        <span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">WeakDependency</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">},</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>and we rerun our tests.</p>
<div class="code_switcher_container_parent 956d46b1-3bae-444b-bd98-207a3de36359"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/parser  0.847s
</code></pre></div></div>
</div>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we created our first three parsing functions. We parsed syntax, package and imports. We are now ready to go more complicated statements.</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_3" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <!-- <div class="col text-center">
      <a href="/protein_lexer_part_1" class="btn btn-danger text-center">Next Article</a>
    </div> -->
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[In this article we are going to finally get to building the Parser. We are going to start parsing syntax, package and import statements, and we are going to see how to represent our serializable AST. Hope you are ready for this, it's gonna be fun!]]></summary></entry><entry><title type="html">Protein: Lexer (Part 3)</title><link href="https://clement-jean.github.io/protein_lexer_part_3/" rel="alternate" type="text/html" title="Protein: Lexer (Part 3)" /><published>2023-03-03T00:00:00+08:00</published><updated>2023-03-03T00:00:00+08:00</updated><id>https://clement-jean.github.io/protein_lexer_part_3</id><content type="html" xml:base="https://clement-jean.github.io/protein_lexer_part_3/"><![CDATA[<p>This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.</p>
<h2 id="position-checking">Position Checking</h2>
<p>Adding position checking in our test is pretty trivial since it's 3 ifs checking <code>Offset</code>, <code>Line</code>, and <code>Column</code>. So let's add that:</p>
<ul class="code-tab-container 27724695-f732-4aa1-b5ad-de2f3be4eef1"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '27724695-f732-4aa1-b5ad-de2f3be4eef1', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 27724695-f732-4aa1-b5ad-de2f3be4eef1"><li class="code_switcher_container_parent active-tab code_switcher_go 1944e454-9fca-4882-a763-c90169559d8c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">runChecks</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">l</span> <span class="n">Lexer</span><span class="p">,</span> <span class="n">tests</span> <span class="p">[]</span><span class="n">Check</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">tests</span> <span class="p">{</span>
    <span class="c">//...</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - offset wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Offset</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Offset</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - line wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Line</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Line</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span> <span class="o">!=</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span> <span class="p">{</span>
      <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"tests[%d] - column wrong. expected=%d, got=%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">expectedPosition</span><span class="o">.</span><span class="n">Column</span><span class="p">,</span> <span class="n">tok</span><span class="o">.</span><span class="n">Position</span><span class="o">.</span><span class="n">Column</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>And now if we run our tests, we should have a lot of errors coming from the fact that Go will initialize <code>Offset</code>, <code>Line</code>, and <code>Column</code> to 0 (default value). An example of error received is:</p>
<div class="code_switcher_container_parent 92772e77-8927-4ae2-8241-5078db8b0b31"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSymbols <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:31: tests[0] - line wrong. <span class="nv">expected</span><span class="o">=</span>0, <span class="nv">got</span><span class="o">=</span>1
FAIL
</code></pre></div></div>
</div>
<blockquote>
<p>Before going to the new section, make sure that you update the position objects in your tests. If you are not willing to calculate all of the positions, you can just refer to the <a href="https://github.com/Clement-Jean/protein/blob/lexer/lexer/lexer_test.go">tests in the github repo</a> where I did it for you.</p>
</blockquote>
<h2 id="a-bug-">A bug ?!</h2>
<p>Now that we have all our positions set, we can rerun our tests.</p>
<div class="code_switcher_container_parent 08323ce2-1c1e-4448-9e25-f1d61a886db1"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./..
<span class="nt">---</span> FAIL: TestNextTokenOnSpace <span class="o">(</span>0.00s<span class="o">)</span>
    lexer_test.go:35: tests[1] - column wrong. <span class="nv">expected</span><span class="o">=</span>4, <span class="nv">got</span><span class="o">=</span>0
FAIL
</code></pre></div></div>
</div>
<p>And yes we have an error. Let's understand it.</p>
<p>The problem here comes from the way we handle newlines in the <code>emit</code> function. As of right now, this is done like so:</p>
<ul class="code-tab-container 555c42c2-231a-4df3-9dc1-c4f34f16678d"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', '555c42c2-231a-4df3-9dc1-c4f34f16678d', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher 555c42c2-231a-4df3-9dc1-c4f34f16678d"><li class="code_switcher_container_parent active-tab code_switcher_go 172b41b9-d5bc-40ed-ae01-e283c84e817c"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="o">&amp;&amp;</span> <span class="n">strings</span><span class="o">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>This code is checking for a newline inside the literal and if it finds one, it will just set the index of <code>\n</code> in the literal to startLineOffset. The problem here is that we handle all consecutive spaces (the general term) as one token. So when we have <code>\t\n\v\f\r</code>, we are effectively saying that the line starts at the beginning our our space token. This is not correct, right? We should be setting <code>startLineOffset</code> to 2 (just after <code>\n</code>) and then this should affect the <code>Column</code> position because of <code>Column: l.start - l.startLineOffset</code> in the <code>Token</code> instantiation in <code>emit</code>.</p>
<p>So how do we solve that? Well, it turns out to be pretty simple. We are going to look for the last instance of <code>\n</code> in the literal and this will give us the beginning of the line. After that we are going to take the current position (which is after the token right now) and subtract it with the length of the literal minus the beginning of the line. This gives us the offset at which the line begins. So now we should have this:</p>
<ul class="code-tab-container d5611100-a099-4ba1-907a-9c25658419f3"><li class="active-tab code_switcher_go"><a onclick="selectTab('code_switcher_go', 'd5611100-a099-4ba1-907a-9c25658419f3', 0)">lexer/impl.go</a></li></ul><ul class="code-tab-switcher d5611100-a099-4ba1-907a-9c25658419f3"><li class="code_switcher_container_parent active-tab code_switcher_go 688bcb55-3676-42b4-8eac-dbef79f03f58"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">Impl</span><span class="p">)</span> <span class="n">emit</span><span class="p">(</span><span class="n">tt</span> <span class="n">TokenType</span><span class="p">)</span> <span class="n">stateFn</span> <span class="p">{</span>
  <span class="c">//...</span>
  <span class="k">if</span> <span class="n">tt</span> <span class="o">==</span> <span class="n">TokenSpace</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">lineStart</span> <span class="o">:=</span> <span class="n">strings</span><span class="o">.</span><span class="n">LastIndex</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span> <span class="n">lineStart</span> <span class="o">!=</span> <span class="o">-</span><span class="m">1</span> <span class="p">{</span>
      <span class="n">l</span><span class="o">.</span><span class="n">startLineOffset</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">start</span> <span class="o">-</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">Literal</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span> <span class="o">-</span> <span class="n">lineStart</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c">//..</span>
<span class="p">}</span>
</code></pre></div></div>
</li></ul>
<p>Note that we are only finding the last index when the token kind is a space. This is important because if we do that for all the tokens we will have performance hits (especially on large tokens).</p>
<p>And now, if we rerun our test:</p>
<div class="code_switcher_container_parent 065e375c-2aac-40cf-b2ab-a7ee0b616d92"><div class="code_switcher_code_action_container"><button class="code_switcher_theme_button" onclick="updateTheme(true)"></button></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>go <span class="nb">test</span> ./...
ok      github.com/Clement-Jean/protein/lexer  0.857s
</code></pre></div></div>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we made the final test for our lexer and we solved a critical bug for <code>Token</code> positions. We now have a functional lexer and in the next article we are going to start the parser!</p>
<p><strong>If you like this kind of content let me know in the comment section and feel free to ask for help on similar projects, recommend the next post subject or simply send me your feedback.</strong></p>
<div class="container">
  <div class="row">
    <div class="col text-center">
      <a href="/protein_lexer_part_2" class="btn btn-danger text-center">Previous Article</a>
    </div>
    <div class="col text-center">
      <a href="/protein_parser_part_1" class="btn btn-danger text-center">Next Article</a>
    </div>
  </div>
</div>]]></content><author><name>Clement</name></author><category term="Protocol Buffers" /><category term="Go" /><summary type="html"><![CDATA[This article is a small one intended to solve a bug related to token position. As of right now, we only tested that our token got the right literal and the right token kind. In this article, we are going to add the position checking in our tests.]]></summary></entry></feed>